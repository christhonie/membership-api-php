<?php
/**
 * MembershipCriteriaResourceApi
 * PHP version 5
 *
 * @category Class
 * @package  Idealogic\MembershipAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Application API
 *
 * API documentation
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Idealogic\MembershipAPI\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Idealogic\MembershipAPI\ApiException;
use Idealogic\MembershipAPI\Configuration;
use Idealogic\MembershipAPI\HeaderSelector;
use Idealogic\MembershipAPI\ObjectSerializer;

/**
 * MembershipCriteriaResourceApi Class Doc Comment
 *
 * @category Class
 * @package  Idealogic\MembershipAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MembershipCriteriaResourceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation countMembershipCriteriaUsingGET
     *
     * countMembershipCriteria
     *
     * @param  string $gender_equals gender_equals (optional)
     * @param  string[] $gender_in gender_in (optional)
     * @param  string $gender_not_equals gender_not_equals (optional)
     * @param  bool $gender_specified gender_specified (optional)
     * @param  int $id_equals id_equals (optional)
     * @param  int $id_greater_than id_greater_than (optional)
     * @param  int $id_greater_than_or_equal id_greater_than_or_equal (optional)
     * @param  int[] $id_in id_in (optional)
     * @param  int $id_less_than id_less_than (optional)
     * @param  int $id_less_than_or_equal id_less_than_or_equal (optional)
     * @param  int $id_not_equals id_not_equals (optional)
     * @param  bool $id_specified id_specified (optional)
     * @param  int $max_age_equals max_age_equals (optional)
     * @param  int $max_age_greater_than max_age_greater_than (optional)
     * @param  int $max_age_greater_than_or_equal max_age_greater_than_or_equal (optional)
     * @param  int[] $max_age_in max_age_in (optional)
     * @param  int $max_age_less_than max_age_less_than (optional)
     * @param  int $max_age_less_than_or_equal max_age_less_than_or_equal (optional)
     * @param  int $max_age_not_equals max_age_not_equals (optional)
     * @param  bool $max_age_specified max_age_specified (optional)
     * @param  int $min_age_equals min_age_equals (optional)
     * @param  int $min_age_greater_than min_age_greater_than (optional)
     * @param  int $min_age_greater_than_or_equal min_age_greater_than_or_equal (optional)
     * @param  int[] $min_age_in min_age_in (optional)
     * @param  int $min_age_less_than min_age_less_than (optional)
     * @param  int $min_age_less_than_or_equal min_age_less_than_or_equal (optional)
     * @param  int $min_age_not_equals min_age_not_equals (optional)
     * @param  bool $min_age_specified min_age_specified (optional)
     * @param  string $name_contains name_contains (optional)
     * @param  string $name_does_not_contain name_does_not_contain (optional)
     * @param  string $name_equals name_equals (optional)
     * @param  string[] $name_in name_in (optional)
     * @param  string $name_not_equals name_not_equals (optional)
     * @param  bool $name_specified name_specified (optional)
     * @param  int $number_type_id_equals number_type_id_equals (optional)
     * @param  int $number_type_id_greater_than number_type_id_greater_than (optional)
     * @param  int $number_type_id_greater_than_or_equal number_type_id_greater_than_or_equal (optional)
     * @param  int[] $number_type_id_in number_type_id_in (optional)
     * @param  int $number_type_id_less_than number_type_id_less_than (optional)
     * @param  int $number_type_id_less_than_or_equal number_type_id_less_than_or_equal (optional)
     * @param  int $number_type_id_not_equals number_type_id_not_equals (optional)
     * @param  bool $number_type_id_specified number_type_id_specified (optional)
     * @param  int $period_id_equals period_id_equals (optional)
     * @param  int $period_id_greater_than period_id_greater_than (optional)
     * @param  int $period_id_greater_than_or_equal period_id_greater_than_or_equal (optional)
     * @param  int[] $period_id_in period_id_in (optional)
     * @param  int $period_id_less_than period_id_less_than (optional)
     * @param  int $period_id_less_than_or_equal period_id_less_than_or_equal (optional)
     * @param  int $period_id_not_equals period_id_not_equals (optional)
     * @param  bool $period_id_specified period_id_specified (optional)
     * @param  int $product_id_equals product_id_equals (optional)
     * @param  int $product_id_greater_than product_id_greater_than (optional)
     * @param  int $product_id_greater_than_or_equal product_id_greater_than_or_equal (optional)
     * @param  int[] $product_id_in product_id_in (optional)
     * @param  int $product_id_less_than product_id_less_than (optional)
     * @param  int $product_id_less_than_or_equal product_id_less_than_or_equal (optional)
     * @param  int $product_id_not_equals product_id_not_equals (optional)
     * @param  bool $product_id_specified product_id_specified (optional)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return int
     */
    public function countMembershipCriteriaUsingGET($gender_equals = null, $gender_in = null, $gender_not_equals = null, $gender_specified = null, $id_equals = null, $id_greater_than = null, $id_greater_than_or_equal = null, $id_in = null, $id_less_than = null, $id_less_than_or_equal = null, $id_not_equals = null, $id_specified = null, $max_age_equals = null, $max_age_greater_than = null, $max_age_greater_than_or_equal = null, $max_age_in = null, $max_age_less_than = null, $max_age_less_than_or_equal = null, $max_age_not_equals = null, $max_age_specified = null, $min_age_equals = null, $min_age_greater_than = null, $min_age_greater_than_or_equal = null, $min_age_in = null, $min_age_less_than = null, $min_age_less_than_or_equal = null, $min_age_not_equals = null, $min_age_specified = null, $name_contains = null, $name_does_not_contain = null, $name_equals = null, $name_in = null, $name_not_equals = null, $name_specified = null, $number_type_id_equals = null, $number_type_id_greater_than = null, $number_type_id_greater_than_or_equal = null, $number_type_id_in = null, $number_type_id_less_than = null, $number_type_id_less_than_or_equal = null, $number_type_id_not_equals = null, $number_type_id_specified = null, $period_id_equals = null, $period_id_greater_than = null, $period_id_greater_than_or_equal = null, $period_id_in = null, $period_id_less_than = null, $period_id_less_than_or_equal = null, $period_id_not_equals = null, $period_id_specified = null, $product_id_equals = null, $product_id_greater_than = null, $product_id_greater_than_or_equal = null, $product_id_in = null, $product_id_less_than = null, $product_id_less_than_or_equal = null, $product_id_not_equals = null, $product_id_specified = null)
    {
        list($response) = $this->countMembershipCriteriaUsingGETWithHttpInfo($gender_equals, $gender_in, $gender_not_equals, $gender_specified, $id_equals, $id_greater_than, $id_greater_than_or_equal, $id_in, $id_less_than, $id_less_than_or_equal, $id_not_equals, $id_specified, $max_age_equals, $max_age_greater_than, $max_age_greater_than_or_equal, $max_age_in, $max_age_less_than, $max_age_less_than_or_equal, $max_age_not_equals, $max_age_specified, $min_age_equals, $min_age_greater_than, $min_age_greater_than_or_equal, $min_age_in, $min_age_less_than, $min_age_less_than_or_equal, $min_age_not_equals, $min_age_specified, $name_contains, $name_does_not_contain, $name_equals, $name_in, $name_not_equals, $name_specified, $number_type_id_equals, $number_type_id_greater_than, $number_type_id_greater_than_or_equal, $number_type_id_in, $number_type_id_less_than, $number_type_id_less_than_or_equal, $number_type_id_not_equals, $number_type_id_specified, $period_id_equals, $period_id_greater_than, $period_id_greater_than_or_equal, $period_id_in, $period_id_less_than, $period_id_less_than_or_equal, $period_id_not_equals, $period_id_specified, $product_id_equals, $product_id_greater_than, $product_id_greater_than_or_equal, $product_id_in, $product_id_less_than, $product_id_less_than_or_equal, $product_id_not_equals, $product_id_specified);
        return $response;
    }

    /**
     * Operation countMembershipCriteriaUsingGETWithHttpInfo
     *
     * countMembershipCriteria
     *
     * @param  string $gender_equals (optional)
     * @param  string[] $gender_in (optional)
     * @param  string $gender_not_equals (optional)
     * @param  bool $gender_specified (optional)
     * @param  int $id_equals (optional)
     * @param  int $id_greater_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int[] $id_in (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int $max_age_equals (optional)
     * @param  int $max_age_greater_than (optional)
     * @param  int $max_age_greater_than_or_equal (optional)
     * @param  int[] $max_age_in (optional)
     * @param  int $max_age_less_than (optional)
     * @param  int $max_age_less_than_or_equal (optional)
     * @param  int $max_age_not_equals (optional)
     * @param  bool $max_age_specified (optional)
     * @param  int $min_age_equals (optional)
     * @param  int $min_age_greater_than (optional)
     * @param  int $min_age_greater_than_or_equal (optional)
     * @param  int[] $min_age_in (optional)
     * @param  int $min_age_less_than (optional)
     * @param  int $min_age_less_than_or_equal (optional)
     * @param  int $min_age_not_equals (optional)
     * @param  bool $min_age_specified (optional)
     * @param  string $name_contains (optional)
     * @param  string $name_does_not_contain (optional)
     * @param  string $name_equals (optional)
     * @param  string[] $name_in (optional)
     * @param  string $name_not_equals (optional)
     * @param  bool $name_specified (optional)
     * @param  int $number_type_id_equals (optional)
     * @param  int $number_type_id_greater_than (optional)
     * @param  int $number_type_id_greater_than_or_equal (optional)
     * @param  int[] $number_type_id_in (optional)
     * @param  int $number_type_id_less_than (optional)
     * @param  int $number_type_id_less_than_or_equal (optional)
     * @param  int $number_type_id_not_equals (optional)
     * @param  bool $number_type_id_specified (optional)
     * @param  int $period_id_equals (optional)
     * @param  int $period_id_greater_than (optional)
     * @param  int $period_id_greater_than_or_equal (optional)
     * @param  int[] $period_id_in (optional)
     * @param  int $period_id_less_than (optional)
     * @param  int $period_id_less_than_or_equal (optional)
     * @param  int $period_id_not_equals (optional)
     * @param  bool $period_id_specified (optional)
     * @param  int $product_id_equals (optional)
     * @param  int $product_id_greater_than (optional)
     * @param  int $product_id_greater_than_or_equal (optional)
     * @param  int[] $product_id_in (optional)
     * @param  int $product_id_less_than (optional)
     * @param  int $product_id_less_than_or_equal (optional)
     * @param  int $product_id_not_equals (optional)
     * @param  bool $product_id_specified (optional)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function countMembershipCriteriaUsingGETWithHttpInfo($gender_equals = null, $gender_in = null, $gender_not_equals = null, $gender_specified = null, $id_equals = null, $id_greater_than = null, $id_greater_than_or_equal = null, $id_in = null, $id_less_than = null, $id_less_than_or_equal = null, $id_not_equals = null, $id_specified = null, $max_age_equals = null, $max_age_greater_than = null, $max_age_greater_than_or_equal = null, $max_age_in = null, $max_age_less_than = null, $max_age_less_than_or_equal = null, $max_age_not_equals = null, $max_age_specified = null, $min_age_equals = null, $min_age_greater_than = null, $min_age_greater_than_or_equal = null, $min_age_in = null, $min_age_less_than = null, $min_age_less_than_or_equal = null, $min_age_not_equals = null, $min_age_specified = null, $name_contains = null, $name_does_not_contain = null, $name_equals = null, $name_in = null, $name_not_equals = null, $name_specified = null, $number_type_id_equals = null, $number_type_id_greater_than = null, $number_type_id_greater_than_or_equal = null, $number_type_id_in = null, $number_type_id_less_than = null, $number_type_id_less_than_or_equal = null, $number_type_id_not_equals = null, $number_type_id_specified = null, $period_id_equals = null, $period_id_greater_than = null, $period_id_greater_than_or_equal = null, $period_id_in = null, $period_id_less_than = null, $period_id_less_than_or_equal = null, $period_id_not_equals = null, $period_id_specified = null, $product_id_equals = null, $product_id_greater_than = null, $product_id_greater_than_or_equal = null, $product_id_in = null, $product_id_less_than = null, $product_id_less_than_or_equal = null, $product_id_not_equals = null, $product_id_specified = null)
    {
        $returnType = 'int';
        $request = $this->countMembershipCriteriaUsingGETRequest($gender_equals, $gender_in, $gender_not_equals, $gender_specified, $id_equals, $id_greater_than, $id_greater_than_or_equal, $id_in, $id_less_than, $id_less_than_or_equal, $id_not_equals, $id_specified, $max_age_equals, $max_age_greater_than, $max_age_greater_than_or_equal, $max_age_in, $max_age_less_than, $max_age_less_than_or_equal, $max_age_not_equals, $max_age_specified, $min_age_equals, $min_age_greater_than, $min_age_greater_than_or_equal, $min_age_in, $min_age_less_than, $min_age_less_than_or_equal, $min_age_not_equals, $min_age_specified, $name_contains, $name_does_not_contain, $name_equals, $name_in, $name_not_equals, $name_specified, $number_type_id_equals, $number_type_id_greater_than, $number_type_id_greater_than_or_equal, $number_type_id_in, $number_type_id_less_than, $number_type_id_less_than_or_equal, $number_type_id_not_equals, $number_type_id_specified, $period_id_equals, $period_id_greater_than, $period_id_greater_than_or_equal, $period_id_in, $period_id_less_than, $period_id_less_than_or_equal, $period_id_not_equals, $period_id_specified, $product_id_equals, $product_id_greater_than, $product_id_greater_than_or_equal, $product_id_in, $product_id_less_than, $product_id_less_than_or_equal, $product_id_not_equals, $product_id_specified);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation countMembershipCriteriaUsingGETAsync
     *
     * countMembershipCriteria
     *
     * @param  string $gender_equals (optional)
     * @param  string[] $gender_in (optional)
     * @param  string $gender_not_equals (optional)
     * @param  bool $gender_specified (optional)
     * @param  int $id_equals (optional)
     * @param  int $id_greater_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int[] $id_in (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int $max_age_equals (optional)
     * @param  int $max_age_greater_than (optional)
     * @param  int $max_age_greater_than_or_equal (optional)
     * @param  int[] $max_age_in (optional)
     * @param  int $max_age_less_than (optional)
     * @param  int $max_age_less_than_or_equal (optional)
     * @param  int $max_age_not_equals (optional)
     * @param  bool $max_age_specified (optional)
     * @param  int $min_age_equals (optional)
     * @param  int $min_age_greater_than (optional)
     * @param  int $min_age_greater_than_or_equal (optional)
     * @param  int[] $min_age_in (optional)
     * @param  int $min_age_less_than (optional)
     * @param  int $min_age_less_than_or_equal (optional)
     * @param  int $min_age_not_equals (optional)
     * @param  bool $min_age_specified (optional)
     * @param  string $name_contains (optional)
     * @param  string $name_does_not_contain (optional)
     * @param  string $name_equals (optional)
     * @param  string[] $name_in (optional)
     * @param  string $name_not_equals (optional)
     * @param  bool $name_specified (optional)
     * @param  int $number_type_id_equals (optional)
     * @param  int $number_type_id_greater_than (optional)
     * @param  int $number_type_id_greater_than_or_equal (optional)
     * @param  int[] $number_type_id_in (optional)
     * @param  int $number_type_id_less_than (optional)
     * @param  int $number_type_id_less_than_or_equal (optional)
     * @param  int $number_type_id_not_equals (optional)
     * @param  bool $number_type_id_specified (optional)
     * @param  int $period_id_equals (optional)
     * @param  int $period_id_greater_than (optional)
     * @param  int $period_id_greater_than_or_equal (optional)
     * @param  int[] $period_id_in (optional)
     * @param  int $period_id_less_than (optional)
     * @param  int $period_id_less_than_or_equal (optional)
     * @param  int $period_id_not_equals (optional)
     * @param  bool $period_id_specified (optional)
     * @param  int $product_id_equals (optional)
     * @param  int $product_id_greater_than (optional)
     * @param  int $product_id_greater_than_or_equal (optional)
     * @param  int[] $product_id_in (optional)
     * @param  int $product_id_less_than (optional)
     * @param  int $product_id_less_than_or_equal (optional)
     * @param  int $product_id_not_equals (optional)
     * @param  bool $product_id_specified (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function countMembershipCriteriaUsingGETAsync($gender_equals = null, $gender_in = null, $gender_not_equals = null, $gender_specified = null, $id_equals = null, $id_greater_than = null, $id_greater_than_or_equal = null, $id_in = null, $id_less_than = null, $id_less_than_or_equal = null, $id_not_equals = null, $id_specified = null, $max_age_equals = null, $max_age_greater_than = null, $max_age_greater_than_or_equal = null, $max_age_in = null, $max_age_less_than = null, $max_age_less_than_or_equal = null, $max_age_not_equals = null, $max_age_specified = null, $min_age_equals = null, $min_age_greater_than = null, $min_age_greater_than_or_equal = null, $min_age_in = null, $min_age_less_than = null, $min_age_less_than_or_equal = null, $min_age_not_equals = null, $min_age_specified = null, $name_contains = null, $name_does_not_contain = null, $name_equals = null, $name_in = null, $name_not_equals = null, $name_specified = null, $number_type_id_equals = null, $number_type_id_greater_than = null, $number_type_id_greater_than_or_equal = null, $number_type_id_in = null, $number_type_id_less_than = null, $number_type_id_less_than_or_equal = null, $number_type_id_not_equals = null, $number_type_id_specified = null, $period_id_equals = null, $period_id_greater_than = null, $period_id_greater_than_or_equal = null, $period_id_in = null, $period_id_less_than = null, $period_id_less_than_or_equal = null, $period_id_not_equals = null, $period_id_specified = null, $product_id_equals = null, $product_id_greater_than = null, $product_id_greater_than_or_equal = null, $product_id_in = null, $product_id_less_than = null, $product_id_less_than_or_equal = null, $product_id_not_equals = null, $product_id_specified = null)
    {
        return $this->countMembershipCriteriaUsingGETAsyncWithHttpInfo($gender_equals, $gender_in, $gender_not_equals, $gender_specified, $id_equals, $id_greater_than, $id_greater_than_or_equal, $id_in, $id_less_than, $id_less_than_or_equal, $id_not_equals, $id_specified, $max_age_equals, $max_age_greater_than, $max_age_greater_than_or_equal, $max_age_in, $max_age_less_than, $max_age_less_than_or_equal, $max_age_not_equals, $max_age_specified, $min_age_equals, $min_age_greater_than, $min_age_greater_than_or_equal, $min_age_in, $min_age_less_than, $min_age_less_than_or_equal, $min_age_not_equals, $min_age_specified, $name_contains, $name_does_not_contain, $name_equals, $name_in, $name_not_equals, $name_specified, $number_type_id_equals, $number_type_id_greater_than, $number_type_id_greater_than_or_equal, $number_type_id_in, $number_type_id_less_than, $number_type_id_less_than_or_equal, $number_type_id_not_equals, $number_type_id_specified, $period_id_equals, $period_id_greater_than, $period_id_greater_than_or_equal, $period_id_in, $period_id_less_than, $period_id_less_than_or_equal, $period_id_not_equals, $period_id_specified, $product_id_equals, $product_id_greater_than, $product_id_greater_than_or_equal, $product_id_in, $product_id_less_than, $product_id_less_than_or_equal, $product_id_not_equals, $product_id_specified)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation countMembershipCriteriaUsingGETAsyncWithHttpInfo
     *
     * countMembershipCriteria
     *
     * @param  string $gender_equals (optional)
     * @param  string[] $gender_in (optional)
     * @param  string $gender_not_equals (optional)
     * @param  bool $gender_specified (optional)
     * @param  int $id_equals (optional)
     * @param  int $id_greater_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int[] $id_in (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int $max_age_equals (optional)
     * @param  int $max_age_greater_than (optional)
     * @param  int $max_age_greater_than_or_equal (optional)
     * @param  int[] $max_age_in (optional)
     * @param  int $max_age_less_than (optional)
     * @param  int $max_age_less_than_or_equal (optional)
     * @param  int $max_age_not_equals (optional)
     * @param  bool $max_age_specified (optional)
     * @param  int $min_age_equals (optional)
     * @param  int $min_age_greater_than (optional)
     * @param  int $min_age_greater_than_or_equal (optional)
     * @param  int[] $min_age_in (optional)
     * @param  int $min_age_less_than (optional)
     * @param  int $min_age_less_than_or_equal (optional)
     * @param  int $min_age_not_equals (optional)
     * @param  bool $min_age_specified (optional)
     * @param  string $name_contains (optional)
     * @param  string $name_does_not_contain (optional)
     * @param  string $name_equals (optional)
     * @param  string[] $name_in (optional)
     * @param  string $name_not_equals (optional)
     * @param  bool $name_specified (optional)
     * @param  int $number_type_id_equals (optional)
     * @param  int $number_type_id_greater_than (optional)
     * @param  int $number_type_id_greater_than_or_equal (optional)
     * @param  int[] $number_type_id_in (optional)
     * @param  int $number_type_id_less_than (optional)
     * @param  int $number_type_id_less_than_or_equal (optional)
     * @param  int $number_type_id_not_equals (optional)
     * @param  bool $number_type_id_specified (optional)
     * @param  int $period_id_equals (optional)
     * @param  int $period_id_greater_than (optional)
     * @param  int $period_id_greater_than_or_equal (optional)
     * @param  int[] $period_id_in (optional)
     * @param  int $period_id_less_than (optional)
     * @param  int $period_id_less_than_or_equal (optional)
     * @param  int $period_id_not_equals (optional)
     * @param  bool $period_id_specified (optional)
     * @param  int $product_id_equals (optional)
     * @param  int $product_id_greater_than (optional)
     * @param  int $product_id_greater_than_or_equal (optional)
     * @param  int[] $product_id_in (optional)
     * @param  int $product_id_less_than (optional)
     * @param  int $product_id_less_than_or_equal (optional)
     * @param  int $product_id_not_equals (optional)
     * @param  bool $product_id_specified (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function countMembershipCriteriaUsingGETAsyncWithHttpInfo($gender_equals = null, $gender_in = null, $gender_not_equals = null, $gender_specified = null, $id_equals = null, $id_greater_than = null, $id_greater_than_or_equal = null, $id_in = null, $id_less_than = null, $id_less_than_or_equal = null, $id_not_equals = null, $id_specified = null, $max_age_equals = null, $max_age_greater_than = null, $max_age_greater_than_or_equal = null, $max_age_in = null, $max_age_less_than = null, $max_age_less_than_or_equal = null, $max_age_not_equals = null, $max_age_specified = null, $min_age_equals = null, $min_age_greater_than = null, $min_age_greater_than_or_equal = null, $min_age_in = null, $min_age_less_than = null, $min_age_less_than_or_equal = null, $min_age_not_equals = null, $min_age_specified = null, $name_contains = null, $name_does_not_contain = null, $name_equals = null, $name_in = null, $name_not_equals = null, $name_specified = null, $number_type_id_equals = null, $number_type_id_greater_than = null, $number_type_id_greater_than_or_equal = null, $number_type_id_in = null, $number_type_id_less_than = null, $number_type_id_less_than_or_equal = null, $number_type_id_not_equals = null, $number_type_id_specified = null, $period_id_equals = null, $period_id_greater_than = null, $period_id_greater_than_or_equal = null, $period_id_in = null, $period_id_less_than = null, $period_id_less_than_or_equal = null, $period_id_not_equals = null, $period_id_specified = null, $product_id_equals = null, $product_id_greater_than = null, $product_id_greater_than_or_equal = null, $product_id_in = null, $product_id_less_than = null, $product_id_less_than_or_equal = null, $product_id_not_equals = null, $product_id_specified = null)
    {
        $returnType = 'int';
        $request = $this->countMembershipCriteriaUsingGETRequest($gender_equals, $gender_in, $gender_not_equals, $gender_specified, $id_equals, $id_greater_than, $id_greater_than_or_equal, $id_in, $id_less_than, $id_less_than_or_equal, $id_not_equals, $id_specified, $max_age_equals, $max_age_greater_than, $max_age_greater_than_or_equal, $max_age_in, $max_age_less_than, $max_age_less_than_or_equal, $max_age_not_equals, $max_age_specified, $min_age_equals, $min_age_greater_than, $min_age_greater_than_or_equal, $min_age_in, $min_age_less_than, $min_age_less_than_or_equal, $min_age_not_equals, $min_age_specified, $name_contains, $name_does_not_contain, $name_equals, $name_in, $name_not_equals, $name_specified, $number_type_id_equals, $number_type_id_greater_than, $number_type_id_greater_than_or_equal, $number_type_id_in, $number_type_id_less_than, $number_type_id_less_than_or_equal, $number_type_id_not_equals, $number_type_id_specified, $period_id_equals, $period_id_greater_than, $period_id_greater_than_or_equal, $period_id_in, $period_id_less_than, $period_id_less_than_or_equal, $period_id_not_equals, $period_id_specified, $product_id_equals, $product_id_greater_than, $product_id_greater_than_or_equal, $product_id_in, $product_id_less_than, $product_id_less_than_or_equal, $product_id_not_equals, $product_id_specified);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'countMembershipCriteriaUsingGET'
     *
     * @param  string $gender_equals (optional)
     * @param  string[] $gender_in (optional)
     * @param  string $gender_not_equals (optional)
     * @param  bool $gender_specified (optional)
     * @param  int $id_equals (optional)
     * @param  int $id_greater_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int[] $id_in (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int $max_age_equals (optional)
     * @param  int $max_age_greater_than (optional)
     * @param  int $max_age_greater_than_or_equal (optional)
     * @param  int[] $max_age_in (optional)
     * @param  int $max_age_less_than (optional)
     * @param  int $max_age_less_than_or_equal (optional)
     * @param  int $max_age_not_equals (optional)
     * @param  bool $max_age_specified (optional)
     * @param  int $min_age_equals (optional)
     * @param  int $min_age_greater_than (optional)
     * @param  int $min_age_greater_than_or_equal (optional)
     * @param  int[] $min_age_in (optional)
     * @param  int $min_age_less_than (optional)
     * @param  int $min_age_less_than_or_equal (optional)
     * @param  int $min_age_not_equals (optional)
     * @param  bool $min_age_specified (optional)
     * @param  string $name_contains (optional)
     * @param  string $name_does_not_contain (optional)
     * @param  string $name_equals (optional)
     * @param  string[] $name_in (optional)
     * @param  string $name_not_equals (optional)
     * @param  bool $name_specified (optional)
     * @param  int $number_type_id_equals (optional)
     * @param  int $number_type_id_greater_than (optional)
     * @param  int $number_type_id_greater_than_or_equal (optional)
     * @param  int[] $number_type_id_in (optional)
     * @param  int $number_type_id_less_than (optional)
     * @param  int $number_type_id_less_than_or_equal (optional)
     * @param  int $number_type_id_not_equals (optional)
     * @param  bool $number_type_id_specified (optional)
     * @param  int $period_id_equals (optional)
     * @param  int $period_id_greater_than (optional)
     * @param  int $period_id_greater_than_or_equal (optional)
     * @param  int[] $period_id_in (optional)
     * @param  int $period_id_less_than (optional)
     * @param  int $period_id_less_than_or_equal (optional)
     * @param  int $period_id_not_equals (optional)
     * @param  bool $period_id_specified (optional)
     * @param  int $product_id_equals (optional)
     * @param  int $product_id_greater_than (optional)
     * @param  int $product_id_greater_than_or_equal (optional)
     * @param  int[] $product_id_in (optional)
     * @param  int $product_id_less_than (optional)
     * @param  int $product_id_less_than_or_equal (optional)
     * @param  int $product_id_not_equals (optional)
     * @param  bool $product_id_specified (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function countMembershipCriteriaUsingGETRequest($gender_equals = null, $gender_in = null, $gender_not_equals = null, $gender_specified = null, $id_equals = null, $id_greater_than = null, $id_greater_than_or_equal = null, $id_in = null, $id_less_than = null, $id_less_than_or_equal = null, $id_not_equals = null, $id_specified = null, $max_age_equals = null, $max_age_greater_than = null, $max_age_greater_than_or_equal = null, $max_age_in = null, $max_age_less_than = null, $max_age_less_than_or_equal = null, $max_age_not_equals = null, $max_age_specified = null, $min_age_equals = null, $min_age_greater_than = null, $min_age_greater_than_or_equal = null, $min_age_in = null, $min_age_less_than = null, $min_age_less_than_or_equal = null, $min_age_not_equals = null, $min_age_specified = null, $name_contains = null, $name_does_not_contain = null, $name_equals = null, $name_in = null, $name_not_equals = null, $name_specified = null, $number_type_id_equals = null, $number_type_id_greater_than = null, $number_type_id_greater_than_or_equal = null, $number_type_id_in = null, $number_type_id_less_than = null, $number_type_id_less_than_or_equal = null, $number_type_id_not_equals = null, $number_type_id_specified = null, $period_id_equals = null, $period_id_greater_than = null, $period_id_greater_than_or_equal = null, $period_id_in = null, $period_id_less_than = null, $period_id_less_than_or_equal = null, $period_id_not_equals = null, $period_id_specified = null, $product_id_equals = null, $product_id_greater_than = null, $product_id_greater_than_or_equal = null, $product_id_in = null, $product_id_less_than = null, $product_id_less_than_or_equal = null, $product_id_not_equals = null, $product_id_specified = null)
    {

        $resourcePath = '/api/membership-criteria/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($gender_equals !== null) {
            $queryParams['gender.equals'] = ObjectSerializer::toQueryValue($gender_equals);
        }
        // query params
        if (is_array($gender_in)) {
            $queryParams['gender.in'] = $gender_in;
        } else
        if ($gender_in !== null) {
            $queryParams['gender.in'] = ObjectSerializer::toQueryValue($gender_in);
        }
        // query params
        if ($gender_not_equals !== null) {
            $queryParams['gender.notEquals'] = ObjectSerializer::toQueryValue($gender_not_equals);
        }
        // query params
        if ($gender_specified !== null) {
            $queryParams['gender.specified'] = ObjectSerializer::toQueryValue($gender_specified);
        }
        // query params
        if ($id_equals !== null) {
            $queryParams['id.equals'] = ObjectSerializer::toQueryValue($id_equals);
        }
        // query params
        if ($id_greater_than !== null) {
            $queryParams['id.greaterThan'] = ObjectSerializer::toQueryValue($id_greater_than);
        }
        // query params
        if ($id_greater_than_or_equal !== null) {
            $queryParams['id.greaterThanOrEqual'] = ObjectSerializer::toQueryValue($id_greater_than_or_equal);
        }
        // query params
        if (is_array($id_in)) {
            $queryParams['id.in'] = $id_in;
        } else
        if ($id_in !== null) {
            $queryParams['id.in'] = ObjectSerializer::toQueryValue($id_in);
        }
        // query params
        if ($id_less_than !== null) {
            $queryParams['id.lessThan'] = ObjectSerializer::toQueryValue($id_less_than);
        }
        // query params
        if ($id_less_than_or_equal !== null) {
            $queryParams['id.lessThanOrEqual'] = ObjectSerializer::toQueryValue($id_less_than_or_equal);
        }
        // query params
        if ($id_not_equals !== null) {
            $queryParams['id.notEquals'] = ObjectSerializer::toQueryValue($id_not_equals);
        }
        // query params
        if ($id_specified !== null) {
            $queryParams['id.specified'] = ObjectSerializer::toQueryValue($id_specified);
        }
        // query params
        if ($max_age_equals !== null) {
            $queryParams['maxAge.equals'] = ObjectSerializer::toQueryValue($max_age_equals);
        }
        // query params
        if ($max_age_greater_than !== null) {
            $queryParams['maxAge.greaterThan'] = ObjectSerializer::toQueryValue($max_age_greater_than);
        }
        // query params
        if ($max_age_greater_than_or_equal !== null) {
            $queryParams['maxAge.greaterThanOrEqual'] = ObjectSerializer::toQueryValue($max_age_greater_than_or_equal);
        }
        // query params
        if (is_array($max_age_in)) {
            $queryParams['maxAge.in'] = $max_age_in;
        } else
        if ($max_age_in !== null) {
            $queryParams['maxAge.in'] = ObjectSerializer::toQueryValue($max_age_in);
        }
        // query params
        if ($max_age_less_than !== null) {
            $queryParams['maxAge.lessThan'] = ObjectSerializer::toQueryValue($max_age_less_than);
        }
        // query params
        if ($max_age_less_than_or_equal !== null) {
            $queryParams['maxAge.lessThanOrEqual'] = ObjectSerializer::toQueryValue($max_age_less_than_or_equal);
        }
        // query params
        if ($max_age_not_equals !== null) {
            $queryParams['maxAge.notEquals'] = ObjectSerializer::toQueryValue($max_age_not_equals);
        }
        // query params
        if ($max_age_specified !== null) {
            $queryParams['maxAge.specified'] = ObjectSerializer::toQueryValue($max_age_specified);
        }
        // query params
        if ($min_age_equals !== null) {
            $queryParams['minAge.equals'] = ObjectSerializer::toQueryValue($min_age_equals);
        }
        // query params
        if ($min_age_greater_than !== null) {
            $queryParams['minAge.greaterThan'] = ObjectSerializer::toQueryValue($min_age_greater_than);
        }
        // query params
        if ($min_age_greater_than_or_equal !== null) {
            $queryParams['minAge.greaterThanOrEqual'] = ObjectSerializer::toQueryValue($min_age_greater_than_or_equal);
        }
        // query params
        if (is_array($min_age_in)) {
            $queryParams['minAge.in'] = $min_age_in;
        } else
        if ($min_age_in !== null) {
            $queryParams['minAge.in'] = ObjectSerializer::toQueryValue($min_age_in);
        }
        // query params
        if ($min_age_less_than !== null) {
            $queryParams['minAge.lessThan'] = ObjectSerializer::toQueryValue($min_age_less_than);
        }
        // query params
        if ($min_age_less_than_or_equal !== null) {
            $queryParams['minAge.lessThanOrEqual'] = ObjectSerializer::toQueryValue($min_age_less_than_or_equal);
        }
        // query params
        if ($min_age_not_equals !== null) {
            $queryParams['minAge.notEquals'] = ObjectSerializer::toQueryValue($min_age_not_equals);
        }
        // query params
        if ($min_age_specified !== null) {
            $queryParams['minAge.specified'] = ObjectSerializer::toQueryValue($min_age_specified);
        }
        // query params
        if ($name_contains !== null) {
            $queryParams['name.contains'] = ObjectSerializer::toQueryValue($name_contains);
        }
        // query params
        if ($name_does_not_contain !== null) {
            $queryParams['name.doesNotContain'] = ObjectSerializer::toQueryValue($name_does_not_contain);
        }
        // query params
        if ($name_equals !== null) {
            $queryParams['name.equals'] = ObjectSerializer::toQueryValue($name_equals);
        }
        // query params
        if (is_array($name_in)) {
            $queryParams['name.in'] = $name_in;
        } else
        if ($name_in !== null) {
            $queryParams['name.in'] = ObjectSerializer::toQueryValue($name_in);
        }
        // query params
        if ($name_not_equals !== null) {
            $queryParams['name.notEquals'] = ObjectSerializer::toQueryValue($name_not_equals);
        }
        // query params
        if ($name_specified !== null) {
            $queryParams['name.specified'] = ObjectSerializer::toQueryValue($name_specified);
        }
        // query params
        if ($number_type_id_equals !== null) {
            $queryParams['numberTypeId.equals'] = ObjectSerializer::toQueryValue($number_type_id_equals);
        }
        // query params
        if ($number_type_id_greater_than !== null) {
            $queryParams['numberTypeId.greaterThan'] = ObjectSerializer::toQueryValue($number_type_id_greater_than);
        }
        // query params
        if ($number_type_id_greater_than_or_equal !== null) {
            $queryParams['numberTypeId.greaterThanOrEqual'] = ObjectSerializer::toQueryValue($number_type_id_greater_than_or_equal);
        }
        // query params
        if (is_array($number_type_id_in)) {
            $queryParams['numberTypeId.in'] = $number_type_id_in;
        } else
        if ($number_type_id_in !== null) {
            $queryParams['numberTypeId.in'] = ObjectSerializer::toQueryValue($number_type_id_in);
        }
        // query params
        if ($number_type_id_less_than !== null) {
            $queryParams['numberTypeId.lessThan'] = ObjectSerializer::toQueryValue($number_type_id_less_than);
        }
        // query params
        if ($number_type_id_less_than_or_equal !== null) {
            $queryParams['numberTypeId.lessThanOrEqual'] = ObjectSerializer::toQueryValue($number_type_id_less_than_or_equal);
        }
        // query params
        if ($number_type_id_not_equals !== null) {
            $queryParams['numberTypeId.notEquals'] = ObjectSerializer::toQueryValue($number_type_id_not_equals);
        }
        // query params
        if ($number_type_id_specified !== null) {
            $queryParams['numberTypeId.specified'] = ObjectSerializer::toQueryValue($number_type_id_specified);
        }
        // query params
        if ($period_id_equals !== null) {
            $queryParams['periodId.equals'] = ObjectSerializer::toQueryValue($period_id_equals);
        }
        // query params
        if ($period_id_greater_than !== null) {
            $queryParams['periodId.greaterThan'] = ObjectSerializer::toQueryValue($period_id_greater_than);
        }
        // query params
        if ($period_id_greater_than_or_equal !== null) {
            $queryParams['periodId.greaterThanOrEqual'] = ObjectSerializer::toQueryValue($period_id_greater_than_or_equal);
        }
        // query params
        if (is_array($period_id_in)) {
            $queryParams['periodId.in'] = $period_id_in;
        } else
        if ($period_id_in !== null) {
            $queryParams['periodId.in'] = ObjectSerializer::toQueryValue($period_id_in);
        }
        // query params
        if ($period_id_less_than !== null) {
            $queryParams['periodId.lessThan'] = ObjectSerializer::toQueryValue($period_id_less_than);
        }
        // query params
        if ($period_id_less_than_or_equal !== null) {
            $queryParams['periodId.lessThanOrEqual'] = ObjectSerializer::toQueryValue($period_id_less_than_or_equal);
        }
        // query params
        if ($period_id_not_equals !== null) {
            $queryParams['periodId.notEquals'] = ObjectSerializer::toQueryValue($period_id_not_equals);
        }
        // query params
        if ($period_id_specified !== null) {
            $queryParams['periodId.specified'] = ObjectSerializer::toQueryValue($period_id_specified);
        }
        // query params
        if ($product_id_equals !== null) {
            $queryParams['productId.equals'] = ObjectSerializer::toQueryValue($product_id_equals);
        }
        // query params
        if ($product_id_greater_than !== null) {
            $queryParams['productId.greaterThan'] = ObjectSerializer::toQueryValue($product_id_greater_than);
        }
        // query params
        if ($product_id_greater_than_or_equal !== null) {
            $queryParams['productId.greaterThanOrEqual'] = ObjectSerializer::toQueryValue($product_id_greater_than_or_equal);
        }
        // query params
        if (is_array($product_id_in)) {
            $queryParams['productId.in'] = $product_id_in;
        } else
        if ($product_id_in !== null) {
            $queryParams['productId.in'] = ObjectSerializer::toQueryValue($product_id_in);
        }
        // query params
        if ($product_id_less_than !== null) {
            $queryParams['productId.lessThan'] = ObjectSerializer::toQueryValue($product_id_less_than);
        }
        // query params
        if ($product_id_less_than_or_equal !== null) {
            $queryParams['productId.lessThanOrEqual'] = ObjectSerializer::toQueryValue($product_id_less_than_or_equal);
        }
        // query params
        if ($product_id_not_equals !== null) {
            $queryParams['productId.notEquals'] = ObjectSerializer::toQueryValue($product_id_not_equals);
        }
        // query params
        if ($product_id_specified !== null) {
            $queryParams['productId.specified'] = ObjectSerializer::toQueryValue($product_id_specified);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createMembershipCriteriaUsingPOST
     *
     * createMembershipCriteria
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO $membership_criteria_dto membershipCriteriaDTO (required)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO
     */
    public function createMembershipCriteriaUsingPOST($membership_criteria_dto)
    {
        list($response) = $this->createMembershipCriteriaUsingPOSTWithHttpInfo($membership_criteria_dto);
        return $response;
    }

    /**
     * Operation createMembershipCriteriaUsingPOSTWithHttpInfo
     *
     * createMembershipCriteria
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO $membership_criteria_dto membershipCriteriaDTO (required)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createMembershipCriteriaUsingPOSTWithHttpInfo($membership_criteria_dto)
    {
        $returnType = '\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO';
        $request = $this->createMembershipCriteriaUsingPOSTRequest($membership_criteria_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createMembershipCriteriaUsingPOSTAsync
     *
     * createMembershipCriteria
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO $membership_criteria_dto membershipCriteriaDTO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMembershipCriteriaUsingPOSTAsync($membership_criteria_dto)
    {
        return $this->createMembershipCriteriaUsingPOSTAsyncWithHttpInfo($membership_criteria_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createMembershipCriteriaUsingPOSTAsyncWithHttpInfo
     *
     * createMembershipCriteria
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO $membership_criteria_dto membershipCriteriaDTO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMembershipCriteriaUsingPOSTAsyncWithHttpInfo($membership_criteria_dto)
    {
        $returnType = '\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO';
        $request = $this->createMembershipCriteriaUsingPOSTRequest($membership_criteria_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createMembershipCriteriaUsingPOST'
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO $membership_criteria_dto membershipCriteriaDTO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createMembershipCriteriaUsingPOSTRequest($membership_criteria_dto)
    {
        // verify the required parameter 'membership_criteria_dto' is set
        if ($membership_criteria_dto === null || (is_array($membership_criteria_dto) && count($membership_criteria_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $membership_criteria_dto when calling createMembershipCriteriaUsingPOST'
            );
        }

        $resourcePath = '/api/membership-criteria';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($membership_criteria_dto)) {
            $_tempBody = $membership_criteria_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteMembershipCriteriaUsingDELETE
     *
     * deleteMembershipCriteria
     *
     * @param  int $id id (required)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteMembershipCriteriaUsingDELETE($id)
    {
        $this->deleteMembershipCriteriaUsingDELETEWithHttpInfo($id);
    }

    /**
     * Operation deleteMembershipCriteriaUsingDELETEWithHttpInfo
     *
     * deleteMembershipCriteria
     *
     * @param  int $id id (required)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteMembershipCriteriaUsingDELETEWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteMembershipCriteriaUsingDELETERequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteMembershipCriteriaUsingDELETEAsync
     *
     * deleteMembershipCriteria
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMembershipCriteriaUsingDELETEAsync($id)
    {
        return $this->deleteMembershipCriteriaUsingDELETEAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteMembershipCriteriaUsingDELETEAsyncWithHttpInfo
     *
     * deleteMembershipCriteria
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMembershipCriteriaUsingDELETEAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteMembershipCriteriaUsingDELETERequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteMembershipCriteriaUsingDELETE'
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteMembershipCriteriaUsingDELETERequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteMembershipCriteriaUsingDELETE'
            );
        }

        $resourcePath = '/api/membership-criteria/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllMembershipCriteriaUsingGET
     *
     * getAllMembershipCriteria
     *
     * @param  string $gender_equals gender_equals (optional)
     * @param  string[] $gender_in gender_in (optional)
     * @param  string $gender_not_equals gender_not_equals (optional)
     * @param  bool $gender_specified gender_specified (optional)
     * @param  int $id_equals id_equals (optional)
     * @param  int $id_greater_than id_greater_than (optional)
     * @param  int $id_greater_than_or_equal id_greater_than_or_equal (optional)
     * @param  int[] $id_in id_in (optional)
     * @param  int $id_less_than id_less_than (optional)
     * @param  int $id_less_than_or_equal id_less_than_or_equal (optional)
     * @param  int $id_not_equals id_not_equals (optional)
     * @param  bool $id_specified id_specified (optional)
     * @param  int $max_age_equals max_age_equals (optional)
     * @param  int $max_age_greater_than max_age_greater_than (optional)
     * @param  int $max_age_greater_than_or_equal max_age_greater_than_or_equal (optional)
     * @param  int[] $max_age_in max_age_in (optional)
     * @param  int $max_age_less_than max_age_less_than (optional)
     * @param  int $max_age_less_than_or_equal max_age_less_than_or_equal (optional)
     * @param  int $max_age_not_equals max_age_not_equals (optional)
     * @param  bool $max_age_specified max_age_specified (optional)
     * @param  int $min_age_equals min_age_equals (optional)
     * @param  int $min_age_greater_than min_age_greater_than (optional)
     * @param  int $min_age_greater_than_or_equal min_age_greater_than_or_equal (optional)
     * @param  int[] $min_age_in min_age_in (optional)
     * @param  int $min_age_less_than min_age_less_than (optional)
     * @param  int $min_age_less_than_or_equal min_age_less_than_or_equal (optional)
     * @param  int $min_age_not_equals min_age_not_equals (optional)
     * @param  bool $min_age_specified min_age_specified (optional)
     * @param  string $name_contains name_contains (optional)
     * @param  string $name_does_not_contain name_does_not_contain (optional)
     * @param  string $name_equals name_equals (optional)
     * @param  string[] $name_in name_in (optional)
     * @param  string $name_not_equals name_not_equals (optional)
     * @param  bool $name_specified name_specified (optional)
     * @param  int $number_type_id_equals number_type_id_equals (optional)
     * @param  int $number_type_id_greater_than number_type_id_greater_than (optional)
     * @param  int $number_type_id_greater_than_or_equal number_type_id_greater_than_or_equal (optional)
     * @param  int[] $number_type_id_in number_type_id_in (optional)
     * @param  int $number_type_id_less_than number_type_id_less_than (optional)
     * @param  int $number_type_id_less_than_or_equal number_type_id_less_than_or_equal (optional)
     * @param  int $number_type_id_not_equals number_type_id_not_equals (optional)
     * @param  bool $number_type_id_specified number_type_id_specified (optional)
     * @param  int $page Page number of the requested page (optional)
     * @param  int $period_id_equals period_id_equals (optional)
     * @param  int $period_id_greater_than period_id_greater_than (optional)
     * @param  int $period_id_greater_than_or_equal period_id_greater_than_or_equal (optional)
     * @param  int[] $period_id_in period_id_in (optional)
     * @param  int $period_id_less_than period_id_less_than (optional)
     * @param  int $period_id_less_than_or_equal period_id_less_than_or_equal (optional)
     * @param  int $period_id_not_equals period_id_not_equals (optional)
     * @param  bool $period_id_specified period_id_specified (optional)
     * @param  int $product_id_equals product_id_equals (optional)
     * @param  int $product_id_greater_than product_id_greater_than (optional)
     * @param  int $product_id_greater_than_or_equal product_id_greater_than_or_equal (optional)
     * @param  int[] $product_id_in product_id_in (optional)
     * @param  int $product_id_less_than product_id_less_than (optional)
     * @param  int $product_id_less_than_or_equal product_id_less_than_or_equal (optional)
     * @param  int $product_id_not_equals product_id_not_equals (optional)
     * @param  bool $product_id_specified product_id_specified (optional)
     * @param  int $size Size of a page (optional)
     * @param  string[] $sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO[]
     */
    public function getAllMembershipCriteriaUsingGET($gender_equals = null, $gender_in = null, $gender_not_equals = null, $gender_specified = null, $id_equals = null, $id_greater_than = null, $id_greater_than_or_equal = null, $id_in = null, $id_less_than = null, $id_less_than_or_equal = null, $id_not_equals = null, $id_specified = null, $max_age_equals = null, $max_age_greater_than = null, $max_age_greater_than_or_equal = null, $max_age_in = null, $max_age_less_than = null, $max_age_less_than_or_equal = null, $max_age_not_equals = null, $max_age_specified = null, $min_age_equals = null, $min_age_greater_than = null, $min_age_greater_than_or_equal = null, $min_age_in = null, $min_age_less_than = null, $min_age_less_than_or_equal = null, $min_age_not_equals = null, $min_age_specified = null, $name_contains = null, $name_does_not_contain = null, $name_equals = null, $name_in = null, $name_not_equals = null, $name_specified = null, $number_type_id_equals = null, $number_type_id_greater_than = null, $number_type_id_greater_than_or_equal = null, $number_type_id_in = null, $number_type_id_less_than = null, $number_type_id_less_than_or_equal = null, $number_type_id_not_equals = null, $number_type_id_specified = null, $page = null, $period_id_equals = null, $period_id_greater_than = null, $period_id_greater_than_or_equal = null, $period_id_in = null, $period_id_less_than = null, $period_id_less_than_or_equal = null, $period_id_not_equals = null, $period_id_specified = null, $product_id_equals = null, $product_id_greater_than = null, $product_id_greater_than_or_equal = null, $product_id_in = null, $product_id_less_than = null, $product_id_less_than_or_equal = null, $product_id_not_equals = null, $product_id_specified = null, $size = null, $sort = null)
    {
        list($response) = $this->getAllMembershipCriteriaUsingGETWithHttpInfo($gender_equals, $gender_in, $gender_not_equals, $gender_specified, $id_equals, $id_greater_than, $id_greater_than_or_equal, $id_in, $id_less_than, $id_less_than_or_equal, $id_not_equals, $id_specified, $max_age_equals, $max_age_greater_than, $max_age_greater_than_or_equal, $max_age_in, $max_age_less_than, $max_age_less_than_or_equal, $max_age_not_equals, $max_age_specified, $min_age_equals, $min_age_greater_than, $min_age_greater_than_or_equal, $min_age_in, $min_age_less_than, $min_age_less_than_or_equal, $min_age_not_equals, $min_age_specified, $name_contains, $name_does_not_contain, $name_equals, $name_in, $name_not_equals, $name_specified, $number_type_id_equals, $number_type_id_greater_than, $number_type_id_greater_than_or_equal, $number_type_id_in, $number_type_id_less_than, $number_type_id_less_than_or_equal, $number_type_id_not_equals, $number_type_id_specified, $page, $period_id_equals, $period_id_greater_than, $period_id_greater_than_or_equal, $period_id_in, $period_id_less_than, $period_id_less_than_or_equal, $period_id_not_equals, $period_id_specified, $product_id_equals, $product_id_greater_than, $product_id_greater_than_or_equal, $product_id_in, $product_id_less_than, $product_id_less_than_or_equal, $product_id_not_equals, $product_id_specified, $size, $sort);
        return $response;
    }

    /**
     * Operation getAllMembershipCriteriaUsingGETWithHttpInfo
     *
     * getAllMembershipCriteria
     *
     * @param  string $gender_equals (optional)
     * @param  string[] $gender_in (optional)
     * @param  string $gender_not_equals (optional)
     * @param  bool $gender_specified (optional)
     * @param  int $id_equals (optional)
     * @param  int $id_greater_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int[] $id_in (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int $max_age_equals (optional)
     * @param  int $max_age_greater_than (optional)
     * @param  int $max_age_greater_than_or_equal (optional)
     * @param  int[] $max_age_in (optional)
     * @param  int $max_age_less_than (optional)
     * @param  int $max_age_less_than_or_equal (optional)
     * @param  int $max_age_not_equals (optional)
     * @param  bool $max_age_specified (optional)
     * @param  int $min_age_equals (optional)
     * @param  int $min_age_greater_than (optional)
     * @param  int $min_age_greater_than_or_equal (optional)
     * @param  int[] $min_age_in (optional)
     * @param  int $min_age_less_than (optional)
     * @param  int $min_age_less_than_or_equal (optional)
     * @param  int $min_age_not_equals (optional)
     * @param  bool $min_age_specified (optional)
     * @param  string $name_contains (optional)
     * @param  string $name_does_not_contain (optional)
     * @param  string $name_equals (optional)
     * @param  string[] $name_in (optional)
     * @param  string $name_not_equals (optional)
     * @param  bool $name_specified (optional)
     * @param  int $number_type_id_equals (optional)
     * @param  int $number_type_id_greater_than (optional)
     * @param  int $number_type_id_greater_than_or_equal (optional)
     * @param  int[] $number_type_id_in (optional)
     * @param  int $number_type_id_less_than (optional)
     * @param  int $number_type_id_less_than_or_equal (optional)
     * @param  int $number_type_id_not_equals (optional)
     * @param  bool $number_type_id_specified (optional)
     * @param  int $page Page number of the requested page (optional)
     * @param  int $period_id_equals (optional)
     * @param  int $period_id_greater_than (optional)
     * @param  int $period_id_greater_than_or_equal (optional)
     * @param  int[] $period_id_in (optional)
     * @param  int $period_id_less_than (optional)
     * @param  int $period_id_less_than_or_equal (optional)
     * @param  int $period_id_not_equals (optional)
     * @param  bool $period_id_specified (optional)
     * @param  int $product_id_equals (optional)
     * @param  int $product_id_greater_than (optional)
     * @param  int $product_id_greater_than_or_equal (optional)
     * @param  int[] $product_id_in (optional)
     * @param  int $product_id_less_than (optional)
     * @param  int $product_id_less_than_or_equal (optional)
     * @param  int $product_id_not_equals (optional)
     * @param  bool $product_id_specified (optional)
     * @param  int $size Size of a page (optional)
     * @param  string[] $sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllMembershipCriteriaUsingGETWithHttpInfo($gender_equals = null, $gender_in = null, $gender_not_equals = null, $gender_specified = null, $id_equals = null, $id_greater_than = null, $id_greater_than_or_equal = null, $id_in = null, $id_less_than = null, $id_less_than_or_equal = null, $id_not_equals = null, $id_specified = null, $max_age_equals = null, $max_age_greater_than = null, $max_age_greater_than_or_equal = null, $max_age_in = null, $max_age_less_than = null, $max_age_less_than_or_equal = null, $max_age_not_equals = null, $max_age_specified = null, $min_age_equals = null, $min_age_greater_than = null, $min_age_greater_than_or_equal = null, $min_age_in = null, $min_age_less_than = null, $min_age_less_than_or_equal = null, $min_age_not_equals = null, $min_age_specified = null, $name_contains = null, $name_does_not_contain = null, $name_equals = null, $name_in = null, $name_not_equals = null, $name_specified = null, $number_type_id_equals = null, $number_type_id_greater_than = null, $number_type_id_greater_than_or_equal = null, $number_type_id_in = null, $number_type_id_less_than = null, $number_type_id_less_than_or_equal = null, $number_type_id_not_equals = null, $number_type_id_specified = null, $page = null, $period_id_equals = null, $period_id_greater_than = null, $period_id_greater_than_or_equal = null, $period_id_in = null, $period_id_less_than = null, $period_id_less_than_or_equal = null, $period_id_not_equals = null, $period_id_specified = null, $product_id_equals = null, $product_id_greater_than = null, $product_id_greater_than_or_equal = null, $product_id_in = null, $product_id_less_than = null, $product_id_less_than_or_equal = null, $product_id_not_equals = null, $product_id_specified = null, $size = null, $sort = null)
    {
        $returnType = '\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO[]';
        $request = $this->getAllMembershipCriteriaUsingGETRequest($gender_equals, $gender_in, $gender_not_equals, $gender_specified, $id_equals, $id_greater_than, $id_greater_than_or_equal, $id_in, $id_less_than, $id_less_than_or_equal, $id_not_equals, $id_specified, $max_age_equals, $max_age_greater_than, $max_age_greater_than_or_equal, $max_age_in, $max_age_less_than, $max_age_less_than_or_equal, $max_age_not_equals, $max_age_specified, $min_age_equals, $min_age_greater_than, $min_age_greater_than_or_equal, $min_age_in, $min_age_less_than, $min_age_less_than_or_equal, $min_age_not_equals, $min_age_specified, $name_contains, $name_does_not_contain, $name_equals, $name_in, $name_not_equals, $name_specified, $number_type_id_equals, $number_type_id_greater_than, $number_type_id_greater_than_or_equal, $number_type_id_in, $number_type_id_less_than, $number_type_id_less_than_or_equal, $number_type_id_not_equals, $number_type_id_specified, $page, $period_id_equals, $period_id_greater_than, $period_id_greater_than_or_equal, $period_id_in, $period_id_less_than, $period_id_less_than_or_equal, $period_id_not_equals, $period_id_specified, $product_id_equals, $product_id_greater_than, $product_id_greater_than_or_equal, $product_id_in, $product_id_less_than, $product_id_less_than_or_equal, $product_id_not_equals, $product_id_specified, $size, $sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllMembershipCriteriaUsingGETAsync
     *
     * getAllMembershipCriteria
     *
     * @param  string $gender_equals (optional)
     * @param  string[] $gender_in (optional)
     * @param  string $gender_not_equals (optional)
     * @param  bool $gender_specified (optional)
     * @param  int $id_equals (optional)
     * @param  int $id_greater_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int[] $id_in (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int $max_age_equals (optional)
     * @param  int $max_age_greater_than (optional)
     * @param  int $max_age_greater_than_or_equal (optional)
     * @param  int[] $max_age_in (optional)
     * @param  int $max_age_less_than (optional)
     * @param  int $max_age_less_than_or_equal (optional)
     * @param  int $max_age_not_equals (optional)
     * @param  bool $max_age_specified (optional)
     * @param  int $min_age_equals (optional)
     * @param  int $min_age_greater_than (optional)
     * @param  int $min_age_greater_than_or_equal (optional)
     * @param  int[] $min_age_in (optional)
     * @param  int $min_age_less_than (optional)
     * @param  int $min_age_less_than_or_equal (optional)
     * @param  int $min_age_not_equals (optional)
     * @param  bool $min_age_specified (optional)
     * @param  string $name_contains (optional)
     * @param  string $name_does_not_contain (optional)
     * @param  string $name_equals (optional)
     * @param  string[] $name_in (optional)
     * @param  string $name_not_equals (optional)
     * @param  bool $name_specified (optional)
     * @param  int $number_type_id_equals (optional)
     * @param  int $number_type_id_greater_than (optional)
     * @param  int $number_type_id_greater_than_or_equal (optional)
     * @param  int[] $number_type_id_in (optional)
     * @param  int $number_type_id_less_than (optional)
     * @param  int $number_type_id_less_than_or_equal (optional)
     * @param  int $number_type_id_not_equals (optional)
     * @param  bool $number_type_id_specified (optional)
     * @param  int $page Page number of the requested page (optional)
     * @param  int $period_id_equals (optional)
     * @param  int $period_id_greater_than (optional)
     * @param  int $period_id_greater_than_or_equal (optional)
     * @param  int[] $period_id_in (optional)
     * @param  int $period_id_less_than (optional)
     * @param  int $period_id_less_than_or_equal (optional)
     * @param  int $period_id_not_equals (optional)
     * @param  bool $period_id_specified (optional)
     * @param  int $product_id_equals (optional)
     * @param  int $product_id_greater_than (optional)
     * @param  int $product_id_greater_than_or_equal (optional)
     * @param  int[] $product_id_in (optional)
     * @param  int $product_id_less_than (optional)
     * @param  int $product_id_less_than_or_equal (optional)
     * @param  int $product_id_not_equals (optional)
     * @param  bool $product_id_specified (optional)
     * @param  int $size Size of a page (optional)
     * @param  string[] $sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllMembershipCriteriaUsingGETAsync($gender_equals = null, $gender_in = null, $gender_not_equals = null, $gender_specified = null, $id_equals = null, $id_greater_than = null, $id_greater_than_or_equal = null, $id_in = null, $id_less_than = null, $id_less_than_or_equal = null, $id_not_equals = null, $id_specified = null, $max_age_equals = null, $max_age_greater_than = null, $max_age_greater_than_or_equal = null, $max_age_in = null, $max_age_less_than = null, $max_age_less_than_or_equal = null, $max_age_not_equals = null, $max_age_specified = null, $min_age_equals = null, $min_age_greater_than = null, $min_age_greater_than_or_equal = null, $min_age_in = null, $min_age_less_than = null, $min_age_less_than_or_equal = null, $min_age_not_equals = null, $min_age_specified = null, $name_contains = null, $name_does_not_contain = null, $name_equals = null, $name_in = null, $name_not_equals = null, $name_specified = null, $number_type_id_equals = null, $number_type_id_greater_than = null, $number_type_id_greater_than_or_equal = null, $number_type_id_in = null, $number_type_id_less_than = null, $number_type_id_less_than_or_equal = null, $number_type_id_not_equals = null, $number_type_id_specified = null, $page = null, $period_id_equals = null, $period_id_greater_than = null, $period_id_greater_than_or_equal = null, $period_id_in = null, $period_id_less_than = null, $period_id_less_than_or_equal = null, $period_id_not_equals = null, $period_id_specified = null, $product_id_equals = null, $product_id_greater_than = null, $product_id_greater_than_or_equal = null, $product_id_in = null, $product_id_less_than = null, $product_id_less_than_or_equal = null, $product_id_not_equals = null, $product_id_specified = null, $size = null, $sort = null)
    {
        return $this->getAllMembershipCriteriaUsingGETAsyncWithHttpInfo($gender_equals, $gender_in, $gender_not_equals, $gender_specified, $id_equals, $id_greater_than, $id_greater_than_or_equal, $id_in, $id_less_than, $id_less_than_or_equal, $id_not_equals, $id_specified, $max_age_equals, $max_age_greater_than, $max_age_greater_than_or_equal, $max_age_in, $max_age_less_than, $max_age_less_than_or_equal, $max_age_not_equals, $max_age_specified, $min_age_equals, $min_age_greater_than, $min_age_greater_than_or_equal, $min_age_in, $min_age_less_than, $min_age_less_than_or_equal, $min_age_not_equals, $min_age_specified, $name_contains, $name_does_not_contain, $name_equals, $name_in, $name_not_equals, $name_specified, $number_type_id_equals, $number_type_id_greater_than, $number_type_id_greater_than_or_equal, $number_type_id_in, $number_type_id_less_than, $number_type_id_less_than_or_equal, $number_type_id_not_equals, $number_type_id_specified, $page, $period_id_equals, $period_id_greater_than, $period_id_greater_than_or_equal, $period_id_in, $period_id_less_than, $period_id_less_than_or_equal, $period_id_not_equals, $period_id_specified, $product_id_equals, $product_id_greater_than, $product_id_greater_than_or_equal, $product_id_in, $product_id_less_than, $product_id_less_than_or_equal, $product_id_not_equals, $product_id_specified, $size, $sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllMembershipCriteriaUsingGETAsyncWithHttpInfo
     *
     * getAllMembershipCriteria
     *
     * @param  string $gender_equals (optional)
     * @param  string[] $gender_in (optional)
     * @param  string $gender_not_equals (optional)
     * @param  bool $gender_specified (optional)
     * @param  int $id_equals (optional)
     * @param  int $id_greater_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int[] $id_in (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int $max_age_equals (optional)
     * @param  int $max_age_greater_than (optional)
     * @param  int $max_age_greater_than_or_equal (optional)
     * @param  int[] $max_age_in (optional)
     * @param  int $max_age_less_than (optional)
     * @param  int $max_age_less_than_or_equal (optional)
     * @param  int $max_age_not_equals (optional)
     * @param  bool $max_age_specified (optional)
     * @param  int $min_age_equals (optional)
     * @param  int $min_age_greater_than (optional)
     * @param  int $min_age_greater_than_or_equal (optional)
     * @param  int[] $min_age_in (optional)
     * @param  int $min_age_less_than (optional)
     * @param  int $min_age_less_than_or_equal (optional)
     * @param  int $min_age_not_equals (optional)
     * @param  bool $min_age_specified (optional)
     * @param  string $name_contains (optional)
     * @param  string $name_does_not_contain (optional)
     * @param  string $name_equals (optional)
     * @param  string[] $name_in (optional)
     * @param  string $name_not_equals (optional)
     * @param  bool $name_specified (optional)
     * @param  int $number_type_id_equals (optional)
     * @param  int $number_type_id_greater_than (optional)
     * @param  int $number_type_id_greater_than_or_equal (optional)
     * @param  int[] $number_type_id_in (optional)
     * @param  int $number_type_id_less_than (optional)
     * @param  int $number_type_id_less_than_or_equal (optional)
     * @param  int $number_type_id_not_equals (optional)
     * @param  bool $number_type_id_specified (optional)
     * @param  int $page Page number of the requested page (optional)
     * @param  int $period_id_equals (optional)
     * @param  int $period_id_greater_than (optional)
     * @param  int $period_id_greater_than_or_equal (optional)
     * @param  int[] $period_id_in (optional)
     * @param  int $period_id_less_than (optional)
     * @param  int $period_id_less_than_or_equal (optional)
     * @param  int $period_id_not_equals (optional)
     * @param  bool $period_id_specified (optional)
     * @param  int $product_id_equals (optional)
     * @param  int $product_id_greater_than (optional)
     * @param  int $product_id_greater_than_or_equal (optional)
     * @param  int[] $product_id_in (optional)
     * @param  int $product_id_less_than (optional)
     * @param  int $product_id_less_than_or_equal (optional)
     * @param  int $product_id_not_equals (optional)
     * @param  bool $product_id_specified (optional)
     * @param  int $size Size of a page (optional)
     * @param  string[] $sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllMembershipCriteriaUsingGETAsyncWithHttpInfo($gender_equals = null, $gender_in = null, $gender_not_equals = null, $gender_specified = null, $id_equals = null, $id_greater_than = null, $id_greater_than_or_equal = null, $id_in = null, $id_less_than = null, $id_less_than_or_equal = null, $id_not_equals = null, $id_specified = null, $max_age_equals = null, $max_age_greater_than = null, $max_age_greater_than_or_equal = null, $max_age_in = null, $max_age_less_than = null, $max_age_less_than_or_equal = null, $max_age_not_equals = null, $max_age_specified = null, $min_age_equals = null, $min_age_greater_than = null, $min_age_greater_than_or_equal = null, $min_age_in = null, $min_age_less_than = null, $min_age_less_than_or_equal = null, $min_age_not_equals = null, $min_age_specified = null, $name_contains = null, $name_does_not_contain = null, $name_equals = null, $name_in = null, $name_not_equals = null, $name_specified = null, $number_type_id_equals = null, $number_type_id_greater_than = null, $number_type_id_greater_than_or_equal = null, $number_type_id_in = null, $number_type_id_less_than = null, $number_type_id_less_than_or_equal = null, $number_type_id_not_equals = null, $number_type_id_specified = null, $page = null, $period_id_equals = null, $period_id_greater_than = null, $period_id_greater_than_or_equal = null, $period_id_in = null, $period_id_less_than = null, $period_id_less_than_or_equal = null, $period_id_not_equals = null, $period_id_specified = null, $product_id_equals = null, $product_id_greater_than = null, $product_id_greater_than_or_equal = null, $product_id_in = null, $product_id_less_than = null, $product_id_less_than_or_equal = null, $product_id_not_equals = null, $product_id_specified = null, $size = null, $sort = null)
    {
        $returnType = '\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO[]';
        $request = $this->getAllMembershipCriteriaUsingGETRequest($gender_equals, $gender_in, $gender_not_equals, $gender_specified, $id_equals, $id_greater_than, $id_greater_than_or_equal, $id_in, $id_less_than, $id_less_than_or_equal, $id_not_equals, $id_specified, $max_age_equals, $max_age_greater_than, $max_age_greater_than_or_equal, $max_age_in, $max_age_less_than, $max_age_less_than_or_equal, $max_age_not_equals, $max_age_specified, $min_age_equals, $min_age_greater_than, $min_age_greater_than_or_equal, $min_age_in, $min_age_less_than, $min_age_less_than_or_equal, $min_age_not_equals, $min_age_specified, $name_contains, $name_does_not_contain, $name_equals, $name_in, $name_not_equals, $name_specified, $number_type_id_equals, $number_type_id_greater_than, $number_type_id_greater_than_or_equal, $number_type_id_in, $number_type_id_less_than, $number_type_id_less_than_or_equal, $number_type_id_not_equals, $number_type_id_specified, $page, $period_id_equals, $period_id_greater_than, $period_id_greater_than_or_equal, $period_id_in, $period_id_less_than, $period_id_less_than_or_equal, $period_id_not_equals, $period_id_specified, $product_id_equals, $product_id_greater_than, $product_id_greater_than_or_equal, $product_id_in, $product_id_less_than, $product_id_less_than_or_equal, $product_id_not_equals, $product_id_specified, $size, $sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllMembershipCriteriaUsingGET'
     *
     * @param  string $gender_equals (optional)
     * @param  string[] $gender_in (optional)
     * @param  string $gender_not_equals (optional)
     * @param  bool $gender_specified (optional)
     * @param  int $id_equals (optional)
     * @param  int $id_greater_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int[] $id_in (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int $max_age_equals (optional)
     * @param  int $max_age_greater_than (optional)
     * @param  int $max_age_greater_than_or_equal (optional)
     * @param  int[] $max_age_in (optional)
     * @param  int $max_age_less_than (optional)
     * @param  int $max_age_less_than_or_equal (optional)
     * @param  int $max_age_not_equals (optional)
     * @param  bool $max_age_specified (optional)
     * @param  int $min_age_equals (optional)
     * @param  int $min_age_greater_than (optional)
     * @param  int $min_age_greater_than_or_equal (optional)
     * @param  int[] $min_age_in (optional)
     * @param  int $min_age_less_than (optional)
     * @param  int $min_age_less_than_or_equal (optional)
     * @param  int $min_age_not_equals (optional)
     * @param  bool $min_age_specified (optional)
     * @param  string $name_contains (optional)
     * @param  string $name_does_not_contain (optional)
     * @param  string $name_equals (optional)
     * @param  string[] $name_in (optional)
     * @param  string $name_not_equals (optional)
     * @param  bool $name_specified (optional)
     * @param  int $number_type_id_equals (optional)
     * @param  int $number_type_id_greater_than (optional)
     * @param  int $number_type_id_greater_than_or_equal (optional)
     * @param  int[] $number_type_id_in (optional)
     * @param  int $number_type_id_less_than (optional)
     * @param  int $number_type_id_less_than_or_equal (optional)
     * @param  int $number_type_id_not_equals (optional)
     * @param  bool $number_type_id_specified (optional)
     * @param  int $page Page number of the requested page (optional)
     * @param  int $period_id_equals (optional)
     * @param  int $period_id_greater_than (optional)
     * @param  int $period_id_greater_than_or_equal (optional)
     * @param  int[] $period_id_in (optional)
     * @param  int $period_id_less_than (optional)
     * @param  int $period_id_less_than_or_equal (optional)
     * @param  int $period_id_not_equals (optional)
     * @param  bool $period_id_specified (optional)
     * @param  int $product_id_equals (optional)
     * @param  int $product_id_greater_than (optional)
     * @param  int $product_id_greater_than_or_equal (optional)
     * @param  int[] $product_id_in (optional)
     * @param  int $product_id_less_than (optional)
     * @param  int $product_id_less_than_or_equal (optional)
     * @param  int $product_id_not_equals (optional)
     * @param  bool $product_id_specified (optional)
     * @param  int $size Size of a page (optional)
     * @param  string[] $sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllMembershipCriteriaUsingGETRequest($gender_equals = null, $gender_in = null, $gender_not_equals = null, $gender_specified = null, $id_equals = null, $id_greater_than = null, $id_greater_than_or_equal = null, $id_in = null, $id_less_than = null, $id_less_than_or_equal = null, $id_not_equals = null, $id_specified = null, $max_age_equals = null, $max_age_greater_than = null, $max_age_greater_than_or_equal = null, $max_age_in = null, $max_age_less_than = null, $max_age_less_than_or_equal = null, $max_age_not_equals = null, $max_age_specified = null, $min_age_equals = null, $min_age_greater_than = null, $min_age_greater_than_or_equal = null, $min_age_in = null, $min_age_less_than = null, $min_age_less_than_or_equal = null, $min_age_not_equals = null, $min_age_specified = null, $name_contains = null, $name_does_not_contain = null, $name_equals = null, $name_in = null, $name_not_equals = null, $name_specified = null, $number_type_id_equals = null, $number_type_id_greater_than = null, $number_type_id_greater_than_or_equal = null, $number_type_id_in = null, $number_type_id_less_than = null, $number_type_id_less_than_or_equal = null, $number_type_id_not_equals = null, $number_type_id_specified = null, $page = null, $period_id_equals = null, $period_id_greater_than = null, $period_id_greater_than_or_equal = null, $period_id_in = null, $period_id_less_than = null, $period_id_less_than_or_equal = null, $period_id_not_equals = null, $period_id_specified = null, $product_id_equals = null, $product_id_greater_than = null, $product_id_greater_than_or_equal = null, $product_id_in = null, $product_id_less_than = null, $product_id_less_than_or_equal = null, $product_id_not_equals = null, $product_id_specified = null, $size = null, $sort = null)
    {

        $resourcePath = '/api/membership-criteria';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($gender_equals !== null) {
            $queryParams['gender.equals'] = ObjectSerializer::toQueryValue($gender_equals);
        }
        // query params
        if (is_array($gender_in)) {
            $queryParams['gender.in'] = $gender_in;
        } else
        if ($gender_in !== null) {
            $queryParams['gender.in'] = ObjectSerializer::toQueryValue($gender_in);
        }
        // query params
        if ($gender_not_equals !== null) {
            $queryParams['gender.notEquals'] = ObjectSerializer::toQueryValue($gender_not_equals);
        }
        // query params
        if ($gender_specified !== null) {
            $queryParams['gender.specified'] = ObjectSerializer::toQueryValue($gender_specified);
        }
        // query params
        if ($id_equals !== null) {
            $queryParams['id.equals'] = ObjectSerializer::toQueryValue($id_equals);
        }
        // query params
        if ($id_greater_than !== null) {
            $queryParams['id.greaterThan'] = ObjectSerializer::toQueryValue($id_greater_than);
        }
        // query params
        if ($id_greater_than_or_equal !== null) {
            $queryParams['id.greaterThanOrEqual'] = ObjectSerializer::toQueryValue($id_greater_than_or_equal);
        }
        // query params
        if (is_array($id_in)) {
            $queryParams['id.in'] = $id_in;
        } else
        if ($id_in !== null) {
            $queryParams['id.in'] = ObjectSerializer::toQueryValue($id_in);
        }
        // query params
        if ($id_less_than !== null) {
            $queryParams['id.lessThan'] = ObjectSerializer::toQueryValue($id_less_than);
        }
        // query params
        if ($id_less_than_or_equal !== null) {
            $queryParams['id.lessThanOrEqual'] = ObjectSerializer::toQueryValue($id_less_than_or_equal);
        }
        // query params
        if ($id_not_equals !== null) {
            $queryParams['id.notEquals'] = ObjectSerializer::toQueryValue($id_not_equals);
        }
        // query params
        if ($id_specified !== null) {
            $queryParams['id.specified'] = ObjectSerializer::toQueryValue($id_specified);
        }
        // query params
        if ($max_age_equals !== null) {
            $queryParams['maxAge.equals'] = ObjectSerializer::toQueryValue($max_age_equals);
        }
        // query params
        if ($max_age_greater_than !== null) {
            $queryParams['maxAge.greaterThan'] = ObjectSerializer::toQueryValue($max_age_greater_than);
        }
        // query params
        if ($max_age_greater_than_or_equal !== null) {
            $queryParams['maxAge.greaterThanOrEqual'] = ObjectSerializer::toQueryValue($max_age_greater_than_or_equal);
        }
        // query params
        if (is_array($max_age_in)) {
            $queryParams['maxAge.in'] = $max_age_in;
        } else
        if ($max_age_in !== null) {
            $queryParams['maxAge.in'] = ObjectSerializer::toQueryValue($max_age_in);
        }
        // query params
        if ($max_age_less_than !== null) {
            $queryParams['maxAge.lessThan'] = ObjectSerializer::toQueryValue($max_age_less_than);
        }
        // query params
        if ($max_age_less_than_or_equal !== null) {
            $queryParams['maxAge.lessThanOrEqual'] = ObjectSerializer::toQueryValue($max_age_less_than_or_equal);
        }
        // query params
        if ($max_age_not_equals !== null) {
            $queryParams['maxAge.notEquals'] = ObjectSerializer::toQueryValue($max_age_not_equals);
        }
        // query params
        if ($max_age_specified !== null) {
            $queryParams['maxAge.specified'] = ObjectSerializer::toQueryValue($max_age_specified);
        }
        // query params
        if ($min_age_equals !== null) {
            $queryParams['minAge.equals'] = ObjectSerializer::toQueryValue($min_age_equals);
        }
        // query params
        if ($min_age_greater_than !== null) {
            $queryParams['minAge.greaterThan'] = ObjectSerializer::toQueryValue($min_age_greater_than);
        }
        // query params
        if ($min_age_greater_than_or_equal !== null) {
            $queryParams['minAge.greaterThanOrEqual'] = ObjectSerializer::toQueryValue($min_age_greater_than_or_equal);
        }
        // query params
        if (is_array($min_age_in)) {
            $queryParams['minAge.in'] = $min_age_in;
        } else
        if ($min_age_in !== null) {
            $queryParams['minAge.in'] = ObjectSerializer::toQueryValue($min_age_in);
        }
        // query params
        if ($min_age_less_than !== null) {
            $queryParams['minAge.lessThan'] = ObjectSerializer::toQueryValue($min_age_less_than);
        }
        // query params
        if ($min_age_less_than_or_equal !== null) {
            $queryParams['minAge.lessThanOrEqual'] = ObjectSerializer::toQueryValue($min_age_less_than_or_equal);
        }
        // query params
        if ($min_age_not_equals !== null) {
            $queryParams['minAge.notEquals'] = ObjectSerializer::toQueryValue($min_age_not_equals);
        }
        // query params
        if ($min_age_specified !== null) {
            $queryParams['minAge.specified'] = ObjectSerializer::toQueryValue($min_age_specified);
        }
        // query params
        if ($name_contains !== null) {
            $queryParams['name.contains'] = ObjectSerializer::toQueryValue($name_contains);
        }
        // query params
        if ($name_does_not_contain !== null) {
            $queryParams['name.doesNotContain'] = ObjectSerializer::toQueryValue($name_does_not_contain);
        }
        // query params
        if ($name_equals !== null) {
            $queryParams['name.equals'] = ObjectSerializer::toQueryValue($name_equals);
        }
        // query params
        if (is_array($name_in)) {
            $queryParams['name.in'] = $name_in;
        } else
        if ($name_in !== null) {
            $queryParams['name.in'] = ObjectSerializer::toQueryValue($name_in);
        }
        // query params
        if ($name_not_equals !== null) {
            $queryParams['name.notEquals'] = ObjectSerializer::toQueryValue($name_not_equals);
        }
        // query params
        if ($name_specified !== null) {
            $queryParams['name.specified'] = ObjectSerializer::toQueryValue($name_specified);
        }
        // query params
        if ($number_type_id_equals !== null) {
            $queryParams['numberTypeId.equals'] = ObjectSerializer::toQueryValue($number_type_id_equals);
        }
        // query params
        if ($number_type_id_greater_than !== null) {
            $queryParams['numberTypeId.greaterThan'] = ObjectSerializer::toQueryValue($number_type_id_greater_than);
        }
        // query params
        if ($number_type_id_greater_than_or_equal !== null) {
            $queryParams['numberTypeId.greaterThanOrEqual'] = ObjectSerializer::toQueryValue($number_type_id_greater_than_or_equal);
        }
        // query params
        if (is_array($number_type_id_in)) {
            $queryParams['numberTypeId.in'] = $number_type_id_in;
        } else
        if ($number_type_id_in !== null) {
            $queryParams['numberTypeId.in'] = ObjectSerializer::toQueryValue($number_type_id_in);
        }
        // query params
        if ($number_type_id_less_than !== null) {
            $queryParams['numberTypeId.lessThan'] = ObjectSerializer::toQueryValue($number_type_id_less_than);
        }
        // query params
        if ($number_type_id_less_than_or_equal !== null) {
            $queryParams['numberTypeId.lessThanOrEqual'] = ObjectSerializer::toQueryValue($number_type_id_less_than_or_equal);
        }
        // query params
        if ($number_type_id_not_equals !== null) {
            $queryParams['numberTypeId.notEquals'] = ObjectSerializer::toQueryValue($number_type_id_not_equals);
        }
        // query params
        if ($number_type_id_specified !== null) {
            $queryParams['numberTypeId.specified'] = ObjectSerializer::toQueryValue($number_type_id_specified);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($period_id_equals !== null) {
            $queryParams['periodId.equals'] = ObjectSerializer::toQueryValue($period_id_equals);
        }
        // query params
        if ($period_id_greater_than !== null) {
            $queryParams['periodId.greaterThan'] = ObjectSerializer::toQueryValue($period_id_greater_than);
        }
        // query params
        if ($period_id_greater_than_or_equal !== null) {
            $queryParams['periodId.greaterThanOrEqual'] = ObjectSerializer::toQueryValue($period_id_greater_than_or_equal);
        }
        // query params
        if (is_array($period_id_in)) {
            $queryParams['periodId.in'] = $period_id_in;
        } else
        if ($period_id_in !== null) {
            $queryParams['periodId.in'] = ObjectSerializer::toQueryValue($period_id_in);
        }
        // query params
        if ($period_id_less_than !== null) {
            $queryParams['periodId.lessThan'] = ObjectSerializer::toQueryValue($period_id_less_than);
        }
        // query params
        if ($period_id_less_than_or_equal !== null) {
            $queryParams['periodId.lessThanOrEqual'] = ObjectSerializer::toQueryValue($period_id_less_than_or_equal);
        }
        // query params
        if ($period_id_not_equals !== null) {
            $queryParams['periodId.notEquals'] = ObjectSerializer::toQueryValue($period_id_not_equals);
        }
        // query params
        if ($period_id_specified !== null) {
            $queryParams['periodId.specified'] = ObjectSerializer::toQueryValue($period_id_specified);
        }
        // query params
        if ($product_id_equals !== null) {
            $queryParams['productId.equals'] = ObjectSerializer::toQueryValue($product_id_equals);
        }
        // query params
        if ($product_id_greater_than !== null) {
            $queryParams['productId.greaterThan'] = ObjectSerializer::toQueryValue($product_id_greater_than);
        }
        // query params
        if ($product_id_greater_than_or_equal !== null) {
            $queryParams['productId.greaterThanOrEqual'] = ObjectSerializer::toQueryValue($product_id_greater_than_or_equal);
        }
        // query params
        if (is_array($product_id_in)) {
            $queryParams['productId.in'] = $product_id_in;
        } else
        if ($product_id_in !== null) {
            $queryParams['productId.in'] = ObjectSerializer::toQueryValue($product_id_in);
        }
        // query params
        if ($product_id_less_than !== null) {
            $queryParams['productId.lessThan'] = ObjectSerializer::toQueryValue($product_id_less_than);
        }
        // query params
        if ($product_id_less_than_or_equal !== null) {
            $queryParams['productId.lessThanOrEqual'] = ObjectSerializer::toQueryValue($product_id_less_than_or_equal);
        }
        // query params
        if ($product_id_not_equals !== null) {
            $queryParams['productId.notEquals'] = ObjectSerializer::toQueryValue($product_id_not_equals);
        }
        // query params
        if ($product_id_specified !== null) {
            $queryParams['productId.specified'] = ObjectSerializer::toQueryValue($product_id_specified);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size);
        }
        // query params
        if (is_array($sort)) {
            $queryParams['sort'] = $sort;
        } else
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMembershipCriteriaUsingGET
     *
     * getMembershipCriteria
     *
     * @param  int $id id (required)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO
     */
    public function getMembershipCriteriaUsingGET($id)
    {
        list($response) = $this->getMembershipCriteriaUsingGETWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getMembershipCriteriaUsingGETWithHttpInfo
     *
     * getMembershipCriteria
     *
     * @param  int $id id (required)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMembershipCriteriaUsingGETWithHttpInfo($id)
    {
        $returnType = '\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO';
        $request = $this->getMembershipCriteriaUsingGETRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMembershipCriteriaUsingGETAsync
     *
     * getMembershipCriteria
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMembershipCriteriaUsingGETAsync($id)
    {
        return $this->getMembershipCriteriaUsingGETAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMembershipCriteriaUsingGETAsyncWithHttpInfo
     *
     * getMembershipCriteria
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMembershipCriteriaUsingGETAsyncWithHttpInfo($id)
    {
        $returnType = '\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO';
        $request = $this->getMembershipCriteriaUsingGETRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMembershipCriteriaUsingGET'
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMembershipCriteriaUsingGETRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getMembershipCriteriaUsingGET'
            );
        }

        $resourcePath = '/api/membership-criteria/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateMembershipCriteriaUsingPUT
     *
     * updateMembershipCriteria
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO $membership_criteria_dto membershipCriteriaDTO (required)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO
     */
    public function updateMembershipCriteriaUsingPUT($membership_criteria_dto)
    {
        list($response) = $this->updateMembershipCriteriaUsingPUTWithHttpInfo($membership_criteria_dto);
        return $response;
    }

    /**
     * Operation updateMembershipCriteriaUsingPUTWithHttpInfo
     *
     * updateMembershipCriteria
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO $membership_criteria_dto membershipCriteriaDTO (required)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateMembershipCriteriaUsingPUTWithHttpInfo($membership_criteria_dto)
    {
        $returnType = '\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO';
        $request = $this->updateMembershipCriteriaUsingPUTRequest($membership_criteria_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateMembershipCriteriaUsingPUTAsync
     *
     * updateMembershipCriteria
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO $membership_criteria_dto membershipCriteriaDTO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateMembershipCriteriaUsingPUTAsync($membership_criteria_dto)
    {
        return $this->updateMembershipCriteriaUsingPUTAsyncWithHttpInfo($membership_criteria_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateMembershipCriteriaUsingPUTAsyncWithHttpInfo
     *
     * updateMembershipCriteria
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO $membership_criteria_dto membershipCriteriaDTO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateMembershipCriteriaUsingPUTAsyncWithHttpInfo($membership_criteria_dto)
    {
        $returnType = '\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO';
        $request = $this->updateMembershipCriteriaUsingPUTRequest($membership_criteria_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateMembershipCriteriaUsingPUT'
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO $membership_criteria_dto membershipCriteriaDTO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateMembershipCriteriaUsingPUTRequest($membership_criteria_dto)
    {
        // verify the required parameter 'membership_criteria_dto' is set
        if ($membership_criteria_dto === null || (is_array($membership_criteria_dto) && count($membership_criteria_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $membership_criteria_dto when calling updateMembershipCriteriaUsingPUT'
            );
        }

        $resourcePath = '/api/membership-criteria';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($membership_criteria_dto)) {
            $_tempBody = $membership_criteria_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
