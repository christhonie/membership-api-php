<?php
/**
 * LinkedPersonResourceApi
 * PHP version 5
 *
 * @category Class
 * @package  Idealogic\MembershipAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Application API
 *
 * API documentation
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Idealogic\MembershipAPI\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Idealogic\MembershipAPI\ApiException;
use Idealogic\MembershipAPI\Configuration;
use Idealogic\MembershipAPI\HeaderSelector;
use Idealogic\MembershipAPI\ObjectSerializer;

/**
 * LinkedPersonResourceApi Class Doc Comment
 *
 * @category Class
 * @package  Idealogic\MembershipAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LinkedPersonResourceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation countLinkedPeopleUsingGET
     *
     * countLinkedPeople
     *
     * @param  int $id_equals id_equals (optional)
     * @param  int $id_greater_than id_greater_than (optional)
     * @param  int $id_greater_than_or_equal id_greater_than_or_equal (optional)
     * @param  int[] $id_in id_in (optional)
     * @param  int $id_less_than id_less_than (optional)
     * @param  int $id_less_than_or_equal id_less_than_or_equal (optional)
     * @param  int $id_not_equals id_not_equals (optional)
     * @param  bool $id_specified id_specified (optional)
     * @param  int $linked_member_id_equals linked_member_id_equals (optional)
     * @param  int $linked_member_id_greater_than linked_member_id_greater_than (optional)
     * @param  int $linked_member_id_greater_than_or_equal linked_member_id_greater_than_or_equal (optional)
     * @param  int[] $linked_member_id_in linked_member_id_in (optional)
     * @param  int $linked_member_id_less_than linked_member_id_less_than (optional)
     * @param  int $linked_member_id_less_than_or_equal linked_member_id_less_than_or_equal (optional)
     * @param  int $linked_member_id_not_equals linked_member_id_not_equals (optional)
     * @param  bool $linked_member_id_specified linked_member_id_specified (optional)
     * @param  int $principal_id_equals principal_id_equals (optional)
     * @param  int $principal_id_greater_than principal_id_greater_than (optional)
     * @param  int $principal_id_greater_than_or_equal principal_id_greater_than_or_equal (optional)
     * @param  int[] $principal_id_in principal_id_in (optional)
     * @param  int $principal_id_less_than principal_id_less_than (optional)
     * @param  int $principal_id_less_than_or_equal principal_id_less_than_or_equal (optional)
     * @param  int $principal_id_not_equals principal_id_not_equals (optional)
     * @param  bool $principal_id_specified principal_id_specified (optional)
     * @param  string $type_equals type_equals (optional)
     * @param  string[] $type_in type_in (optional)
     * @param  string $type_not_equals type_not_equals (optional)
     * @param  bool $type_specified type_specified (optional)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return int
     */
    public function countLinkedPeopleUsingGET($id_equals = null, $id_greater_than = null, $id_greater_than_or_equal = null, $id_in = null, $id_less_than = null, $id_less_than_or_equal = null, $id_not_equals = null, $id_specified = null, $linked_member_id_equals = null, $linked_member_id_greater_than = null, $linked_member_id_greater_than_or_equal = null, $linked_member_id_in = null, $linked_member_id_less_than = null, $linked_member_id_less_than_or_equal = null, $linked_member_id_not_equals = null, $linked_member_id_specified = null, $principal_id_equals = null, $principal_id_greater_than = null, $principal_id_greater_than_or_equal = null, $principal_id_in = null, $principal_id_less_than = null, $principal_id_less_than_or_equal = null, $principal_id_not_equals = null, $principal_id_specified = null, $type_equals = null, $type_in = null, $type_not_equals = null, $type_specified = null)
    {
        list($response) = $this->countLinkedPeopleUsingGETWithHttpInfo($id_equals, $id_greater_than, $id_greater_than_or_equal, $id_in, $id_less_than, $id_less_than_or_equal, $id_not_equals, $id_specified, $linked_member_id_equals, $linked_member_id_greater_than, $linked_member_id_greater_than_or_equal, $linked_member_id_in, $linked_member_id_less_than, $linked_member_id_less_than_or_equal, $linked_member_id_not_equals, $linked_member_id_specified, $principal_id_equals, $principal_id_greater_than, $principal_id_greater_than_or_equal, $principal_id_in, $principal_id_less_than, $principal_id_less_than_or_equal, $principal_id_not_equals, $principal_id_specified, $type_equals, $type_in, $type_not_equals, $type_specified);
        return $response;
    }

    /**
     * Operation countLinkedPeopleUsingGETWithHttpInfo
     *
     * countLinkedPeople
     *
     * @param  int $id_equals (optional)
     * @param  int $id_greater_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int[] $id_in (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int $linked_member_id_equals (optional)
     * @param  int $linked_member_id_greater_than (optional)
     * @param  int $linked_member_id_greater_than_or_equal (optional)
     * @param  int[] $linked_member_id_in (optional)
     * @param  int $linked_member_id_less_than (optional)
     * @param  int $linked_member_id_less_than_or_equal (optional)
     * @param  int $linked_member_id_not_equals (optional)
     * @param  bool $linked_member_id_specified (optional)
     * @param  int $principal_id_equals (optional)
     * @param  int $principal_id_greater_than (optional)
     * @param  int $principal_id_greater_than_or_equal (optional)
     * @param  int[] $principal_id_in (optional)
     * @param  int $principal_id_less_than (optional)
     * @param  int $principal_id_less_than_or_equal (optional)
     * @param  int $principal_id_not_equals (optional)
     * @param  bool $principal_id_specified (optional)
     * @param  string $type_equals (optional)
     * @param  string[] $type_in (optional)
     * @param  string $type_not_equals (optional)
     * @param  bool $type_specified (optional)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function countLinkedPeopleUsingGETWithHttpInfo($id_equals = null, $id_greater_than = null, $id_greater_than_or_equal = null, $id_in = null, $id_less_than = null, $id_less_than_or_equal = null, $id_not_equals = null, $id_specified = null, $linked_member_id_equals = null, $linked_member_id_greater_than = null, $linked_member_id_greater_than_or_equal = null, $linked_member_id_in = null, $linked_member_id_less_than = null, $linked_member_id_less_than_or_equal = null, $linked_member_id_not_equals = null, $linked_member_id_specified = null, $principal_id_equals = null, $principal_id_greater_than = null, $principal_id_greater_than_or_equal = null, $principal_id_in = null, $principal_id_less_than = null, $principal_id_less_than_or_equal = null, $principal_id_not_equals = null, $principal_id_specified = null, $type_equals = null, $type_in = null, $type_not_equals = null, $type_specified = null)
    {
        $returnType = 'int';
        $request = $this->countLinkedPeopleUsingGETRequest($id_equals, $id_greater_than, $id_greater_than_or_equal, $id_in, $id_less_than, $id_less_than_or_equal, $id_not_equals, $id_specified, $linked_member_id_equals, $linked_member_id_greater_than, $linked_member_id_greater_than_or_equal, $linked_member_id_in, $linked_member_id_less_than, $linked_member_id_less_than_or_equal, $linked_member_id_not_equals, $linked_member_id_specified, $principal_id_equals, $principal_id_greater_than, $principal_id_greater_than_or_equal, $principal_id_in, $principal_id_less_than, $principal_id_less_than_or_equal, $principal_id_not_equals, $principal_id_specified, $type_equals, $type_in, $type_not_equals, $type_specified);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation countLinkedPeopleUsingGETAsync
     *
     * countLinkedPeople
     *
     * @param  int $id_equals (optional)
     * @param  int $id_greater_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int[] $id_in (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int $linked_member_id_equals (optional)
     * @param  int $linked_member_id_greater_than (optional)
     * @param  int $linked_member_id_greater_than_or_equal (optional)
     * @param  int[] $linked_member_id_in (optional)
     * @param  int $linked_member_id_less_than (optional)
     * @param  int $linked_member_id_less_than_or_equal (optional)
     * @param  int $linked_member_id_not_equals (optional)
     * @param  bool $linked_member_id_specified (optional)
     * @param  int $principal_id_equals (optional)
     * @param  int $principal_id_greater_than (optional)
     * @param  int $principal_id_greater_than_or_equal (optional)
     * @param  int[] $principal_id_in (optional)
     * @param  int $principal_id_less_than (optional)
     * @param  int $principal_id_less_than_or_equal (optional)
     * @param  int $principal_id_not_equals (optional)
     * @param  bool $principal_id_specified (optional)
     * @param  string $type_equals (optional)
     * @param  string[] $type_in (optional)
     * @param  string $type_not_equals (optional)
     * @param  bool $type_specified (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function countLinkedPeopleUsingGETAsync($id_equals = null, $id_greater_than = null, $id_greater_than_or_equal = null, $id_in = null, $id_less_than = null, $id_less_than_or_equal = null, $id_not_equals = null, $id_specified = null, $linked_member_id_equals = null, $linked_member_id_greater_than = null, $linked_member_id_greater_than_or_equal = null, $linked_member_id_in = null, $linked_member_id_less_than = null, $linked_member_id_less_than_or_equal = null, $linked_member_id_not_equals = null, $linked_member_id_specified = null, $principal_id_equals = null, $principal_id_greater_than = null, $principal_id_greater_than_or_equal = null, $principal_id_in = null, $principal_id_less_than = null, $principal_id_less_than_or_equal = null, $principal_id_not_equals = null, $principal_id_specified = null, $type_equals = null, $type_in = null, $type_not_equals = null, $type_specified = null)
    {
        return $this->countLinkedPeopleUsingGETAsyncWithHttpInfo($id_equals, $id_greater_than, $id_greater_than_or_equal, $id_in, $id_less_than, $id_less_than_or_equal, $id_not_equals, $id_specified, $linked_member_id_equals, $linked_member_id_greater_than, $linked_member_id_greater_than_or_equal, $linked_member_id_in, $linked_member_id_less_than, $linked_member_id_less_than_or_equal, $linked_member_id_not_equals, $linked_member_id_specified, $principal_id_equals, $principal_id_greater_than, $principal_id_greater_than_or_equal, $principal_id_in, $principal_id_less_than, $principal_id_less_than_or_equal, $principal_id_not_equals, $principal_id_specified, $type_equals, $type_in, $type_not_equals, $type_specified)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation countLinkedPeopleUsingGETAsyncWithHttpInfo
     *
     * countLinkedPeople
     *
     * @param  int $id_equals (optional)
     * @param  int $id_greater_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int[] $id_in (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int $linked_member_id_equals (optional)
     * @param  int $linked_member_id_greater_than (optional)
     * @param  int $linked_member_id_greater_than_or_equal (optional)
     * @param  int[] $linked_member_id_in (optional)
     * @param  int $linked_member_id_less_than (optional)
     * @param  int $linked_member_id_less_than_or_equal (optional)
     * @param  int $linked_member_id_not_equals (optional)
     * @param  bool $linked_member_id_specified (optional)
     * @param  int $principal_id_equals (optional)
     * @param  int $principal_id_greater_than (optional)
     * @param  int $principal_id_greater_than_or_equal (optional)
     * @param  int[] $principal_id_in (optional)
     * @param  int $principal_id_less_than (optional)
     * @param  int $principal_id_less_than_or_equal (optional)
     * @param  int $principal_id_not_equals (optional)
     * @param  bool $principal_id_specified (optional)
     * @param  string $type_equals (optional)
     * @param  string[] $type_in (optional)
     * @param  string $type_not_equals (optional)
     * @param  bool $type_specified (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function countLinkedPeopleUsingGETAsyncWithHttpInfo($id_equals = null, $id_greater_than = null, $id_greater_than_or_equal = null, $id_in = null, $id_less_than = null, $id_less_than_or_equal = null, $id_not_equals = null, $id_specified = null, $linked_member_id_equals = null, $linked_member_id_greater_than = null, $linked_member_id_greater_than_or_equal = null, $linked_member_id_in = null, $linked_member_id_less_than = null, $linked_member_id_less_than_or_equal = null, $linked_member_id_not_equals = null, $linked_member_id_specified = null, $principal_id_equals = null, $principal_id_greater_than = null, $principal_id_greater_than_or_equal = null, $principal_id_in = null, $principal_id_less_than = null, $principal_id_less_than_or_equal = null, $principal_id_not_equals = null, $principal_id_specified = null, $type_equals = null, $type_in = null, $type_not_equals = null, $type_specified = null)
    {
        $returnType = 'int';
        $request = $this->countLinkedPeopleUsingGETRequest($id_equals, $id_greater_than, $id_greater_than_or_equal, $id_in, $id_less_than, $id_less_than_or_equal, $id_not_equals, $id_specified, $linked_member_id_equals, $linked_member_id_greater_than, $linked_member_id_greater_than_or_equal, $linked_member_id_in, $linked_member_id_less_than, $linked_member_id_less_than_or_equal, $linked_member_id_not_equals, $linked_member_id_specified, $principal_id_equals, $principal_id_greater_than, $principal_id_greater_than_or_equal, $principal_id_in, $principal_id_less_than, $principal_id_less_than_or_equal, $principal_id_not_equals, $principal_id_specified, $type_equals, $type_in, $type_not_equals, $type_specified);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'countLinkedPeopleUsingGET'
     *
     * @param  int $id_equals (optional)
     * @param  int $id_greater_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int[] $id_in (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int $linked_member_id_equals (optional)
     * @param  int $linked_member_id_greater_than (optional)
     * @param  int $linked_member_id_greater_than_or_equal (optional)
     * @param  int[] $linked_member_id_in (optional)
     * @param  int $linked_member_id_less_than (optional)
     * @param  int $linked_member_id_less_than_or_equal (optional)
     * @param  int $linked_member_id_not_equals (optional)
     * @param  bool $linked_member_id_specified (optional)
     * @param  int $principal_id_equals (optional)
     * @param  int $principal_id_greater_than (optional)
     * @param  int $principal_id_greater_than_or_equal (optional)
     * @param  int[] $principal_id_in (optional)
     * @param  int $principal_id_less_than (optional)
     * @param  int $principal_id_less_than_or_equal (optional)
     * @param  int $principal_id_not_equals (optional)
     * @param  bool $principal_id_specified (optional)
     * @param  string $type_equals (optional)
     * @param  string[] $type_in (optional)
     * @param  string $type_not_equals (optional)
     * @param  bool $type_specified (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function countLinkedPeopleUsingGETRequest($id_equals = null, $id_greater_than = null, $id_greater_than_or_equal = null, $id_in = null, $id_less_than = null, $id_less_than_or_equal = null, $id_not_equals = null, $id_specified = null, $linked_member_id_equals = null, $linked_member_id_greater_than = null, $linked_member_id_greater_than_or_equal = null, $linked_member_id_in = null, $linked_member_id_less_than = null, $linked_member_id_less_than_or_equal = null, $linked_member_id_not_equals = null, $linked_member_id_specified = null, $principal_id_equals = null, $principal_id_greater_than = null, $principal_id_greater_than_or_equal = null, $principal_id_in = null, $principal_id_less_than = null, $principal_id_less_than_or_equal = null, $principal_id_not_equals = null, $principal_id_specified = null, $type_equals = null, $type_in = null, $type_not_equals = null, $type_specified = null)
    {

        $resourcePath = '/api/linked-people/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id_equals !== null) {
            $queryParams['id.equals'] = ObjectSerializer::toQueryValue($id_equals);
        }
        // query params
        if ($id_greater_than !== null) {
            $queryParams['id.greaterThan'] = ObjectSerializer::toQueryValue($id_greater_than);
        }
        // query params
        if ($id_greater_than_or_equal !== null) {
            $queryParams['id.greaterThanOrEqual'] = ObjectSerializer::toQueryValue($id_greater_than_or_equal);
        }
        // query params
        if (is_array($id_in)) {
            $queryParams['id.in'] = $id_in;
        } else
        if ($id_in !== null) {
            $queryParams['id.in'] = ObjectSerializer::toQueryValue($id_in);
        }
        // query params
        if ($id_less_than !== null) {
            $queryParams['id.lessThan'] = ObjectSerializer::toQueryValue($id_less_than);
        }
        // query params
        if ($id_less_than_or_equal !== null) {
            $queryParams['id.lessThanOrEqual'] = ObjectSerializer::toQueryValue($id_less_than_or_equal);
        }
        // query params
        if ($id_not_equals !== null) {
            $queryParams['id.notEquals'] = ObjectSerializer::toQueryValue($id_not_equals);
        }
        // query params
        if ($id_specified !== null) {
            $queryParams['id.specified'] = ObjectSerializer::toQueryValue($id_specified);
        }
        // query params
        if ($linked_member_id_equals !== null) {
            $queryParams['linkedMemberId.equals'] = ObjectSerializer::toQueryValue($linked_member_id_equals);
        }
        // query params
        if ($linked_member_id_greater_than !== null) {
            $queryParams['linkedMemberId.greaterThan'] = ObjectSerializer::toQueryValue($linked_member_id_greater_than);
        }
        // query params
        if ($linked_member_id_greater_than_or_equal !== null) {
            $queryParams['linkedMemberId.greaterThanOrEqual'] = ObjectSerializer::toQueryValue($linked_member_id_greater_than_or_equal);
        }
        // query params
        if (is_array($linked_member_id_in)) {
            $queryParams['linkedMemberId.in'] = $linked_member_id_in;
        } else
        if ($linked_member_id_in !== null) {
            $queryParams['linkedMemberId.in'] = ObjectSerializer::toQueryValue($linked_member_id_in);
        }
        // query params
        if ($linked_member_id_less_than !== null) {
            $queryParams['linkedMemberId.lessThan'] = ObjectSerializer::toQueryValue($linked_member_id_less_than);
        }
        // query params
        if ($linked_member_id_less_than_or_equal !== null) {
            $queryParams['linkedMemberId.lessThanOrEqual'] = ObjectSerializer::toQueryValue($linked_member_id_less_than_or_equal);
        }
        // query params
        if ($linked_member_id_not_equals !== null) {
            $queryParams['linkedMemberId.notEquals'] = ObjectSerializer::toQueryValue($linked_member_id_not_equals);
        }
        // query params
        if ($linked_member_id_specified !== null) {
            $queryParams['linkedMemberId.specified'] = ObjectSerializer::toQueryValue($linked_member_id_specified);
        }
        // query params
        if ($principal_id_equals !== null) {
            $queryParams['principalId.equals'] = ObjectSerializer::toQueryValue($principal_id_equals);
        }
        // query params
        if ($principal_id_greater_than !== null) {
            $queryParams['principalId.greaterThan'] = ObjectSerializer::toQueryValue($principal_id_greater_than);
        }
        // query params
        if ($principal_id_greater_than_or_equal !== null) {
            $queryParams['principalId.greaterThanOrEqual'] = ObjectSerializer::toQueryValue($principal_id_greater_than_or_equal);
        }
        // query params
        if (is_array($principal_id_in)) {
            $queryParams['principalId.in'] = $principal_id_in;
        } else
        if ($principal_id_in !== null) {
            $queryParams['principalId.in'] = ObjectSerializer::toQueryValue($principal_id_in);
        }
        // query params
        if ($principal_id_less_than !== null) {
            $queryParams['principalId.lessThan'] = ObjectSerializer::toQueryValue($principal_id_less_than);
        }
        // query params
        if ($principal_id_less_than_or_equal !== null) {
            $queryParams['principalId.lessThanOrEqual'] = ObjectSerializer::toQueryValue($principal_id_less_than_or_equal);
        }
        // query params
        if ($principal_id_not_equals !== null) {
            $queryParams['principalId.notEquals'] = ObjectSerializer::toQueryValue($principal_id_not_equals);
        }
        // query params
        if ($principal_id_specified !== null) {
            $queryParams['principalId.specified'] = ObjectSerializer::toQueryValue($principal_id_specified);
        }
        // query params
        if ($type_equals !== null) {
            $queryParams['type.equals'] = ObjectSerializer::toQueryValue($type_equals);
        }
        // query params
        if (is_array($type_in)) {
            $queryParams['type.in'] = $type_in;
        } else
        if ($type_in !== null) {
            $queryParams['type.in'] = ObjectSerializer::toQueryValue($type_in);
        }
        // query params
        if ($type_not_equals !== null) {
            $queryParams['type.notEquals'] = ObjectSerializer::toQueryValue($type_not_equals);
        }
        // query params
        if ($type_specified !== null) {
            $queryParams['type.specified'] = ObjectSerializer::toQueryValue($type_specified);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createLinkedPersonUsingPOST
     *
     * createLinkedPerson
     *
     * @param  \Idealogic\MembershipAPI\Model\LinkedPersonDTO $linked_person_dto linkedPersonDTO (required)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Idealogic\MembershipAPI\Model\LinkedPersonDTO
     */
    public function createLinkedPersonUsingPOST($linked_person_dto)
    {
        list($response) = $this->createLinkedPersonUsingPOSTWithHttpInfo($linked_person_dto);
        return $response;
    }

    /**
     * Operation createLinkedPersonUsingPOSTWithHttpInfo
     *
     * createLinkedPerson
     *
     * @param  \Idealogic\MembershipAPI\Model\LinkedPersonDTO $linked_person_dto linkedPersonDTO (required)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Idealogic\MembershipAPI\Model\LinkedPersonDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLinkedPersonUsingPOSTWithHttpInfo($linked_person_dto)
    {
        $returnType = '\Idealogic\MembershipAPI\Model\LinkedPersonDTO';
        $request = $this->createLinkedPersonUsingPOSTRequest($linked_person_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Idealogic\MembershipAPI\Model\LinkedPersonDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createLinkedPersonUsingPOSTAsync
     *
     * createLinkedPerson
     *
     * @param  \Idealogic\MembershipAPI\Model\LinkedPersonDTO $linked_person_dto linkedPersonDTO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLinkedPersonUsingPOSTAsync($linked_person_dto)
    {
        return $this->createLinkedPersonUsingPOSTAsyncWithHttpInfo($linked_person_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createLinkedPersonUsingPOSTAsyncWithHttpInfo
     *
     * createLinkedPerson
     *
     * @param  \Idealogic\MembershipAPI\Model\LinkedPersonDTO $linked_person_dto linkedPersonDTO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLinkedPersonUsingPOSTAsyncWithHttpInfo($linked_person_dto)
    {
        $returnType = '\Idealogic\MembershipAPI\Model\LinkedPersonDTO';
        $request = $this->createLinkedPersonUsingPOSTRequest($linked_person_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createLinkedPersonUsingPOST'
     *
     * @param  \Idealogic\MembershipAPI\Model\LinkedPersonDTO $linked_person_dto linkedPersonDTO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createLinkedPersonUsingPOSTRequest($linked_person_dto)
    {
        // verify the required parameter 'linked_person_dto' is set
        if ($linked_person_dto === null || (is_array($linked_person_dto) && count($linked_person_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $linked_person_dto when calling createLinkedPersonUsingPOST'
            );
        }

        $resourcePath = '/api/linked-people';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($linked_person_dto)) {
            $_tempBody = $linked_person_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLinkedPersonUsingDELETE
     *
     * deleteLinkedPerson
     *
     * @param  int $id id (required)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteLinkedPersonUsingDELETE($id)
    {
        $this->deleteLinkedPersonUsingDELETEWithHttpInfo($id);
    }

    /**
     * Operation deleteLinkedPersonUsingDELETEWithHttpInfo
     *
     * deleteLinkedPerson
     *
     * @param  int $id id (required)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLinkedPersonUsingDELETEWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteLinkedPersonUsingDELETERequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLinkedPersonUsingDELETEAsync
     *
     * deleteLinkedPerson
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLinkedPersonUsingDELETEAsync($id)
    {
        return $this->deleteLinkedPersonUsingDELETEAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteLinkedPersonUsingDELETEAsyncWithHttpInfo
     *
     * deleteLinkedPerson
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLinkedPersonUsingDELETEAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteLinkedPersonUsingDELETERequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteLinkedPersonUsingDELETE'
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteLinkedPersonUsingDELETERequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteLinkedPersonUsingDELETE'
            );
        }

        $resourcePath = '/api/linked-people/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllLinkedPeopleUsingGET
     *
     * getAllLinkedPeople
     *
     * @param  int $id_equals id_equals (optional)
     * @param  int $id_greater_than id_greater_than (optional)
     * @param  int $id_greater_than_or_equal id_greater_than_or_equal (optional)
     * @param  int[] $id_in id_in (optional)
     * @param  int $id_less_than id_less_than (optional)
     * @param  int $id_less_than_or_equal id_less_than_or_equal (optional)
     * @param  int $id_not_equals id_not_equals (optional)
     * @param  bool $id_specified id_specified (optional)
     * @param  int $linked_member_id_equals linked_member_id_equals (optional)
     * @param  int $linked_member_id_greater_than linked_member_id_greater_than (optional)
     * @param  int $linked_member_id_greater_than_or_equal linked_member_id_greater_than_or_equal (optional)
     * @param  int[] $linked_member_id_in linked_member_id_in (optional)
     * @param  int $linked_member_id_less_than linked_member_id_less_than (optional)
     * @param  int $linked_member_id_less_than_or_equal linked_member_id_less_than_or_equal (optional)
     * @param  int $linked_member_id_not_equals linked_member_id_not_equals (optional)
     * @param  bool $linked_member_id_specified linked_member_id_specified (optional)
     * @param  int $page Page number of the requested page (optional)
     * @param  int $principal_id_equals principal_id_equals (optional)
     * @param  int $principal_id_greater_than principal_id_greater_than (optional)
     * @param  int $principal_id_greater_than_or_equal principal_id_greater_than_or_equal (optional)
     * @param  int[] $principal_id_in principal_id_in (optional)
     * @param  int $principal_id_less_than principal_id_less_than (optional)
     * @param  int $principal_id_less_than_or_equal principal_id_less_than_or_equal (optional)
     * @param  int $principal_id_not_equals principal_id_not_equals (optional)
     * @param  bool $principal_id_specified principal_id_specified (optional)
     * @param  int $size Size of a page (optional)
     * @param  string[] $sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @param  string $type_equals type_equals (optional)
     * @param  string[] $type_in type_in (optional)
     * @param  string $type_not_equals type_not_equals (optional)
     * @param  bool $type_specified type_specified (optional)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Idealogic\MembershipAPI\Model\LinkedPersonDTO[]
     */
    public function getAllLinkedPeopleUsingGET($id_equals = null, $id_greater_than = null, $id_greater_than_or_equal = null, $id_in = null, $id_less_than = null, $id_less_than_or_equal = null, $id_not_equals = null, $id_specified = null, $linked_member_id_equals = null, $linked_member_id_greater_than = null, $linked_member_id_greater_than_or_equal = null, $linked_member_id_in = null, $linked_member_id_less_than = null, $linked_member_id_less_than_or_equal = null, $linked_member_id_not_equals = null, $linked_member_id_specified = null, $page = null, $principal_id_equals = null, $principal_id_greater_than = null, $principal_id_greater_than_or_equal = null, $principal_id_in = null, $principal_id_less_than = null, $principal_id_less_than_or_equal = null, $principal_id_not_equals = null, $principal_id_specified = null, $size = null, $sort = null, $type_equals = null, $type_in = null, $type_not_equals = null, $type_specified = null)
    {
        list($response) = $this->getAllLinkedPeopleUsingGETWithHttpInfo($id_equals, $id_greater_than, $id_greater_than_or_equal, $id_in, $id_less_than, $id_less_than_or_equal, $id_not_equals, $id_specified, $linked_member_id_equals, $linked_member_id_greater_than, $linked_member_id_greater_than_or_equal, $linked_member_id_in, $linked_member_id_less_than, $linked_member_id_less_than_or_equal, $linked_member_id_not_equals, $linked_member_id_specified, $page, $principal_id_equals, $principal_id_greater_than, $principal_id_greater_than_or_equal, $principal_id_in, $principal_id_less_than, $principal_id_less_than_or_equal, $principal_id_not_equals, $principal_id_specified, $size, $sort, $type_equals, $type_in, $type_not_equals, $type_specified);
        return $response;
    }

    /**
     * Operation getAllLinkedPeopleUsingGETWithHttpInfo
     *
     * getAllLinkedPeople
     *
     * @param  int $id_equals (optional)
     * @param  int $id_greater_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int[] $id_in (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int $linked_member_id_equals (optional)
     * @param  int $linked_member_id_greater_than (optional)
     * @param  int $linked_member_id_greater_than_or_equal (optional)
     * @param  int[] $linked_member_id_in (optional)
     * @param  int $linked_member_id_less_than (optional)
     * @param  int $linked_member_id_less_than_or_equal (optional)
     * @param  int $linked_member_id_not_equals (optional)
     * @param  bool $linked_member_id_specified (optional)
     * @param  int $page Page number of the requested page (optional)
     * @param  int $principal_id_equals (optional)
     * @param  int $principal_id_greater_than (optional)
     * @param  int $principal_id_greater_than_or_equal (optional)
     * @param  int[] $principal_id_in (optional)
     * @param  int $principal_id_less_than (optional)
     * @param  int $principal_id_less_than_or_equal (optional)
     * @param  int $principal_id_not_equals (optional)
     * @param  bool $principal_id_specified (optional)
     * @param  int $size Size of a page (optional)
     * @param  string[] $sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @param  string $type_equals (optional)
     * @param  string[] $type_in (optional)
     * @param  string $type_not_equals (optional)
     * @param  bool $type_specified (optional)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Idealogic\MembershipAPI\Model\LinkedPersonDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllLinkedPeopleUsingGETWithHttpInfo($id_equals = null, $id_greater_than = null, $id_greater_than_or_equal = null, $id_in = null, $id_less_than = null, $id_less_than_or_equal = null, $id_not_equals = null, $id_specified = null, $linked_member_id_equals = null, $linked_member_id_greater_than = null, $linked_member_id_greater_than_or_equal = null, $linked_member_id_in = null, $linked_member_id_less_than = null, $linked_member_id_less_than_or_equal = null, $linked_member_id_not_equals = null, $linked_member_id_specified = null, $page = null, $principal_id_equals = null, $principal_id_greater_than = null, $principal_id_greater_than_or_equal = null, $principal_id_in = null, $principal_id_less_than = null, $principal_id_less_than_or_equal = null, $principal_id_not_equals = null, $principal_id_specified = null, $size = null, $sort = null, $type_equals = null, $type_in = null, $type_not_equals = null, $type_specified = null)
    {
        $returnType = '\Idealogic\MembershipAPI\Model\LinkedPersonDTO[]';
        $request = $this->getAllLinkedPeopleUsingGETRequest($id_equals, $id_greater_than, $id_greater_than_or_equal, $id_in, $id_less_than, $id_less_than_or_equal, $id_not_equals, $id_specified, $linked_member_id_equals, $linked_member_id_greater_than, $linked_member_id_greater_than_or_equal, $linked_member_id_in, $linked_member_id_less_than, $linked_member_id_less_than_or_equal, $linked_member_id_not_equals, $linked_member_id_specified, $page, $principal_id_equals, $principal_id_greater_than, $principal_id_greater_than_or_equal, $principal_id_in, $principal_id_less_than, $principal_id_less_than_or_equal, $principal_id_not_equals, $principal_id_specified, $size, $sort, $type_equals, $type_in, $type_not_equals, $type_specified);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Idealogic\MembershipAPI\Model\LinkedPersonDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllLinkedPeopleUsingGETAsync
     *
     * getAllLinkedPeople
     *
     * @param  int $id_equals (optional)
     * @param  int $id_greater_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int[] $id_in (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int $linked_member_id_equals (optional)
     * @param  int $linked_member_id_greater_than (optional)
     * @param  int $linked_member_id_greater_than_or_equal (optional)
     * @param  int[] $linked_member_id_in (optional)
     * @param  int $linked_member_id_less_than (optional)
     * @param  int $linked_member_id_less_than_or_equal (optional)
     * @param  int $linked_member_id_not_equals (optional)
     * @param  bool $linked_member_id_specified (optional)
     * @param  int $page Page number of the requested page (optional)
     * @param  int $principal_id_equals (optional)
     * @param  int $principal_id_greater_than (optional)
     * @param  int $principal_id_greater_than_or_equal (optional)
     * @param  int[] $principal_id_in (optional)
     * @param  int $principal_id_less_than (optional)
     * @param  int $principal_id_less_than_or_equal (optional)
     * @param  int $principal_id_not_equals (optional)
     * @param  bool $principal_id_specified (optional)
     * @param  int $size Size of a page (optional)
     * @param  string[] $sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @param  string $type_equals (optional)
     * @param  string[] $type_in (optional)
     * @param  string $type_not_equals (optional)
     * @param  bool $type_specified (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllLinkedPeopleUsingGETAsync($id_equals = null, $id_greater_than = null, $id_greater_than_or_equal = null, $id_in = null, $id_less_than = null, $id_less_than_or_equal = null, $id_not_equals = null, $id_specified = null, $linked_member_id_equals = null, $linked_member_id_greater_than = null, $linked_member_id_greater_than_or_equal = null, $linked_member_id_in = null, $linked_member_id_less_than = null, $linked_member_id_less_than_or_equal = null, $linked_member_id_not_equals = null, $linked_member_id_specified = null, $page = null, $principal_id_equals = null, $principal_id_greater_than = null, $principal_id_greater_than_or_equal = null, $principal_id_in = null, $principal_id_less_than = null, $principal_id_less_than_or_equal = null, $principal_id_not_equals = null, $principal_id_specified = null, $size = null, $sort = null, $type_equals = null, $type_in = null, $type_not_equals = null, $type_specified = null)
    {
        return $this->getAllLinkedPeopleUsingGETAsyncWithHttpInfo($id_equals, $id_greater_than, $id_greater_than_or_equal, $id_in, $id_less_than, $id_less_than_or_equal, $id_not_equals, $id_specified, $linked_member_id_equals, $linked_member_id_greater_than, $linked_member_id_greater_than_or_equal, $linked_member_id_in, $linked_member_id_less_than, $linked_member_id_less_than_or_equal, $linked_member_id_not_equals, $linked_member_id_specified, $page, $principal_id_equals, $principal_id_greater_than, $principal_id_greater_than_or_equal, $principal_id_in, $principal_id_less_than, $principal_id_less_than_or_equal, $principal_id_not_equals, $principal_id_specified, $size, $sort, $type_equals, $type_in, $type_not_equals, $type_specified)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllLinkedPeopleUsingGETAsyncWithHttpInfo
     *
     * getAllLinkedPeople
     *
     * @param  int $id_equals (optional)
     * @param  int $id_greater_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int[] $id_in (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int $linked_member_id_equals (optional)
     * @param  int $linked_member_id_greater_than (optional)
     * @param  int $linked_member_id_greater_than_or_equal (optional)
     * @param  int[] $linked_member_id_in (optional)
     * @param  int $linked_member_id_less_than (optional)
     * @param  int $linked_member_id_less_than_or_equal (optional)
     * @param  int $linked_member_id_not_equals (optional)
     * @param  bool $linked_member_id_specified (optional)
     * @param  int $page Page number of the requested page (optional)
     * @param  int $principal_id_equals (optional)
     * @param  int $principal_id_greater_than (optional)
     * @param  int $principal_id_greater_than_or_equal (optional)
     * @param  int[] $principal_id_in (optional)
     * @param  int $principal_id_less_than (optional)
     * @param  int $principal_id_less_than_or_equal (optional)
     * @param  int $principal_id_not_equals (optional)
     * @param  bool $principal_id_specified (optional)
     * @param  int $size Size of a page (optional)
     * @param  string[] $sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @param  string $type_equals (optional)
     * @param  string[] $type_in (optional)
     * @param  string $type_not_equals (optional)
     * @param  bool $type_specified (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllLinkedPeopleUsingGETAsyncWithHttpInfo($id_equals = null, $id_greater_than = null, $id_greater_than_or_equal = null, $id_in = null, $id_less_than = null, $id_less_than_or_equal = null, $id_not_equals = null, $id_specified = null, $linked_member_id_equals = null, $linked_member_id_greater_than = null, $linked_member_id_greater_than_or_equal = null, $linked_member_id_in = null, $linked_member_id_less_than = null, $linked_member_id_less_than_or_equal = null, $linked_member_id_not_equals = null, $linked_member_id_specified = null, $page = null, $principal_id_equals = null, $principal_id_greater_than = null, $principal_id_greater_than_or_equal = null, $principal_id_in = null, $principal_id_less_than = null, $principal_id_less_than_or_equal = null, $principal_id_not_equals = null, $principal_id_specified = null, $size = null, $sort = null, $type_equals = null, $type_in = null, $type_not_equals = null, $type_specified = null)
    {
        $returnType = '\Idealogic\MembershipAPI\Model\LinkedPersonDTO[]';
        $request = $this->getAllLinkedPeopleUsingGETRequest($id_equals, $id_greater_than, $id_greater_than_or_equal, $id_in, $id_less_than, $id_less_than_or_equal, $id_not_equals, $id_specified, $linked_member_id_equals, $linked_member_id_greater_than, $linked_member_id_greater_than_or_equal, $linked_member_id_in, $linked_member_id_less_than, $linked_member_id_less_than_or_equal, $linked_member_id_not_equals, $linked_member_id_specified, $page, $principal_id_equals, $principal_id_greater_than, $principal_id_greater_than_or_equal, $principal_id_in, $principal_id_less_than, $principal_id_less_than_or_equal, $principal_id_not_equals, $principal_id_specified, $size, $sort, $type_equals, $type_in, $type_not_equals, $type_specified);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllLinkedPeopleUsingGET'
     *
     * @param  int $id_equals (optional)
     * @param  int $id_greater_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int[] $id_in (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int $linked_member_id_equals (optional)
     * @param  int $linked_member_id_greater_than (optional)
     * @param  int $linked_member_id_greater_than_or_equal (optional)
     * @param  int[] $linked_member_id_in (optional)
     * @param  int $linked_member_id_less_than (optional)
     * @param  int $linked_member_id_less_than_or_equal (optional)
     * @param  int $linked_member_id_not_equals (optional)
     * @param  bool $linked_member_id_specified (optional)
     * @param  int $page Page number of the requested page (optional)
     * @param  int $principal_id_equals (optional)
     * @param  int $principal_id_greater_than (optional)
     * @param  int $principal_id_greater_than_or_equal (optional)
     * @param  int[] $principal_id_in (optional)
     * @param  int $principal_id_less_than (optional)
     * @param  int $principal_id_less_than_or_equal (optional)
     * @param  int $principal_id_not_equals (optional)
     * @param  bool $principal_id_specified (optional)
     * @param  int $size Size of a page (optional)
     * @param  string[] $sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @param  string $type_equals (optional)
     * @param  string[] $type_in (optional)
     * @param  string $type_not_equals (optional)
     * @param  bool $type_specified (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllLinkedPeopleUsingGETRequest($id_equals = null, $id_greater_than = null, $id_greater_than_or_equal = null, $id_in = null, $id_less_than = null, $id_less_than_or_equal = null, $id_not_equals = null, $id_specified = null, $linked_member_id_equals = null, $linked_member_id_greater_than = null, $linked_member_id_greater_than_or_equal = null, $linked_member_id_in = null, $linked_member_id_less_than = null, $linked_member_id_less_than_or_equal = null, $linked_member_id_not_equals = null, $linked_member_id_specified = null, $page = null, $principal_id_equals = null, $principal_id_greater_than = null, $principal_id_greater_than_or_equal = null, $principal_id_in = null, $principal_id_less_than = null, $principal_id_less_than_or_equal = null, $principal_id_not_equals = null, $principal_id_specified = null, $size = null, $sort = null, $type_equals = null, $type_in = null, $type_not_equals = null, $type_specified = null)
    {

        $resourcePath = '/api/linked-people';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id_equals !== null) {
            $queryParams['id.equals'] = ObjectSerializer::toQueryValue($id_equals);
        }
        // query params
        if ($id_greater_than !== null) {
            $queryParams['id.greaterThan'] = ObjectSerializer::toQueryValue($id_greater_than);
        }
        // query params
        if ($id_greater_than_or_equal !== null) {
            $queryParams['id.greaterThanOrEqual'] = ObjectSerializer::toQueryValue($id_greater_than_or_equal);
        }
        // query params
        if (is_array($id_in)) {
            $queryParams['id.in'] = $id_in;
        } else
        if ($id_in !== null) {
            $queryParams['id.in'] = ObjectSerializer::toQueryValue($id_in);
        }
        // query params
        if ($id_less_than !== null) {
            $queryParams['id.lessThan'] = ObjectSerializer::toQueryValue($id_less_than);
        }
        // query params
        if ($id_less_than_or_equal !== null) {
            $queryParams['id.lessThanOrEqual'] = ObjectSerializer::toQueryValue($id_less_than_or_equal);
        }
        // query params
        if ($id_not_equals !== null) {
            $queryParams['id.notEquals'] = ObjectSerializer::toQueryValue($id_not_equals);
        }
        // query params
        if ($id_specified !== null) {
            $queryParams['id.specified'] = ObjectSerializer::toQueryValue($id_specified);
        }
        // query params
        if ($linked_member_id_equals !== null) {
            $queryParams['linkedMemberId.equals'] = ObjectSerializer::toQueryValue($linked_member_id_equals);
        }
        // query params
        if ($linked_member_id_greater_than !== null) {
            $queryParams['linkedMemberId.greaterThan'] = ObjectSerializer::toQueryValue($linked_member_id_greater_than);
        }
        // query params
        if ($linked_member_id_greater_than_or_equal !== null) {
            $queryParams['linkedMemberId.greaterThanOrEqual'] = ObjectSerializer::toQueryValue($linked_member_id_greater_than_or_equal);
        }
        // query params
        if (is_array($linked_member_id_in)) {
            $queryParams['linkedMemberId.in'] = $linked_member_id_in;
        } else
        if ($linked_member_id_in !== null) {
            $queryParams['linkedMemberId.in'] = ObjectSerializer::toQueryValue($linked_member_id_in);
        }
        // query params
        if ($linked_member_id_less_than !== null) {
            $queryParams['linkedMemberId.lessThan'] = ObjectSerializer::toQueryValue($linked_member_id_less_than);
        }
        // query params
        if ($linked_member_id_less_than_or_equal !== null) {
            $queryParams['linkedMemberId.lessThanOrEqual'] = ObjectSerializer::toQueryValue($linked_member_id_less_than_or_equal);
        }
        // query params
        if ($linked_member_id_not_equals !== null) {
            $queryParams['linkedMemberId.notEquals'] = ObjectSerializer::toQueryValue($linked_member_id_not_equals);
        }
        // query params
        if ($linked_member_id_specified !== null) {
            $queryParams['linkedMemberId.specified'] = ObjectSerializer::toQueryValue($linked_member_id_specified);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($principal_id_equals !== null) {
            $queryParams['principalId.equals'] = ObjectSerializer::toQueryValue($principal_id_equals);
        }
        // query params
        if ($principal_id_greater_than !== null) {
            $queryParams['principalId.greaterThan'] = ObjectSerializer::toQueryValue($principal_id_greater_than);
        }
        // query params
        if ($principal_id_greater_than_or_equal !== null) {
            $queryParams['principalId.greaterThanOrEqual'] = ObjectSerializer::toQueryValue($principal_id_greater_than_or_equal);
        }
        // query params
        if (is_array($principal_id_in)) {
            $queryParams['principalId.in'] = $principal_id_in;
        } else
        if ($principal_id_in !== null) {
            $queryParams['principalId.in'] = ObjectSerializer::toQueryValue($principal_id_in);
        }
        // query params
        if ($principal_id_less_than !== null) {
            $queryParams['principalId.lessThan'] = ObjectSerializer::toQueryValue($principal_id_less_than);
        }
        // query params
        if ($principal_id_less_than_or_equal !== null) {
            $queryParams['principalId.lessThanOrEqual'] = ObjectSerializer::toQueryValue($principal_id_less_than_or_equal);
        }
        // query params
        if ($principal_id_not_equals !== null) {
            $queryParams['principalId.notEquals'] = ObjectSerializer::toQueryValue($principal_id_not_equals);
        }
        // query params
        if ($principal_id_specified !== null) {
            $queryParams['principalId.specified'] = ObjectSerializer::toQueryValue($principal_id_specified);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size);
        }
        // query params
        if (is_array($sort)) {
            $queryParams['sort'] = $sort;
        } else
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($type_equals !== null) {
            $queryParams['type.equals'] = ObjectSerializer::toQueryValue($type_equals);
        }
        // query params
        if (is_array($type_in)) {
            $queryParams['type.in'] = $type_in;
        } else
        if ($type_in !== null) {
            $queryParams['type.in'] = ObjectSerializer::toQueryValue($type_in);
        }
        // query params
        if ($type_not_equals !== null) {
            $queryParams['type.notEquals'] = ObjectSerializer::toQueryValue($type_not_equals);
        }
        // query params
        if ($type_specified !== null) {
            $queryParams['type.specified'] = ObjectSerializer::toQueryValue($type_specified);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLinkedPersonUsingGET
     *
     * getLinkedPerson
     *
     * @param  int $id id (required)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Idealogic\MembershipAPI\Model\LinkedPersonDTO
     */
    public function getLinkedPersonUsingGET($id)
    {
        list($response) = $this->getLinkedPersonUsingGETWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getLinkedPersonUsingGETWithHttpInfo
     *
     * getLinkedPerson
     *
     * @param  int $id id (required)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Idealogic\MembershipAPI\Model\LinkedPersonDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLinkedPersonUsingGETWithHttpInfo($id)
    {
        $returnType = '\Idealogic\MembershipAPI\Model\LinkedPersonDTO';
        $request = $this->getLinkedPersonUsingGETRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Idealogic\MembershipAPI\Model\LinkedPersonDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLinkedPersonUsingGETAsync
     *
     * getLinkedPerson
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLinkedPersonUsingGETAsync($id)
    {
        return $this->getLinkedPersonUsingGETAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLinkedPersonUsingGETAsyncWithHttpInfo
     *
     * getLinkedPerson
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLinkedPersonUsingGETAsyncWithHttpInfo($id)
    {
        $returnType = '\Idealogic\MembershipAPI\Model\LinkedPersonDTO';
        $request = $this->getLinkedPersonUsingGETRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLinkedPersonUsingGET'
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLinkedPersonUsingGETRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getLinkedPersonUsingGET'
            );
        }

        $resourcePath = '/api/linked-people/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLinkedPersonUsingPUT
     *
     * updateLinkedPerson
     *
     * @param  \Idealogic\MembershipAPI\Model\LinkedPersonDTO $linked_person_dto linkedPersonDTO (required)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Idealogic\MembershipAPI\Model\LinkedPersonDTO
     */
    public function updateLinkedPersonUsingPUT($linked_person_dto)
    {
        list($response) = $this->updateLinkedPersonUsingPUTWithHttpInfo($linked_person_dto);
        return $response;
    }

    /**
     * Operation updateLinkedPersonUsingPUTWithHttpInfo
     *
     * updateLinkedPerson
     *
     * @param  \Idealogic\MembershipAPI\Model\LinkedPersonDTO $linked_person_dto linkedPersonDTO (required)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Idealogic\MembershipAPI\Model\LinkedPersonDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLinkedPersonUsingPUTWithHttpInfo($linked_person_dto)
    {
        $returnType = '\Idealogic\MembershipAPI\Model\LinkedPersonDTO';
        $request = $this->updateLinkedPersonUsingPUTRequest($linked_person_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Idealogic\MembershipAPI\Model\LinkedPersonDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLinkedPersonUsingPUTAsync
     *
     * updateLinkedPerson
     *
     * @param  \Idealogic\MembershipAPI\Model\LinkedPersonDTO $linked_person_dto linkedPersonDTO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLinkedPersonUsingPUTAsync($linked_person_dto)
    {
        return $this->updateLinkedPersonUsingPUTAsyncWithHttpInfo($linked_person_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateLinkedPersonUsingPUTAsyncWithHttpInfo
     *
     * updateLinkedPerson
     *
     * @param  \Idealogic\MembershipAPI\Model\LinkedPersonDTO $linked_person_dto linkedPersonDTO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLinkedPersonUsingPUTAsyncWithHttpInfo($linked_person_dto)
    {
        $returnType = '\Idealogic\MembershipAPI\Model\LinkedPersonDTO';
        $request = $this->updateLinkedPersonUsingPUTRequest($linked_person_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateLinkedPersonUsingPUT'
     *
     * @param  \Idealogic\MembershipAPI\Model\LinkedPersonDTO $linked_person_dto linkedPersonDTO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLinkedPersonUsingPUTRequest($linked_person_dto)
    {
        // verify the required parameter 'linked_person_dto' is set
        if ($linked_person_dto === null || (is_array($linked_person_dto) && count($linked_person_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $linked_person_dto when calling updateLinkedPersonUsingPUT'
            );
        }

        $resourcePath = '/api/linked-people';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($linked_person_dto)) {
            $_tempBody = $linked_person_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
