<?php
/**
 * MembershipStatusDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Idealogic\MembershipAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Idealogic\MembershipAPI\Model;

use \ArrayAccess;
use \Idealogic\MembershipAPI\ObjectSerializer;

/**
 * MembershipStatusDTO Class Doc Comment
 *
 * @category Class
 * @package  Idealogic\MembershipAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MembershipStatusDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MembershipStatusDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'person_id' => 'int',
        'name' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'main_member' => 'bool',
        'date_of_birth' => '\DateTime',
        'membership_id' => 'int',
        'number_id' => 'int',
        'number_type_id' => 'int',
        'membership_number' => 'string',
        'membership_type_id' => 'int',
        'membership_type_name' => 'string',
        'period_id' => 'int',
        'period_name' => 'string',
        'criteria_id' => 'int',
        'criteria_name' => 'string',
        'product_id' => 'int',
        'product_external_id' => 'string',
        'product_amount' => 'float',
        'product_name' => 'string',
        'valid_from' => '\DateTime',
        'valid_to' => '\DateTime',
        'membership_status' => 'string',
        'updated_details' => 'bool',
        'order_id' => 'int',
        'order_external_id' => 'string',
        'order_status' => 'string',
        'message' => 'string',
        'renew_period_id' => 'int',
        'renew_period_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'person_id' => 'int64',
        'name' => null,
        'first_name' => null,
        'last_name' => null,
        'main_member' => null,
        'date_of_birth' => 'date',
        'membership_id' => 'int64',
        'number_id' => 'int64',
        'number_type_id' => 'int64',
        'membership_number' => null,
        'membership_type_id' => 'int64',
        'membership_type_name' => null,
        'period_id' => 'int64',
        'period_name' => null,
        'criteria_id' => 'int64',
        'criteria_name' => null,
        'product_id' => 'int64',
        'product_external_id' => null,
        'product_amount' => null,
        'product_name' => null,
        'valid_from' => 'date',
        'valid_to' => 'date',
        'membership_status' => null,
        'updated_details' => null,
        'order_id' => 'int64',
        'order_external_id' => null,
        'order_status' => null,
        'message' => null,
        'renew_period_id' => 'int64',
        'renew_period_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'person_id' => false,
        'name' => false,
        'first_name' => false,
        'last_name' => false,
        'main_member' => false,
        'date_of_birth' => false,
        'membership_id' => false,
        'number_id' => false,
        'number_type_id' => false,
        'membership_number' => false,
        'membership_type_id' => false,
        'membership_type_name' => false,
        'period_id' => false,
        'period_name' => false,
        'criteria_id' => false,
        'criteria_name' => false,
        'product_id' => false,
        'product_external_id' => false,
        'product_amount' => false,
        'product_name' => false,
        'valid_from' => false,
        'valid_to' => false,
        'membership_status' => false,
        'updated_details' => false,
        'order_id' => false,
        'order_external_id' => false,
        'order_status' => false,
        'message' => false,
        'renew_period_id' => false,
        'renew_period_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'person_id' => 'personId',
        'name' => 'name',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'main_member' => 'mainMember',
        'date_of_birth' => 'dateOfBirth',
        'membership_id' => 'membershipId',
        'number_id' => 'numberId',
        'number_type_id' => 'numberTypeId',
        'membership_number' => 'membershipNumber',
        'membership_type_id' => 'membershipTypeId',
        'membership_type_name' => 'membershipTypeName',
        'period_id' => 'periodId',
        'period_name' => 'periodName',
        'criteria_id' => 'criteriaId',
        'criteria_name' => 'criteriaName',
        'product_id' => 'productId',
        'product_external_id' => 'productExternalId',
        'product_amount' => 'productAmount',
        'product_name' => 'productName',
        'valid_from' => 'validFrom',
        'valid_to' => 'validTo',
        'membership_status' => 'membershipStatus',
        'updated_details' => 'updatedDetails',
        'order_id' => 'orderId',
        'order_external_id' => 'orderExternalId',
        'order_status' => 'orderStatus',
        'message' => 'message',
        'renew_period_id' => 'renewPeriodId',
        'renew_period_name' => 'renewPeriodName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'person_id' => 'setPersonId',
        'name' => 'setName',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'main_member' => 'setMainMember',
        'date_of_birth' => 'setDateOfBirth',
        'membership_id' => 'setMembershipId',
        'number_id' => 'setNumberId',
        'number_type_id' => 'setNumberTypeId',
        'membership_number' => 'setMembershipNumber',
        'membership_type_id' => 'setMembershipTypeId',
        'membership_type_name' => 'setMembershipTypeName',
        'period_id' => 'setPeriodId',
        'period_name' => 'setPeriodName',
        'criteria_id' => 'setCriteriaId',
        'criteria_name' => 'setCriteriaName',
        'product_id' => 'setProductId',
        'product_external_id' => 'setProductExternalId',
        'product_amount' => 'setProductAmount',
        'product_name' => 'setProductName',
        'valid_from' => 'setValidFrom',
        'valid_to' => 'setValidTo',
        'membership_status' => 'setMembershipStatus',
        'updated_details' => 'setUpdatedDetails',
        'order_id' => 'setOrderId',
        'order_external_id' => 'setOrderExternalId',
        'order_status' => 'setOrderStatus',
        'message' => 'setMessage',
        'renew_period_id' => 'setRenewPeriodId',
        'renew_period_name' => 'setRenewPeriodName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'person_id' => 'getPersonId',
        'name' => 'getName',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'main_member' => 'getMainMember',
        'date_of_birth' => 'getDateOfBirth',
        'membership_id' => 'getMembershipId',
        'number_id' => 'getNumberId',
        'number_type_id' => 'getNumberTypeId',
        'membership_number' => 'getMembershipNumber',
        'membership_type_id' => 'getMembershipTypeId',
        'membership_type_name' => 'getMembershipTypeName',
        'period_id' => 'getPeriodId',
        'period_name' => 'getPeriodName',
        'criteria_id' => 'getCriteriaId',
        'criteria_name' => 'getCriteriaName',
        'product_id' => 'getProductId',
        'product_external_id' => 'getProductExternalId',
        'product_amount' => 'getProductAmount',
        'product_name' => 'getProductName',
        'valid_from' => 'getValidFrom',
        'valid_to' => 'getValidTo',
        'membership_status' => 'getMembershipStatus',
        'updated_details' => 'getUpdatedDetails',
        'order_id' => 'getOrderId',
        'order_external_id' => 'getOrderExternalId',
        'order_status' => 'getOrderStatus',
        'message' => 'getMessage',
        'renew_period_id' => 'getRenewPeriodId',
        'renew_period_name' => 'getRenewPeriodName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const MEMBERSHIP_STATUS_DRAFT = 'DRAFT';
    public const MEMBERSHIP_STATUS_PENDING = 'PENDING';
    public const MEMBERSHIP_STATUS_ACTIVE = 'ACTIVE';
    public const MEMBERSHIP_STATUS_REVOKED = 'REVOKED';
    public const MEMBERSHIP_STATUS_EXPIRED = 'EXPIRED';
    public const ORDER_STATUS_PENDING = 'PENDING';
    public const ORDER_STATUS_PAID = 'PAID';
    public const ORDER_STATUS_REFUNDED = 'REFUNDED';
    public const ORDER_STATUS_CANCELLED = 'CANCELLED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMembershipStatusAllowableValues()
    {
        return [
            self::MEMBERSHIP_STATUS_DRAFT,
            self::MEMBERSHIP_STATUS_PENDING,
            self::MEMBERSHIP_STATUS_ACTIVE,
            self::MEMBERSHIP_STATUS_REVOKED,
            self::MEMBERSHIP_STATUS_EXPIRED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderStatusAllowableValues()
    {
        return [
            self::ORDER_STATUS_PENDING,
            self::ORDER_STATUS_PAID,
            self::ORDER_STATUS_REFUNDED,
            self::ORDER_STATUS_CANCELLED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('person_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('main_member', $data ?? [], null);
        $this->setIfExists('date_of_birth', $data ?? [], null);
        $this->setIfExists('membership_id', $data ?? [], null);
        $this->setIfExists('number_id', $data ?? [], null);
        $this->setIfExists('number_type_id', $data ?? [], null);
        $this->setIfExists('membership_number', $data ?? [], null);
        $this->setIfExists('membership_type_id', $data ?? [], null);
        $this->setIfExists('membership_type_name', $data ?? [], null);
        $this->setIfExists('period_id', $data ?? [], null);
        $this->setIfExists('period_name', $data ?? [], null);
        $this->setIfExists('criteria_id', $data ?? [], null);
        $this->setIfExists('criteria_name', $data ?? [], null);
        $this->setIfExists('product_id', $data ?? [], null);
        $this->setIfExists('product_external_id', $data ?? [], null);
        $this->setIfExists('product_amount', $data ?? [], null);
        $this->setIfExists('product_name', $data ?? [], null);
        $this->setIfExists('valid_from', $data ?? [], null);
        $this->setIfExists('valid_to', $data ?? [], null);
        $this->setIfExists('membership_status', $data ?? [], null);
        $this->setIfExists('updated_details', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('order_external_id', $data ?? [], null);
        $this->setIfExists('order_status', $data ?? [], null);
        $this->setIfExists('message', $data ?? [], null);
        $this->setIfExists('renew_period_id', $data ?? [], null);
        $this->setIfExists('renew_period_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMembershipStatusAllowableValues();
        if (!is_null($this->container['membership_status']) && !in_array($this->container['membership_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'membership_status', must be one of '%s'",
                $this->container['membership_status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOrderStatusAllowableValues();
        if (!is_null($this->container['order_status']) && !in_array($this->container['order_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'order_status', must be one of '%s'",
                $this->container['order_status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets person_id
     *
     * @return int|null
     */
    public function getPersonId()
    {
        return $this->container['person_id'];
    }

    /**
     * Sets person_id
     *
     * @param int|null $person_id person_id
     *
     * @return self
     */
    public function setPersonId($person_id)
    {
        if (is_null($person_id)) {
            throw new \InvalidArgumentException('non-nullable person_id cannot be null');
        }
        $this->container['person_id'] = $person_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets main_member
     *
     * @return bool|null
     */
    public function getMainMember()
    {
        return $this->container['main_member'];
    }

    /**
     * Sets main_member
     *
     * @param bool|null $main_member main_member
     *
     * @return self
     */
    public function setMainMember($main_member)
    {
        if (is_null($main_member)) {
            throw new \InvalidArgumentException('non-nullable main_member cannot be null');
        }
        $this->container['main_member'] = $main_member;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return \DateTime|null
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param \DateTime|null $date_of_birth date_of_birth
     *
     * @return self
     */
    public function setDateOfBirth($date_of_birth)
    {
        if (is_null($date_of_birth)) {
            throw new \InvalidArgumentException('non-nullable date_of_birth cannot be null');
        }
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets membership_id
     *
     * @return int|null
     */
    public function getMembershipId()
    {
        return $this->container['membership_id'];
    }

    /**
     * Sets membership_id
     *
     * @param int|null $membership_id membership_id
     *
     * @return self
     */
    public function setMembershipId($membership_id)
    {
        if (is_null($membership_id)) {
            throw new \InvalidArgumentException('non-nullable membership_id cannot be null');
        }
        $this->container['membership_id'] = $membership_id;

        return $this;
    }

    /**
     * Gets number_id
     *
     * @return int|null
     */
    public function getNumberId()
    {
        return $this->container['number_id'];
    }

    /**
     * Sets number_id
     *
     * @param int|null $number_id number_id
     *
     * @return self
     */
    public function setNumberId($number_id)
    {
        if (is_null($number_id)) {
            throw new \InvalidArgumentException('non-nullable number_id cannot be null');
        }
        $this->container['number_id'] = $number_id;

        return $this;
    }

    /**
     * Gets number_type_id
     *
     * @return int|null
     */
    public function getNumberTypeId()
    {
        return $this->container['number_type_id'];
    }

    /**
     * Sets number_type_id
     *
     * @param int|null $number_type_id number_type_id
     *
     * @return self
     */
    public function setNumberTypeId($number_type_id)
    {
        if (is_null($number_type_id)) {
            throw new \InvalidArgumentException('non-nullable number_type_id cannot be null');
        }
        $this->container['number_type_id'] = $number_type_id;

        return $this;
    }

    /**
     * Gets membership_number
     *
     * @return string|null
     */
    public function getMembershipNumber()
    {
        return $this->container['membership_number'];
    }

    /**
     * Sets membership_number
     *
     * @param string|null $membership_number membership_number
     *
     * @return self
     */
    public function setMembershipNumber($membership_number)
    {
        if (is_null($membership_number)) {
            throw new \InvalidArgumentException('non-nullable membership_number cannot be null');
        }
        $this->container['membership_number'] = $membership_number;

        return $this;
    }

    /**
     * Gets membership_type_id
     *
     * @return int|null
     */
    public function getMembershipTypeId()
    {
        return $this->container['membership_type_id'];
    }

    /**
     * Sets membership_type_id
     *
     * @param int|null $membership_type_id membership_type_id
     *
     * @return self
     */
    public function setMembershipTypeId($membership_type_id)
    {
        if (is_null($membership_type_id)) {
            throw new \InvalidArgumentException('non-nullable membership_type_id cannot be null');
        }
        $this->container['membership_type_id'] = $membership_type_id;

        return $this;
    }

    /**
     * Gets membership_type_name
     *
     * @return string|null
     */
    public function getMembershipTypeName()
    {
        return $this->container['membership_type_name'];
    }

    /**
     * Sets membership_type_name
     *
     * @param string|null $membership_type_name membership_type_name
     *
     * @return self
     */
    public function setMembershipTypeName($membership_type_name)
    {
        if (is_null($membership_type_name)) {
            throw new \InvalidArgumentException('non-nullable membership_type_name cannot be null');
        }
        $this->container['membership_type_name'] = $membership_type_name;

        return $this;
    }

    /**
     * Gets period_id
     *
     * @return int|null
     */
    public function getPeriodId()
    {
        return $this->container['period_id'];
    }

    /**
     * Sets period_id
     *
     * @param int|null $period_id period_id
     *
     * @return self
     */
    public function setPeriodId($period_id)
    {
        if (is_null($period_id)) {
            throw new \InvalidArgumentException('non-nullable period_id cannot be null');
        }
        $this->container['period_id'] = $period_id;

        return $this;
    }

    /**
     * Gets period_name
     *
     * @return string|null
     */
    public function getPeriodName()
    {
        return $this->container['period_name'];
    }

    /**
     * Sets period_name
     *
     * @param string|null $period_name period_name
     *
     * @return self
     */
    public function setPeriodName($period_name)
    {
        if (is_null($period_name)) {
            throw new \InvalidArgumentException('non-nullable period_name cannot be null');
        }
        $this->container['period_name'] = $period_name;

        return $this;
    }

    /**
     * Gets criteria_id
     *
     * @return int|null
     */
    public function getCriteriaId()
    {
        return $this->container['criteria_id'];
    }

    /**
     * Sets criteria_id
     *
     * @param int|null $criteria_id criteria_id
     *
     * @return self
     */
    public function setCriteriaId($criteria_id)
    {
        if (is_null($criteria_id)) {
            throw new \InvalidArgumentException('non-nullable criteria_id cannot be null');
        }
        $this->container['criteria_id'] = $criteria_id;

        return $this;
    }

    /**
     * Gets criteria_name
     *
     * @return string|null
     */
    public function getCriteriaName()
    {
        return $this->container['criteria_name'];
    }

    /**
     * Sets criteria_name
     *
     * @param string|null $criteria_name criteria_name
     *
     * @return self
     */
    public function setCriteriaName($criteria_name)
    {
        if (is_null($criteria_name)) {
            throw new \InvalidArgumentException('non-nullable criteria_name cannot be null');
        }
        $this->container['criteria_name'] = $criteria_name;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return int|null
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param int|null $product_id product_id
     *
     * @return self
     */
    public function setProductId($product_id)
    {
        if (is_null($product_id)) {
            throw new \InvalidArgumentException('non-nullable product_id cannot be null');
        }
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets product_external_id
     *
     * @return string|null
     */
    public function getProductExternalId()
    {
        return $this->container['product_external_id'];
    }

    /**
     * Sets product_external_id
     *
     * @param string|null $product_external_id product_external_id
     *
     * @return self
     */
    public function setProductExternalId($product_external_id)
    {
        if (is_null($product_external_id)) {
            throw new \InvalidArgumentException('non-nullable product_external_id cannot be null');
        }
        $this->container['product_external_id'] = $product_external_id;

        return $this;
    }

    /**
     * Gets product_amount
     *
     * @return float|null
     */
    public function getProductAmount()
    {
        return $this->container['product_amount'];
    }

    /**
     * Sets product_amount
     *
     * @param float|null $product_amount product_amount
     *
     * @return self
     */
    public function setProductAmount($product_amount)
    {
        if (is_null($product_amount)) {
            throw new \InvalidArgumentException('non-nullable product_amount cannot be null');
        }
        $this->container['product_amount'] = $product_amount;

        return $this;
    }

    /**
     * Gets product_name
     *
     * @return string|null
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     *
     * @param string|null $product_name product_name
     *
     * @return self
     */
    public function setProductName($product_name)
    {
        if (is_null($product_name)) {
            throw new \InvalidArgumentException('non-nullable product_name cannot be null');
        }
        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets valid_from
     *
     * @return \DateTime|null
     */
    public function getValidFrom()
    {
        return $this->container['valid_from'];
    }

    /**
     * Sets valid_from
     *
     * @param \DateTime|null $valid_from valid_from
     *
     * @return self
     */
    public function setValidFrom($valid_from)
    {
        if (is_null($valid_from)) {
            throw new \InvalidArgumentException('non-nullable valid_from cannot be null');
        }
        $this->container['valid_from'] = $valid_from;

        return $this;
    }

    /**
     * Gets valid_to
     *
     * @return \DateTime|null
     */
    public function getValidTo()
    {
        return $this->container['valid_to'];
    }

    /**
     * Sets valid_to
     *
     * @param \DateTime|null $valid_to valid_to
     *
     * @return self
     */
    public function setValidTo($valid_to)
    {
        if (is_null($valid_to)) {
            throw new \InvalidArgumentException('non-nullable valid_to cannot be null');
        }
        $this->container['valid_to'] = $valid_to;

        return $this;
    }

    /**
     * Gets membership_status
     *
     * @return string|null
     */
    public function getMembershipStatus()
    {
        return $this->container['membership_status'];
    }

    /**
     * Sets membership_status
     *
     * @param string|null $membership_status membership_status
     *
     * @return self
     */
    public function setMembershipStatus($membership_status)
    {
        if (is_null($membership_status)) {
            throw new \InvalidArgumentException('non-nullable membership_status cannot be null');
        }
        $allowedValues = $this->getMembershipStatusAllowableValues();
        if (!in_array($membership_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'membership_status', must be one of '%s'",
                    $membership_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['membership_status'] = $membership_status;

        return $this;
    }

    /**
     * Gets updated_details
     *
     * @return bool|null
     */
    public function getUpdatedDetails()
    {
        return $this->container['updated_details'];
    }

    /**
     * Sets updated_details
     *
     * @param bool|null $updated_details updated_details
     *
     * @return self
     */
    public function setUpdatedDetails($updated_details)
    {
        if (is_null($updated_details)) {
            throw new \InvalidArgumentException('non-nullable updated_details cannot be null');
        }
        $this->container['updated_details'] = $updated_details;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return int|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int|null $order_id order_id
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            throw new \InvalidArgumentException('non-nullable order_id cannot be null');
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets order_external_id
     *
     * @return string|null
     */
    public function getOrderExternalId()
    {
        return $this->container['order_external_id'];
    }

    /**
     * Sets order_external_id
     *
     * @param string|null $order_external_id order_external_id
     *
     * @return self
     */
    public function setOrderExternalId($order_external_id)
    {
        if (is_null($order_external_id)) {
            throw new \InvalidArgumentException('non-nullable order_external_id cannot be null');
        }
        $this->container['order_external_id'] = $order_external_id;

        return $this;
    }

    /**
     * Gets order_status
     *
     * @return string|null
     */
    public function getOrderStatus()
    {
        return $this->container['order_status'];
    }

    /**
     * Sets order_status
     *
     * @param string|null $order_status order_status
     *
     * @return self
     */
    public function setOrderStatus($order_status)
    {
        if (is_null($order_status)) {
            throw new \InvalidArgumentException('non-nullable order_status cannot be null');
        }
        $allowedValues = $this->getOrderStatusAllowableValues();
        if (!in_array($order_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'order_status', must be one of '%s'",
                    $order_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['order_status'] = $order_status;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message message
     *
     * @return self
     */
    public function setMessage($message)
    {
        if (is_null($message)) {
            throw new \InvalidArgumentException('non-nullable message cannot be null');
        }
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets renew_period_id
     *
     * @return int|null
     */
    public function getRenewPeriodId()
    {
        return $this->container['renew_period_id'];
    }

    /**
     * Sets renew_period_id
     *
     * @param int|null $renew_period_id renew_period_id
     *
     * @return self
     */
    public function setRenewPeriodId($renew_period_id)
    {
        if (is_null($renew_period_id)) {
            throw new \InvalidArgumentException('non-nullable renew_period_id cannot be null');
        }
        $this->container['renew_period_id'] = $renew_period_id;

        return $this;
    }

    /**
     * Gets renew_period_name
     *
     * @return string|null
     */
    public function getRenewPeriodName()
    {
        return $this->container['renew_period_name'];
    }

    /**
     * Sets renew_period_name
     *
     * @param string|null $renew_period_name renew_period_name
     *
     * @return self
     */
    public function setRenewPeriodName($renew_period_name)
    {
        if (is_null($renew_period_name)) {
            throw new \InvalidArgumentException('non-nullable renew_period_name cannot be null');
        }
        $this->container['renew_period_name'] = $renew_period_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


