<?php
/**
 * PersonDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Idealogic\MembershipAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Idealogic\MembershipAPI\Model;

use \ArrayAccess;
use \Idealogic\MembershipAPI\ObjectSerializer;

/**
 * PersonDTO Class Doc Comment
 *
 * @category Class
 * @description Represents a natural person. A person form the basis for a participant or an authenticated user.
 * @package  Idealogic\MembershipAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PersonDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PersonDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'title' => 'string',
        'identity_number' => 'string',
        'identity_type' => 'string',
        'email' => 'string',
        'date_of_birth' => '\DateTime',
        'gender' => 'string',
        'contact_number' => 'string',
        'language' => 'string',
        'emergency_contact_name' => 'string',
        'emergency_contact_number' => 'string',
        'emergency_relationship' => 'string',
        'parent_contact_name' => 'string',
        'parent_contact_number' => 'string',
        'parent_contact_email' => 'string',
        'parent_relationship' => 'string',
        'parent_type' => 'string',
        'doctor_name' => 'string',
        'doctor_contact_number' => 'string',
        'scheme_name' => 'string',
        'scheme_policy_number' => 'string',
        'scheme_principal' => 'string',
        'medical_allergies' => 'string',
        'medication' => 'string',
        'medical_conditions' => 'string',
        'identity_country' => '\Idealogic\MembershipAPI\Model\CountryDTO',
        'nationality' => '\Idealogic\MembershipAPI\Model\CountryDTO',
        'user_id' => 'string',
        'validation_errors' => 'bool',
        'identity_number_invalid' => 'bool',
        'identity_country_invalid' => 'bool',
        'date_of_birth_invalid' => 'bool',
        'gender_invalid' => 'bool',
        'managed_by' => '\Idealogic\MembershipAPI\Model\PersonSummaryDTO[]',
        'add_managed_by' => 'int',
        'add_managed_by_type' => 'string',
        'identity_country_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'name' => null,
        'first_name' => null,
        'last_name' => null,
        'title' => null,
        'identity_number' => null,
        'identity_type' => null,
        'email' => null,
        'date_of_birth' => 'date',
        'gender' => null,
        'contact_number' => null,
        'language' => null,
        'emergency_contact_name' => null,
        'emergency_contact_number' => null,
        'emergency_relationship' => null,
        'parent_contact_name' => null,
        'parent_contact_number' => null,
        'parent_contact_email' => null,
        'parent_relationship' => null,
        'parent_type' => null,
        'doctor_name' => null,
        'doctor_contact_number' => null,
        'scheme_name' => null,
        'scheme_policy_number' => null,
        'scheme_principal' => null,
        'medical_allergies' => null,
        'medication' => null,
        'medical_conditions' => null,
        'identity_country' => null,
        'nationality' => null,
        'user_id' => null,
        'validation_errors' => null,
        'identity_number_invalid' => null,
        'identity_country_invalid' => null,
        'date_of_birth_invalid' => null,
        'gender_invalid' => null,
        'managed_by' => null,
        'add_managed_by' => 'int64',
        'add_managed_by_type' => null,
        'identity_country_code' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'first_name' => false,
        'last_name' => false,
        'title' => false,
        'identity_number' => false,
        'identity_type' => false,
        'email' => false,
        'date_of_birth' => false,
        'gender' => false,
        'contact_number' => false,
        'language' => false,
        'emergency_contact_name' => false,
        'emergency_contact_number' => false,
        'emergency_relationship' => false,
        'parent_contact_name' => false,
        'parent_contact_number' => false,
        'parent_contact_email' => false,
        'parent_relationship' => false,
        'parent_type' => false,
        'doctor_name' => false,
        'doctor_contact_number' => false,
        'scheme_name' => false,
        'scheme_policy_number' => false,
        'scheme_principal' => false,
        'medical_allergies' => false,
        'medication' => false,
        'medical_conditions' => false,
        'identity_country' => false,
        'nationality' => false,
        'user_id' => false,
        'validation_errors' => false,
        'identity_number_invalid' => false,
        'identity_country_invalid' => false,
        'date_of_birth_invalid' => false,
        'gender_invalid' => false,
        'managed_by' => false,
        'add_managed_by' => false,
        'add_managed_by_type' => false,
        'identity_country_code' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'title' => 'title',
        'identity_number' => 'identityNumber',
        'identity_type' => 'identityType',
        'email' => 'email',
        'date_of_birth' => 'dateOfBirth',
        'gender' => 'gender',
        'contact_number' => 'contactNumber',
        'language' => 'language',
        'emergency_contact_name' => 'emergencyContactName',
        'emergency_contact_number' => 'emergencyContactNumber',
        'emergency_relationship' => 'emergencyRelationship',
        'parent_contact_name' => 'parentContactName',
        'parent_contact_number' => 'parentContactNumber',
        'parent_contact_email' => 'parentContactEmail',
        'parent_relationship' => 'parentRelationship',
        'parent_type' => 'parentType',
        'doctor_name' => 'doctorName',
        'doctor_contact_number' => 'doctorContactNumber',
        'scheme_name' => 'schemeName',
        'scheme_policy_number' => 'schemePolicyNumber',
        'scheme_principal' => 'schemePrincipal',
        'medical_allergies' => 'medicalAllergies',
        'medication' => 'medication',
        'medical_conditions' => 'medicalConditions',
        'identity_country' => 'identityCountry',
        'nationality' => 'nationality',
        'user_id' => 'userId',
        'validation_errors' => 'validationErrors',
        'identity_number_invalid' => 'identityNumberInvalid',
        'identity_country_invalid' => 'identityCountryInvalid',
        'date_of_birth_invalid' => 'dateOfBirthInvalid',
        'gender_invalid' => 'genderInvalid',
        'managed_by' => 'managedBy',
        'add_managed_by' => 'addManagedBy',
        'add_managed_by_type' => 'addManagedByType',
        'identity_country_code' => 'identityCountryCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'title' => 'setTitle',
        'identity_number' => 'setIdentityNumber',
        'identity_type' => 'setIdentityType',
        'email' => 'setEmail',
        'date_of_birth' => 'setDateOfBirth',
        'gender' => 'setGender',
        'contact_number' => 'setContactNumber',
        'language' => 'setLanguage',
        'emergency_contact_name' => 'setEmergencyContactName',
        'emergency_contact_number' => 'setEmergencyContactNumber',
        'emergency_relationship' => 'setEmergencyRelationship',
        'parent_contact_name' => 'setParentContactName',
        'parent_contact_number' => 'setParentContactNumber',
        'parent_contact_email' => 'setParentContactEmail',
        'parent_relationship' => 'setParentRelationship',
        'parent_type' => 'setParentType',
        'doctor_name' => 'setDoctorName',
        'doctor_contact_number' => 'setDoctorContactNumber',
        'scheme_name' => 'setSchemeName',
        'scheme_policy_number' => 'setSchemePolicyNumber',
        'scheme_principal' => 'setSchemePrincipal',
        'medical_allergies' => 'setMedicalAllergies',
        'medication' => 'setMedication',
        'medical_conditions' => 'setMedicalConditions',
        'identity_country' => 'setIdentityCountry',
        'nationality' => 'setNationality',
        'user_id' => 'setUserId',
        'validation_errors' => 'setValidationErrors',
        'identity_number_invalid' => 'setIdentityNumberInvalid',
        'identity_country_invalid' => 'setIdentityCountryInvalid',
        'date_of_birth_invalid' => 'setDateOfBirthInvalid',
        'gender_invalid' => 'setGenderInvalid',
        'managed_by' => 'setManagedBy',
        'add_managed_by' => 'setAddManagedBy',
        'add_managed_by_type' => 'setAddManagedByType',
        'identity_country_code' => 'setIdentityCountryCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'title' => 'getTitle',
        'identity_number' => 'getIdentityNumber',
        'identity_type' => 'getIdentityType',
        'email' => 'getEmail',
        'date_of_birth' => 'getDateOfBirth',
        'gender' => 'getGender',
        'contact_number' => 'getContactNumber',
        'language' => 'getLanguage',
        'emergency_contact_name' => 'getEmergencyContactName',
        'emergency_contact_number' => 'getEmergencyContactNumber',
        'emergency_relationship' => 'getEmergencyRelationship',
        'parent_contact_name' => 'getParentContactName',
        'parent_contact_number' => 'getParentContactNumber',
        'parent_contact_email' => 'getParentContactEmail',
        'parent_relationship' => 'getParentRelationship',
        'parent_type' => 'getParentType',
        'doctor_name' => 'getDoctorName',
        'doctor_contact_number' => 'getDoctorContactNumber',
        'scheme_name' => 'getSchemeName',
        'scheme_policy_number' => 'getSchemePolicyNumber',
        'scheme_principal' => 'getSchemePrincipal',
        'medical_allergies' => 'getMedicalAllergies',
        'medication' => 'getMedication',
        'medical_conditions' => 'getMedicalConditions',
        'identity_country' => 'getIdentityCountry',
        'nationality' => 'getNationality',
        'user_id' => 'getUserId',
        'validation_errors' => 'getValidationErrors',
        'identity_number_invalid' => 'getIdentityNumberInvalid',
        'identity_country_invalid' => 'getIdentityCountryInvalid',
        'date_of_birth_invalid' => 'getDateOfBirthInvalid',
        'gender_invalid' => 'getGenderInvalid',
        'managed_by' => 'getManagedBy',
        'add_managed_by' => 'getAddManagedBy',
        'add_managed_by_type' => 'getAddManagedByType',
        'identity_country_code' => 'getIdentityCountryCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const IDENTITY_TYPE_NATIONAL = 'NATIONAL';
    public const IDENTITY_TYPE_PASSPORT = 'PASSPORT';
    public const IDENTITY_TYPE_OTHER = 'OTHER';
    public const GENDER_UNKNOWN = 'UNKNOWN';
    public const GENDER_MALE = 'MALE';
    public const GENDER_FEMALE = 'FEMALE';
    public const ADD_MANAGED_BY_TYPE_NONE = 'NONE';
    public const ADD_MANAGED_BY_TYPE_GENERAL = 'GENERAL';
    public const ADD_MANAGED_BY_TYPE_GUARDIAN = 'GUARDIAN';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIdentityTypeAllowableValues()
    {
        return [
            self::IDENTITY_TYPE_NATIONAL,
            self::IDENTITY_TYPE_PASSPORT,
            self::IDENTITY_TYPE_OTHER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGenderAllowableValues()
    {
        return [
            self::GENDER_UNKNOWN,
            self::GENDER_MALE,
            self::GENDER_FEMALE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAddManagedByTypeAllowableValues()
    {
        return [
            self::ADD_MANAGED_BY_TYPE_NONE,
            self::ADD_MANAGED_BY_TYPE_GENERAL,
            self::ADD_MANAGED_BY_TYPE_GUARDIAN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('identity_number', $data ?? [], null);
        $this->setIfExists('identity_type', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('date_of_birth', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('contact_number', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('emergency_contact_name', $data ?? [], null);
        $this->setIfExists('emergency_contact_number', $data ?? [], null);
        $this->setIfExists('emergency_relationship', $data ?? [], null);
        $this->setIfExists('parent_contact_name', $data ?? [], null);
        $this->setIfExists('parent_contact_number', $data ?? [], null);
        $this->setIfExists('parent_contact_email', $data ?? [], null);
        $this->setIfExists('parent_relationship', $data ?? [], null);
        $this->setIfExists('parent_type', $data ?? [], null);
        $this->setIfExists('doctor_name', $data ?? [], null);
        $this->setIfExists('doctor_contact_number', $data ?? [], null);
        $this->setIfExists('scheme_name', $data ?? [], null);
        $this->setIfExists('scheme_policy_number', $data ?? [], null);
        $this->setIfExists('scheme_principal', $data ?? [], null);
        $this->setIfExists('medical_allergies', $data ?? [], null);
        $this->setIfExists('medication', $data ?? [], null);
        $this->setIfExists('medical_conditions', $data ?? [], null);
        $this->setIfExists('identity_country', $data ?? [], null);
        $this->setIfExists('nationality', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('validation_errors', $data ?? [], null);
        $this->setIfExists('identity_number_invalid', $data ?? [], null);
        $this->setIfExists('identity_country_invalid', $data ?? [], null);
        $this->setIfExists('date_of_birth_invalid', $data ?? [], null);
        $this->setIfExists('gender_invalid', $data ?? [], null);
        $this->setIfExists('managed_by', $data ?? [], null);
        $this->setIfExists('add_managed_by', $data ?? [], null);
        $this->setIfExists('add_managed_by_type', $data ?? [], null);
        $this->setIfExists('identity_country_code', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        $allowedValues = $this->getIdentityTypeAllowableValues();
        if (!is_null($this->container['identity_type']) && !in_array($this->container['identity_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'identity_type', must be one of '%s'",
                $this->container['identity_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['gender'] === null) {
            $invalidProperties[] = "'gender' can't be null";
        }
        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($this->container['gender']) && !in_array($this->container['gender'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gender', must be one of '%s'",
                $this->container['gender'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAddManagedByTypeAllowableValues();
        if (!is_null($this->container['add_managed_by_type']) && !in_array($this->container['add_managed_by_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'add_managed_by_type', must be one of '%s'",
                $this->container['add_managed_by_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Dynamic field to display the Person's name and date of birth. Used for display purposes.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets identity_number
     *
     * @return string|null
     */
    public function getIdentityNumber()
    {
        return $this->container['identity_number'];
    }

    /**
     * Sets identity_number
     *
     * @param string|null $identity_number Number associated with the identification type.
     *
     * @return self
     */
    public function setIdentityNumber($identity_number)
    {
        if (is_null($identity_number)) {
            throw new \InvalidArgumentException('non-nullable identity_number cannot be null');
        }
        $this->container['identity_number'] = $identity_number;

        return $this;
    }

    /**
     * Gets identity_type
     *
     * @return string|null
     */
    public function getIdentityType()
    {
        return $this->container['identity_type'];
    }

    /**
     * Sets identity_type
     *
     * @param string|null $identity_type Identificaiton type, such as a national ID or passport.
     *
     * @return self
     */
    public function setIdentityType($identity_type)
    {
        if (is_null($identity_type)) {
            throw new \InvalidArgumentException('non-nullable identity_type cannot be null');
        }
        $allowedValues = $this->getIdentityTypeAllowableValues();
        if (!in_array($identity_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'identity_type', must be one of '%s'",
                    $identity_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['identity_type'] = $identity_type;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return \DateTime|null
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param \DateTime|null $date_of_birth date_of_birth
     *
     * @return self
     */
    public function setDateOfBirth($date_of_birth)
    {
        if (is_null($date_of_birth)) {
            throw new \InvalidArgumentException('non-nullable date_of_birth cannot be null');
        }
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string $gender gender
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            throw new \InvalidArgumentException('non-nullable gender cannot be null');
        }
        $allowedValues = $this->getGenderAllowableValues();
        if (!in_array($gender, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gender', must be one of '%s'",
                    $gender,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets contact_number
     *
     * @return string|null
     */
    public function getContactNumber()
    {
        return $this->container['contact_number'];
    }

    /**
     * Sets contact_number
     *
     * @param string|null $contact_number Telephone number. Usually a cellphone number.
     *
     * @return self
     */
    public function setContactNumber($contact_number)
    {
        if (is_null($contact_number)) {
            throw new \InvalidArgumentException('non-nullable contact_number cannot be null');
        }
        $this->container['contact_number'] = $contact_number;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language Native language or preferred contact language.
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            throw new \InvalidArgumentException('non-nullable language cannot be null');
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets emergency_contact_name
     *
     * @return string|null
     */
    public function getEmergencyContactName()
    {
        return $this->container['emergency_contact_name'];
    }

    /**
     * Sets emergency_contact_name
     *
     * @param string|null $emergency_contact_name Emergency contact persons's name.
     *
     * @return self
     */
    public function setEmergencyContactName($emergency_contact_name)
    {
        if (is_null($emergency_contact_name)) {
            throw new \InvalidArgumentException('non-nullable emergency_contact_name cannot be null');
        }
        $this->container['emergency_contact_name'] = $emergency_contact_name;

        return $this;
    }

    /**
     * Gets emergency_contact_number
     *
     * @return string|null
     */
    public function getEmergencyContactNumber()
    {
        return $this->container['emergency_contact_number'];
    }

    /**
     * Sets emergency_contact_number
     *
     * @param string|null $emergency_contact_number Emergency contact person's contact number.
     *
     * @return self
     */
    public function setEmergencyContactNumber($emergency_contact_number)
    {
        if (is_null($emergency_contact_number)) {
            throw new \InvalidArgumentException('non-nullable emergency_contact_number cannot be null');
        }
        $this->container['emergency_contact_number'] = $emergency_contact_number;

        return $this;
    }

    /**
     * Gets emergency_relationship
     *
     * @return string|null
     */
    public function getEmergencyRelationship()
    {
        return $this->container['emergency_relationship'];
    }

    /**
     * Sets emergency_relationship
     *
     * @param string|null $emergency_relationship Emergency contact person's relationship to the person.
     *
     * @return self
     */
    public function setEmergencyRelationship($emergency_relationship)
    {
        if (is_null($emergency_relationship)) {
            throw new \InvalidArgumentException('non-nullable emergency_relationship cannot be null');
        }
        $this->container['emergency_relationship'] = $emergency_relationship;

        return $this;
    }

    /**
     * Gets parent_contact_name
     *
     * @return string|null
     */
    public function getParentContactName()
    {
        return $this->container['parent_contact_name'];
    }

    /**
     * Sets parent_contact_name
     *
     * @param string|null $parent_contact_name Parent or guardian's name.
     *
     * @return self
     */
    public function setParentContactName($parent_contact_name)
    {
        if (is_null($parent_contact_name)) {
            throw new \InvalidArgumentException('non-nullable parent_contact_name cannot be null');
        }
        $this->container['parent_contact_name'] = $parent_contact_name;

        return $this;
    }

    /**
     * Gets parent_contact_number
     *
     * @return string|null
     */
    public function getParentContactNumber()
    {
        return $this->container['parent_contact_number'];
    }

    /**
     * Sets parent_contact_number
     *
     * @param string|null $parent_contact_number Parent or guardian's contact number.
     *
     * @return self
     */
    public function setParentContactNumber($parent_contact_number)
    {
        if (is_null($parent_contact_number)) {
            throw new \InvalidArgumentException('non-nullable parent_contact_number cannot be null');
        }
        $this->container['parent_contact_number'] = $parent_contact_number;

        return $this;
    }

    /**
     * Gets parent_contact_email
     *
     * @return string|null
     */
    public function getParentContactEmail()
    {
        return $this->container['parent_contact_email'];
    }

    /**
     * Sets parent_contact_email
     *
     * @param string|null $parent_contact_email Parent or guardian's email.
     *
     * @return self
     */
    public function setParentContactEmail($parent_contact_email)
    {
        if (is_null($parent_contact_email)) {
            throw new \InvalidArgumentException('non-nullable parent_contact_email cannot be null');
        }
        $this->container['parent_contact_email'] = $parent_contact_email;

        return $this;
    }

    /**
     * Gets parent_relationship
     *
     * @return string|null
     */
    public function getParentRelationship()
    {
        return $this->container['parent_relationship'];
    }

    /**
     * Sets parent_relationship
     *
     * @param string|null $parent_relationship Parent or guardian's relationship to the person.
     *
     * @return self
     */
    public function setParentRelationship($parent_relationship)
    {
        if (is_null($parent_relationship)) {
            throw new \InvalidArgumentException('non-nullable parent_relationship cannot be null');
        }
        $this->container['parent_relationship'] = $parent_relationship;

        return $this;
    }

    /**
     * Gets parent_type
     *
     * @return string|null
     */
    public function getParentType()
    {
        return $this->container['parent_type'];
    }

    /**
     * Sets parent_type
     *
     * @param string|null $parent_type Parent or guardian.
     *
     * @return self
     */
    public function setParentType($parent_type)
    {
        if (is_null($parent_type)) {
            throw new \InvalidArgumentException('non-nullable parent_type cannot be null');
        }
        $this->container['parent_type'] = $parent_type;

        return $this;
    }

    /**
     * Gets doctor_name
     *
     * @return string|null
     */
    public function getDoctorName()
    {
        return $this->container['doctor_name'];
    }

    /**
     * Sets doctor_name
     *
     * @param string|null $doctor_name Doctor's name.
     *
     * @return self
     */
    public function setDoctorName($doctor_name)
    {
        if (is_null($doctor_name)) {
            throw new \InvalidArgumentException('non-nullable doctor_name cannot be null');
        }
        $this->container['doctor_name'] = $doctor_name;

        return $this;
    }

    /**
     * Gets doctor_contact_number
     *
     * @return string|null
     */
    public function getDoctorContactNumber()
    {
        return $this->container['doctor_contact_number'];
    }

    /**
     * Sets doctor_contact_number
     *
     * @param string|null $doctor_contact_number Doctor's contact number.
     *
     * @return self
     */
    public function setDoctorContactNumber($doctor_contact_number)
    {
        if (is_null($doctor_contact_number)) {
            throw new \InvalidArgumentException('non-nullable doctor_contact_number cannot be null');
        }
        $this->container['doctor_contact_number'] = $doctor_contact_number;

        return $this;
    }

    /**
     * Gets scheme_name
     *
     * @return string|null
     */
    public function getSchemeName()
    {
        return $this->container['scheme_name'];
    }

    /**
     * Sets scheme_name
     *
     * @param string|null $scheme_name Medical scheme name.
     *
     * @return self
     */
    public function setSchemeName($scheme_name)
    {
        if (is_null($scheme_name)) {
            throw new \InvalidArgumentException('non-nullable scheme_name cannot be null');
        }
        $this->container['scheme_name'] = $scheme_name;

        return $this;
    }

    /**
     * Gets scheme_policy_number
     *
     * @return string|null
     */
    public function getSchemePolicyNumber()
    {
        return $this->container['scheme_policy_number'];
    }

    /**
     * Sets scheme_policy_number
     *
     * @param string|null $scheme_policy_number Medical scheme policy number.
     *
     * @return self
     */
    public function setSchemePolicyNumber($scheme_policy_number)
    {
        if (is_null($scheme_policy_number)) {
            throw new \InvalidArgumentException('non-nullable scheme_policy_number cannot be null');
        }
        $this->container['scheme_policy_number'] = $scheme_policy_number;

        return $this;
    }

    /**
     * Gets scheme_principal
     *
     * @return string|null
     */
    public function getSchemePrincipal()
    {
        return $this->container['scheme_principal'];
    }

    /**
     * Sets scheme_principal
     *
     * @param string|null $scheme_principal Medical scheme principal member name.
     *
     * @return self
     */
    public function setSchemePrincipal($scheme_principal)
    {
        if (is_null($scheme_principal)) {
            throw new \InvalidArgumentException('non-nullable scheme_principal cannot be null');
        }
        $this->container['scheme_principal'] = $scheme_principal;

        return $this;
    }

    /**
     * Gets medical_allergies
     *
     * @return string|null
     */
    public function getMedicalAllergies()
    {
        return $this->container['medical_allergies'];
    }

    /**
     * Sets medical_allergies
     *
     * @param string|null $medical_allergies medical_allergies
     *
     * @return self
     */
    public function setMedicalAllergies($medical_allergies)
    {
        if (is_null($medical_allergies)) {
            throw new \InvalidArgumentException('non-nullable medical_allergies cannot be null');
        }
        $this->container['medical_allergies'] = $medical_allergies;

        return $this;
    }

    /**
     * Gets medication
     *
     * @return string|null
     */
    public function getMedication()
    {
        return $this->container['medication'];
    }

    /**
     * Sets medication
     *
     * @param string|null $medication medication
     *
     * @return self
     */
    public function setMedication($medication)
    {
        if (is_null($medication)) {
            throw new \InvalidArgumentException('non-nullable medication cannot be null');
        }
        $this->container['medication'] = $medication;

        return $this;
    }

    /**
     * Gets medical_conditions
     *
     * @return string|null
     */
    public function getMedicalConditions()
    {
        return $this->container['medical_conditions'];
    }

    /**
     * Sets medical_conditions
     *
     * @param string|null $medical_conditions medical_conditions
     *
     * @return self
     */
    public function setMedicalConditions($medical_conditions)
    {
        if (is_null($medical_conditions)) {
            throw new \InvalidArgumentException('non-nullable medical_conditions cannot be null');
        }
        $this->container['medical_conditions'] = $medical_conditions;

        return $this;
    }

    /**
     * Gets identity_country
     *
     * @return \Idealogic\MembershipAPI\Model\CountryDTO|null
     */
    public function getIdentityCountry()
    {
        return $this->container['identity_country'];
    }

    /**
     * Sets identity_country
     *
     * @param \Idealogic\MembershipAPI\Model\CountryDTO|null $identity_country identity_country
     *
     * @return self
     */
    public function setIdentityCountry($identity_country)
    {
        if (is_null($identity_country)) {
            throw new \InvalidArgumentException('non-nullable identity_country cannot be null');
        }
        $this->container['identity_country'] = $identity_country;

        return $this;
    }

    /**
     * Gets nationality
     *
     * @return \Idealogic\MembershipAPI\Model\CountryDTO|null
     */
    public function getNationality()
    {
        return $this->container['nationality'];
    }

    /**
     * Sets nationality
     *
     * @param \Idealogic\MembershipAPI\Model\CountryDTO|null $nationality nationality
     *
     * @return self
     */
    public function setNationality($nationality)
    {
        if (is_null($nationality)) {
            throw new \InvalidArgumentException('non-nullable nationality cannot be null');
        }
        $this->container['nationality'] = $nationality;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            throw new \InvalidArgumentException('non-nullable user_id cannot be null');
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets validation_errors
     *
     * @return bool|null
     */
    public function getValidationErrors()
    {
        return $this->container['validation_errors'];
    }

    /**
     * Sets validation_errors
     *
     * @param bool|null $validation_errors validation_errors
     *
     * @return self
     */
    public function setValidationErrors($validation_errors)
    {
        if (is_null($validation_errors)) {
            throw new \InvalidArgumentException('non-nullable validation_errors cannot be null');
        }
        $this->container['validation_errors'] = $validation_errors;

        return $this;
    }

    /**
     * Gets identity_number_invalid
     *
     * @return bool|null
     */
    public function getIdentityNumberInvalid()
    {
        return $this->container['identity_number_invalid'];
    }

    /**
     * Sets identity_number_invalid
     *
     * @param bool|null $identity_number_invalid identity_number_invalid
     *
     * @return self
     */
    public function setIdentityNumberInvalid($identity_number_invalid)
    {
        if (is_null($identity_number_invalid)) {
            throw new \InvalidArgumentException('non-nullable identity_number_invalid cannot be null');
        }
        $this->container['identity_number_invalid'] = $identity_number_invalid;

        return $this;
    }

    /**
     * Gets identity_country_invalid
     *
     * @return bool|null
     */
    public function getIdentityCountryInvalid()
    {
        return $this->container['identity_country_invalid'];
    }

    /**
     * Sets identity_country_invalid
     *
     * @param bool|null $identity_country_invalid identity_country_invalid
     *
     * @return self
     */
    public function setIdentityCountryInvalid($identity_country_invalid)
    {
        if (is_null($identity_country_invalid)) {
            throw new \InvalidArgumentException('non-nullable identity_country_invalid cannot be null');
        }
        $this->container['identity_country_invalid'] = $identity_country_invalid;

        return $this;
    }

    /**
     * Gets date_of_birth_invalid
     *
     * @return bool|null
     */
    public function getDateOfBirthInvalid()
    {
        return $this->container['date_of_birth_invalid'];
    }

    /**
     * Sets date_of_birth_invalid
     *
     * @param bool|null $date_of_birth_invalid date_of_birth_invalid
     *
     * @return self
     */
    public function setDateOfBirthInvalid($date_of_birth_invalid)
    {
        if (is_null($date_of_birth_invalid)) {
            throw new \InvalidArgumentException('non-nullable date_of_birth_invalid cannot be null');
        }
        $this->container['date_of_birth_invalid'] = $date_of_birth_invalid;

        return $this;
    }

    /**
     * Gets gender_invalid
     *
     * @return bool|null
     */
    public function getGenderInvalid()
    {
        return $this->container['gender_invalid'];
    }

    /**
     * Sets gender_invalid
     *
     * @param bool|null $gender_invalid gender_invalid
     *
     * @return self
     */
    public function setGenderInvalid($gender_invalid)
    {
        if (is_null($gender_invalid)) {
            throw new \InvalidArgumentException('non-nullable gender_invalid cannot be null');
        }
        $this->container['gender_invalid'] = $gender_invalid;

        return $this;
    }

    /**
     * Gets managed_by
     *
     * @return \Idealogic\MembershipAPI\Model\PersonSummaryDTO[]|null
     */
    public function getManagedBy()
    {
        return $this->container['managed_by'];
    }

    /**
     * Sets managed_by
     *
     * @param \Idealogic\MembershipAPI\Model\PersonSummaryDTO[]|null $managed_by managed_by
     *
     * @return self
     */
    public function setManagedBy($managed_by)
    {
        if (is_null($managed_by)) {
            throw new \InvalidArgumentException('non-nullable managed_by cannot be null');
        }
        $this->container['managed_by'] = $managed_by;

        return $this;
    }

    /**
     * Gets add_managed_by
     *
     * @return int|null
     */
    public function getAddManagedBy()
    {
        return $this->container['add_managed_by'];
    }

    /**
     * Sets add_managed_by
     *
     * @param int|null $add_managed_by add_managed_by
     *
     * @return self
     */
    public function setAddManagedBy($add_managed_by)
    {
        if (is_null($add_managed_by)) {
            throw new \InvalidArgumentException('non-nullable add_managed_by cannot be null');
        }
        $this->container['add_managed_by'] = $add_managed_by;

        return $this;
    }

    /**
     * Gets add_managed_by_type
     *
     * @return string|null
     */
    public function getAddManagedByType()
    {
        return $this->container['add_managed_by_type'];
    }

    /**
     * Sets add_managed_by_type
     *
     * @param string|null $add_managed_by_type add_managed_by_type
     *
     * @return self
     */
    public function setAddManagedByType($add_managed_by_type)
    {
        if (is_null($add_managed_by_type)) {
            throw new \InvalidArgumentException('non-nullable add_managed_by_type cannot be null');
        }
        $allowedValues = $this->getAddManagedByTypeAllowableValues();
        if (!in_array($add_managed_by_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'add_managed_by_type', must be one of '%s'",
                    $add_managed_by_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['add_managed_by_type'] = $add_managed_by_type;

        return $this;
    }

    /**
     * Gets identity_country_code
     *
     * @return string|null
     */
    public function getIdentityCountryCode()
    {
        return $this->container['identity_country_code'];
    }

    /**
     * Sets identity_country_code
     *
     * @param string|null $identity_country_code identity_country_code
     *
     * @return self
     */
    public function setIdentityCountryCode($identity_country_code)
    {
        if (is_null($identity_country_code)) {
            throw new \InvalidArgumentException('non-nullable identity_country_code cannot be null');
        }
        $this->container['identity_country_code'] = $identity_country_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


