<?php
/**
 * MembershipCriteriaResourceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Idealogic\MembershipAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Idealogic\MembershipAPI\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Idealogic\MembershipAPI\ApiException;
use Idealogic\MembershipAPI\Configuration;
use Idealogic\MembershipAPI\HeaderSelector;
use Idealogic\MembershipAPI\ObjectSerializer;

/**
 * MembershipCriteriaResourceApi Class Doc Comment
 *
 * @category Class
 * @package  Idealogic\MembershipAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MembershipCriteriaResourceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'countMembershipCriteria' => [
            'application/json',
        ],
        'createMembershipCriteria' => [
            'application/json',
        ],
        'deleteMembershipCriteria' => [
            'application/json',
        ],
        'getAllMembershipCriteria' => [
            'application/json',
        ],
        'getMembershipCriteria' => [
            'application/json',
        ],
        'partialUpdateMembershipCriteria' => [
            'application/merge-patch+json',
        ],
        'updateMembershipCriteria' => [
            'application/json',
        ],
        'updateMembershipCriteria1' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation countMembershipCriteria
     *
     * @param  int $id_greater_than id_greater_than (optional)
     * @param  int $id_less_than id_less_than (optional)
     * @param  int $id_greater_than_or_equal id_greater_than_or_equal (optional)
     * @param  int $id_less_than_or_equal id_less_than_or_equal (optional)
     * @param  int $id_equals id_equals (optional)
     * @param  int $id_not_equals id_not_equals (optional)
     * @param  bool $id_specified id_specified (optional)
     * @param  int[] $id_in id_in (optional)
     * @param  int[] $id_not_in id_not_in (optional)
     * @param  string $name_contains name_contains (optional)
     * @param  string $name_does_not_contain name_does_not_contain (optional)
     * @param  string $name_equals name_equals (optional)
     * @param  string $name_not_equals name_not_equals (optional)
     * @param  bool $name_specified name_specified (optional)
     * @param  string[] $name_in name_in (optional)
     * @param  string[] $name_not_in name_not_in (optional)
     * @param  int $min_age_greater_than min_age_greater_than (optional)
     * @param  int $min_age_less_than min_age_less_than (optional)
     * @param  int $min_age_greater_than_or_equal min_age_greater_than_or_equal (optional)
     * @param  int $min_age_less_than_or_equal min_age_less_than_or_equal (optional)
     * @param  int $min_age_equals min_age_equals (optional)
     * @param  int $min_age_not_equals min_age_not_equals (optional)
     * @param  bool $min_age_specified min_age_specified (optional)
     * @param  int[] $min_age_in min_age_in (optional)
     * @param  int[] $min_age_not_in min_age_not_in (optional)
     * @param  int $max_age_greater_than max_age_greater_than (optional)
     * @param  int $max_age_less_than max_age_less_than (optional)
     * @param  int $max_age_greater_than_or_equal max_age_greater_than_or_equal (optional)
     * @param  int $max_age_less_than_or_equal max_age_less_than_or_equal (optional)
     * @param  int $max_age_equals max_age_equals (optional)
     * @param  int $max_age_not_equals max_age_not_equals (optional)
     * @param  bool $max_age_specified max_age_specified (optional)
     * @param  int[] $max_age_in max_age_in (optional)
     * @param  int[] $max_age_not_in max_age_not_in (optional)
     * @param  string $gender_equals gender_equals (optional)
     * @param  string $gender_not_equals gender_not_equals (optional)
     * @param  bool $gender_specified gender_specified (optional)
     * @param  string[] $gender_in gender_in (optional)
     * @param  string[] $gender_not_in gender_not_in (optional)
     * @param  int $period_id_greater_than period_id_greater_than (optional)
     * @param  int $period_id_less_than period_id_less_than (optional)
     * @param  int $period_id_greater_than_or_equal period_id_greater_than_or_equal (optional)
     * @param  int $period_id_less_than_or_equal period_id_less_than_or_equal (optional)
     * @param  int $period_id_equals period_id_equals (optional)
     * @param  int $period_id_not_equals period_id_not_equals (optional)
     * @param  bool $period_id_specified period_id_specified (optional)
     * @param  int[] $period_id_in period_id_in (optional)
     * @param  int[] $period_id_not_in period_id_not_in (optional)
     * @param  int $product_id_greater_than product_id_greater_than (optional)
     * @param  int $product_id_less_than product_id_less_than (optional)
     * @param  int $product_id_greater_than_or_equal product_id_greater_than_or_equal (optional)
     * @param  int $product_id_less_than_or_equal product_id_less_than_or_equal (optional)
     * @param  int $product_id_equals product_id_equals (optional)
     * @param  int $product_id_not_equals product_id_not_equals (optional)
     * @param  bool $product_id_specified product_id_specified (optional)
     * @param  int[] $product_id_in product_id_in (optional)
     * @param  int[] $product_id_not_in product_id_not_in (optional)
     * @param  int $number_type_id_greater_than number_type_id_greater_than (optional)
     * @param  int $number_type_id_less_than number_type_id_less_than (optional)
     * @param  int $number_type_id_greater_than_or_equal number_type_id_greater_than_or_equal (optional)
     * @param  int $number_type_id_less_than_or_equal number_type_id_less_than_or_equal (optional)
     * @param  int $number_type_id_equals number_type_id_equals (optional)
     * @param  int $number_type_id_not_equals number_type_id_not_equals (optional)
     * @param  bool $number_type_id_specified number_type_id_specified (optional)
     * @param  int[] $number_type_id_in number_type_id_in (optional)
     * @param  int[] $number_type_id_not_in number_type_id_not_in (optional)
     * @param  bool $distinct distinct (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['countMembershipCriteria'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int
     */
    public function countMembershipCriteria($id_greater_than = null, $id_less_than = null, $id_greater_than_or_equal = null, $id_less_than_or_equal = null, $id_equals = null, $id_not_equals = null, $id_specified = null, $id_in = null, $id_not_in = null, $name_contains = null, $name_does_not_contain = null, $name_equals = null, $name_not_equals = null, $name_specified = null, $name_in = null, $name_not_in = null, $min_age_greater_than = null, $min_age_less_than = null, $min_age_greater_than_or_equal = null, $min_age_less_than_or_equal = null, $min_age_equals = null, $min_age_not_equals = null, $min_age_specified = null, $min_age_in = null, $min_age_not_in = null, $max_age_greater_than = null, $max_age_less_than = null, $max_age_greater_than_or_equal = null, $max_age_less_than_or_equal = null, $max_age_equals = null, $max_age_not_equals = null, $max_age_specified = null, $max_age_in = null, $max_age_not_in = null, $gender_equals = null, $gender_not_equals = null, $gender_specified = null, $gender_in = null, $gender_not_in = null, $period_id_greater_than = null, $period_id_less_than = null, $period_id_greater_than_or_equal = null, $period_id_less_than_or_equal = null, $period_id_equals = null, $period_id_not_equals = null, $period_id_specified = null, $period_id_in = null, $period_id_not_in = null, $product_id_greater_than = null, $product_id_less_than = null, $product_id_greater_than_or_equal = null, $product_id_less_than_or_equal = null, $product_id_equals = null, $product_id_not_equals = null, $product_id_specified = null, $product_id_in = null, $product_id_not_in = null, $number_type_id_greater_than = null, $number_type_id_less_than = null, $number_type_id_greater_than_or_equal = null, $number_type_id_less_than_or_equal = null, $number_type_id_equals = null, $number_type_id_not_equals = null, $number_type_id_specified = null, $number_type_id_in = null, $number_type_id_not_in = null, $distinct = null, string $contentType = self::contentTypes['countMembershipCriteria'][0])
    {
        list($response) = $this->countMembershipCriteriaWithHttpInfo($id_greater_than, $id_less_than, $id_greater_than_or_equal, $id_less_than_or_equal, $id_equals, $id_not_equals, $id_specified, $id_in, $id_not_in, $name_contains, $name_does_not_contain, $name_equals, $name_not_equals, $name_specified, $name_in, $name_not_in, $min_age_greater_than, $min_age_less_than, $min_age_greater_than_or_equal, $min_age_less_than_or_equal, $min_age_equals, $min_age_not_equals, $min_age_specified, $min_age_in, $min_age_not_in, $max_age_greater_than, $max_age_less_than, $max_age_greater_than_or_equal, $max_age_less_than_or_equal, $max_age_equals, $max_age_not_equals, $max_age_specified, $max_age_in, $max_age_not_in, $gender_equals, $gender_not_equals, $gender_specified, $gender_in, $gender_not_in, $period_id_greater_than, $period_id_less_than, $period_id_greater_than_or_equal, $period_id_less_than_or_equal, $period_id_equals, $period_id_not_equals, $period_id_specified, $period_id_in, $period_id_not_in, $product_id_greater_than, $product_id_less_than, $product_id_greater_than_or_equal, $product_id_less_than_or_equal, $product_id_equals, $product_id_not_equals, $product_id_specified, $product_id_in, $product_id_not_in, $number_type_id_greater_than, $number_type_id_less_than, $number_type_id_greater_than_or_equal, $number_type_id_less_than_or_equal, $number_type_id_equals, $number_type_id_not_equals, $number_type_id_specified, $number_type_id_in, $number_type_id_not_in, $distinct, $contentType);
        return $response;
    }

    /**
     * Operation countMembershipCriteriaWithHttpInfo
     *
     * @param  int $id_greater_than (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_equals (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int[] $id_in (optional)
     * @param  int[] $id_not_in (optional)
     * @param  string $name_contains (optional)
     * @param  string $name_does_not_contain (optional)
     * @param  string $name_equals (optional)
     * @param  string $name_not_equals (optional)
     * @param  bool $name_specified (optional)
     * @param  string[] $name_in (optional)
     * @param  string[] $name_not_in (optional)
     * @param  int $min_age_greater_than (optional)
     * @param  int $min_age_less_than (optional)
     * @param  int $min_age_greater_than_or_equal (optional)
     * @param  int $min_age_less_than_or_equal (optional)
     * @param  int $min_age_equals (optional)
     * @param  int $min_age_not_equals (optional)
     * @param  bool $min_age_specified (optional)
     * @param  int[] $min_age_in (optional)
     * @param  int[] $min_age_not_in (optional)
     * @param  int $max_age_greater_than (optional)
     * @param  int $max_age_less_than (optional)
     * @param  int $max_age_greater_than_or_equal (optional)
     * @param  int $max_age_less_than_or_equal (optional)
     * @param  int $max_age_equals (optional)
     * @param  int $max_age_not_equals (optional)
     * @param  bool $max_age_specified (optional)
     * @param  int[] $max_age_in (optional)
     * @param  int[] $max_age_not_in (optional)
     * @param  string $gender_equals (optional)
     * @param  string $gender_not_equals (optional)
     * @param  bool $gender_specified (optional)
     * @param  string[] $gender_in (optional)
     * @param  string[] $gender_not_in (optional)
     * @param  int $period_id_greater_than (optional)
     * @param  int $period_id_less_than (optional)
     * @param  int $period_id_greater_than_or_equal (optional)
     * @param  int $period_id_less_than_or_equal (optional)
     * @param  int $period_id_equals (optional)
     * @param  int $period_id_not_equals (optional)
     * @param  bool $period_id_specified (optional)
     * @param  int[] $period_id_in (optional)
     * @param  int[] $period_id_not_in (optional)
     * @param  int $product_id_greater_than (optional)
     * @param  int $product_id_less_than (optional)
     * @param  int $product_id_greater_than_or_equal (optional)
     * @param  int $product_id_less_than_or_equal (optional)
     * @param  int $product_id_equals (optional)
     * @param  int $product_id_not_equals (optional)
     * @param  bool $product_id_specified (optional)
     * @param  int[] $product_id_in (optional)
     * @param  int[] $product_id_not_in (optional)
     * @param  int $number_type_id_greater_than (optional)
     * @param  int $number_type_id_less_than (optional)
     * @param  int $number_type_id_greater_than_or_equal (optional)
     * @param  int $number_type_id_less_than_or_equal (optional)
     * @param  int $number_type_id_equals (optional)
     * @param  int $number_type_id_not_equals (optional)
     * @param  bool $number_type_id_specified (optional)
     * @param  int[] $number_type_id_in (optional)
     * @param  int[] $number_type_id_not_in (optional)
     * @param  bool $distinct (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['countMembershipCriteria'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function countMembershipCriteriaWithHttpInfo($id_greater_than = null, $id_less_than = null, $id_greater_than_or_equal = null, $id_less_than_or_equal = null, $id_equals = null, $id_not_equals = null, $id_specified = null, $id_in = null, $id_not_in = null, $name_contains = null, $name_does_not_contain = null, $name_equals = null, $name_not_equals = null, $name_specified = null, $name_in = null, $name_not_in = null, $min_age_greater_than = null, $min_age_less_than = null, $min_age_greater_than_or_equal = null, $min_age_less_than_or_equal = null, $min_age_equals = null, $min_age_not_equals = null, $min_age_specified = null, $min_age_in = null, $min_age_not_in = null, $max_age_greater_than = null, $max_age_less_than = null, $max_age_greater_than_or_equal = null, $max_age_less_than_or_equal = null, $max_age_equals = null, $max_age_not_equals = null, $max_age_specified = null, $max_age_in = null, $max_age_not_in = null, $gender_equals = null, $gender_not_equals = null, $gender_specified = null, $gender_in = null, $gender_not_in = null, $period_id_greater_than = null, $period_id_less_than = null, $period_id_greater_than_or_equal = null, $period_id_less_than_or_equal = null, $period_id_equals = null, $period_id_not_equals = null, $period_id_specified = null, $period_id_in = null, $period_id_not_in = null, $product_id_greater_than = null, $product_id_less_than = null, $product_id_greater_than_or_equal = null, $product_id_less_than_or_equal = null, $product_id_equals = null, $product_id_not_equals = null, $product_id_specified = null, $product_id_in = null, $product_id_not_in = null, $number_type_id_greater_than = null, $number_type_id_less_than = null, $number_type_id_greater_than_or_equal = null, $number_type_id_less_than_or_equal = null, $number_type_id_equals = null, $number_type_id_not_equals = null, $number_type_id_specified = null, $number_type_id_in = null, $number_type_id_not_in = null, $distinct = null, string $contentType = self::contentTypes['countMembershipCriteria'][0])
    {
        $request = $this->countMembershipCriteriaRequest($id_greater_than, $id_less_than, $id_greater_than_or_equal, $id_less_than_or_equal, $id_equals, $id_not_equals, $id_specified, $id_in, $id_not_in, $name_contains, $name_does_not_contain, $name_equals, $name_not_equals, $name_specified, $name_in, $name_not_in, $min_age_greater_than, $min_age_less_than, $min_age_greater_than_or_equal, $min_age_less_than_or_equal, $min_age_equals, $min_age_not_equals, $min_age_specified, $min_age_in, $min_age_not_in, $max_age_greater_than, $max_age_less_than, $max_age_greater_than_or_equal, $max_age_less_than_or_equal, $max_age_equals, $max_age_not_equals, $max_age_specified, $max_age_in, $max_age_not_in, $gender_equals, $gender_not_equals, $gender_specified, $gender_in, $gender_not_in, $period_id_greater_than, $period_id_less_than, $period_id_greater_than_or_equal, $period_id_less_than_or_equal, $period_id_equals, $period_id_not_equals, $period_id_specified, $period_id_in, $period_id_not_in, $product_id_greater_than, $product_id_less_than, $product_id_greater_than_or_equal, $product_id_less_than_or_equal, $product_id_equals, $product_id_not_equals, $product_id_specified, $product_id_in, $product_id_not_in, $number_type_id_greater_than, $number_type_id_less_than, $number_type_id_greater_than_or_equal, $number_type_id_less_than_or_equal, $number_type_id_equals, $number_type_id_not_equals, $number_type_id_specified, $number_type_id_in, $number_type_id_not_in, $distinct, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation countMembershipCriteriaAsync
     *
     * @param  int $id_greater_than (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_equals (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int[] $id_in (optional)
     * @param  int[] $id_not_in (optional)
     * @param  string $name_contains (optional)
     * @param  string $name_does_not_contain (optional)
     * @param  string $name_equals (optional)
     * @param  string $name_not_equals (optional)
     * @param  bool $name_specified (optional)
     * @param  string[] $name_in (optional)
     * @param  string[] $name_not_in (optional)
     * @param  int $min_age_greater_than (optional)
     * @param  int $min_age_less_than (optional)
     * @param  int $min_age_greater_than_or_equal (optional)
     * @param  int $min_age_less_than_or_equal (optional)
     * @param  int $min_age_equals (optional)
     * @param  int $min_age_not_equals (optional)
     * @param  bool $min_age_specified (optional)
     * @param  int[] $min_age_in (optional)
     * @param  int[] $min_age_not_in (optional)
     * @param  int $max_age_greater_than (optional)
     * @param  int $max_age_less_than (optional)
     * @param  int $max_age_greater_than_or_equal (optional)
     * @param  int $max_age_less_than_or_equal (optional)
     * @param  int $max_age_equals (optional)
     * @param  int $max_age_not_equals (optional)
     * @param  bool $max_age_specified (optional)
     * @param  int[] $max_age_in (optional)
     * @param  int[] $max_age_not_in (optional)
     * @param  string $gender_equals (optional)
     * @param  string $gender_not_equals (optional)
     * @param  bool $gender_specified (optional)
     * @param  string[] $gender_in (optional)
     * @param  string[] $gender_not_in (optional)
     * @param  int $period_id_greater_than (optional)
     * @param  int $period_id_less_than (optional)
     * @param  int $period_id_greater_than_or_equal (optional)
     * @param  int $period_id_less_than_or_equal (optional)
     * @param  int $period_id_equals (optional)
     * @param  int $period_id_not_equals (optional)
     * @param  bool $period_id_specified (optional)
     * @param  int[] $period_id_in (optional)
     * @param  int[] $period_id_not_in (optional)
     * @param  int $product_id_greater_than (optional)
     * @param  int $product_id_less_than (optional)
     * @param  int $product_id_greater_than_or_equal (optional)
     * @param  int $product_id_less_than_or_equal (optional)
     * @param  int $product_id_equals (optional)
     * @param  int $product_id_not_equals (optional)
     * @param  bool $product_id_specified (optional)
     * @param  int[] $product_id_in (optional)
     * @param  int[] $product_id_not_in (optional)
     * @param  int $number_type_id_greater_than (optional)
     * @param  int $number_type_id_less_than (optional)
     * @param  int $number_type_id_greater_than_or_equal (optional)
     * @param  int $number_type_id_less_than_or_equal (optional)
     * @param  int $number_type_id_equals (optional)
     * @param  int $number_type_id_not_equals (optional)
     * @param  bool $number_type_id_specified (optional)
     * @param  int[] $number_type_id_in (optional)
     * @param  int[] $number_type_id_not_in (optional)
     * @param  bool $distinct (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['countMembershipCriteria'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function countMembershipCriteriaAsync($id_greater_than = null, $id_less_than = null, $id_greater_than_or_equal = null, $id_less_than_or_equal = null, $id_equals = null, $id_not_equals = null, $id_specified = null, $id_in = null, $id_not_in = null, $name_contains = null, $name_does_not_contain = null, $name_equals = null, $name_not_equals = null, $name_specified = null, $name_in = null, $name_not_in = null, $min_age_greater_than = null, $min_age_less_than = null, $min_age_greater_than_or_equal = null, $min_age_less_than_or_equal = null, $min_age_equals = null, $min_age_not_equals = null, $min_age_specified = null, $min_age_in = null, $min_age_not_in = null, $max_age_greater_than = null, $max_age_less_than = null, $max_age_greater_than_or_equal = null, $max_age_less_than_or_equal = null, $max_age_equals = null, $max_age_not_equals = null, $max_age_specified = null, $max_age_in = null, $max_age_not_in = null, $gender_equals = null, $gender_not_equals = null, $gender_specified = null, $gender_in = null, $gender_not_in = null, $period_id_greater_than = null, $period_id_less_than = null, $period_id_greater_than_or_equal = null, $period_id_less_than_or_equal = null, $period_id_equals = null, $period_id_not_equals = null, $period_id_specified = null, $period_id_in = null, $period_id_not_in = null, $product_id_greater_than = null, $product_id_less_than = null, $product_id_greater_than_or_equal = null, $product_id_less_than_or_equal = null, $product_id_equals = null, $product_id_not_equals = null, $product_id_specified = null, $product_id_in = null, $product_id_not_in = null, $number_type_id_greater_than = null, $number_type_id_less_than = null, $number_type_id_greater_than_or_equal = null, $number_type_id_less_than_or_equal = null, $number_type_id_equals = null, $number_type_id_not_equals = null, $number_type_id_specified = null, $number_type_id_in = null, $number_type_id_not_in = null, $distinct = null, string $contentType = self::contentTypes['countMembershipCriteria'][0])
    {
        return $this->countMembershipCriteriaAsyncWithHttpInfo($id_greater_than, $id_less_than, $id_greater_than_or_equal, $id_less_than_or_equal, $id_equals, $id_not_equals, $id_specified, $id_in, $id_not_in, $name_contains, $name_does_not_contain, $name_equals, $name_not_equals, $name_specified, $name_in, $name_not_in, $min_age_greater_than, $min_age_less_than, $min_age_greater_than_or_equal, $min_age_less_than_or_equal, $min_age_equals, $min_age_not_equals, $min_age_specified, $min_age_in, $min_age_not_in, $max_age_greater_than, $max_age_less_than, $max_age_greater_than_or_equal, $max_age_less_than_or_equal, $max_age_equals, $max_age_not_equals, $max_age_specified, $max_age_in, $max_age_not_in, $gender_equals, $gender_not_equals, $gender_specified, $gender_in, $gender_not_in, $period_id_greater_than, $period_id_less_than, $period_id_greater_than_or_equal, $period_id_less_than_or_equal, $period_id_equals, $period_id_not_equals, $period_id_specified, $period_id_in, $period_id_not_in, $product_id_greater_than, $product_id_less_than, $product_id_greater_than_or_equal, $product_id_less_than_or_equal, $product_id_equals, $product_id_not_equals, $product_id_specified, $product_id_in, $product_id_not_in, $number_type_id_greater_than, $number_type_id_less_than, $number_type_id_greater_than_or_equal, $number_type_id_less_than_or_equal, $number_type_id_equals, $number_type_id_not_equals, $number_type_id_specified, $number_type_id_in, $number_type_id_not_in, $distinct, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation countMembershipCriteriaAsyncWithHttpInfo
     *
     * @param  int $id_greater_than (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_equals (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int[] $id_in (optional)
     * @param  int[] $id_not_in (optional)
     * @param  string $name_contains (optional)
     * @param  string $name_does_not_contain (optional)
     * @param  string $name_equals (optional)
     * @param  string $name_not_equals (optional)
     * @param  bool $name_specified (optional)
     * @param  string[] $name_in (optional)
     * @param  string[] $name_not_in (optional)
     * @param  int $min_age_greater_than (optional)
     * @param  int $min_age_less_than (optional)
     * @param  int $min_age_greater_than_or_equal (optional)
     * @param  int $min_age_less_than_or_equal (optional)
     * @param  int $min_age_equals (optional)
     * @param  int $min_age_not_equals (optional)
     * @param  bool $min_age_specified (optional)
     * @param  int[] $min_age_in (optional)
     * @param  int[] $min_age_not_in (optional)
     * @param  int $max_age_greater_than (optional)
     * @param  int $max_age_less_than (optional)
     * @param  int $max_age_greater_than_or_equal (optional)
     * @param  int $max_age_less_than_or_equal (optional)
     * @param  int $max_age_equals (optional)
     * @param  int $max_age_not_equals (optional)
     * @param  bool $max_age_specified (optional)
     * @param  int[] $max_age_in (optional)
     * @param  int[] $max_age_not_in (optional)
     * @param  string $gender_equals (optional)
     * @param  string $gender_not_equals (optional)
     * @param  bool $gender_specified (optional)
     * @param  string[] $gender_in (optional)
     * @param  string[] $gender_not_in (optional)
     * @param  int $period_id_greater_than (optional)
     * @param  int $period_id_less_than (optional)
     * @param  int $period_id_greater_than_or_equal (optional)
     * @param  int $period_id_less_than_or_equal (optional)
     * @param  int $period_id_equals (optional)
     * @param  int $period_id_not_equals (optional)
     * @param  bool $period_id_specified (optional)
     * @param  int[] $period_id_in (optional)
     * @param  int[] $period_id_not_in (optional)
     * @param  int $product_id_greater_than (optional)
     * @param  int $product_id_less_than (optional)
     * @param  int $product_id_greater_than_or_equal (optional)
     * @param  int $product_id_less_than_or_equal (optional)
     * @param  int $product_id_equals (optional)
     * @param  int $product_id_not_equals (optional)
     * @param  bool $product_id_specified (optional)
     * @param  int[] $product_id_in (optional)
     * @param  int[] $product_id_not_in (optional)
     * @param  int $number_type_id_greater_than (optional)
     * @param  int $number_type_id_less_than (optional)
     * @param  int $number_type_id_greater_than_or_equal (optional)
     * @param  int $number_type_id_less_than_or_equal (optional)
     * @param  int $number_type_id_equals (optional)
     * @param  int $number_type_id_not_equals (optional)
     * @param  bool $number_type_id_specified (optional)
     * @param  int[] $number_type_id_in (optional)
     * @param  int[] $number_type_id_not_in (optional)
     * @param  bool $distinct (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['countMembershipCriteria'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function countMembershipCriteriaAsyncWithHttpInfo($id_greater_than = null, $id_less_than = null, $id_greater_than_or_equal = null, $id_less_than_or_equal = null, $id_equals = null, $id_not_equals = null, $id_specified = null, $id_in = null, $id_not_in = null, $name_contains = null, $name_does_not_contain = null, $name_equals = null, $name_not_equals = null, $name_specified = null, $name_in = null, $name_not_in = null, $min_age_greater_than = null, $min_age_less_than = null, $min_age_greater_than_or_equal = null, $min_age_less_than_or_equal = null, $min_age_equals = null, $min_age_not_equals = null, $min_age_specified = null, $min_age_in = null, $min_age_not_in = null, $max_age_greater_than = null, $max_age_less_than = null, $max_age_greater_than_or_equal = null, $max_age_less_than_or_equal = null, $max_age_equals = null, $max_age_not_equals = null, $max_age_specified = null, $max_age_in = null, $max_age_not_in = null, $gender_equals = null, $gender_not_equals = null, $gender_specified = null, $gender_in = null, $gender_not_in = null, $period_id_greater_than = null, $period_id_less_than = null, $period_id_greater_than_or_equal = null, $period_id_less_than_or_equal = null, $period_id_equals = null, $period_id_not_equals = null, $period_id_specified = null, $period_id_in = null, $period_id_not_in = null, $product_id_greater_than = null, $product_id_less_than = null, $product_id_greater_than_or_equal = null, $product_id_less_than_or_equal = null, $product_id_equals = null, $product_id_not_equals = null, $product_id_specified = null, $product_id_in = null, $product_id_not_in = null, $number_type_id_greater_than = null, $number_type_id_less_than = null, $number_type_id_greater_than_or_equal = null, $number_type_id_less_than_or_equal = null, $number_type_id_equals = null, $number_type_id_not_equals = null, $number_type_id_specified = null, $number_type_id_in = null, $number_type_id_not_in = null, $distinct = null, string $contentType = self::contentTypes['countMembershipCriteria'][0])
    {
        $returnType = 'int';
        $request = $this->countMembershipCriteriaRequest($id_greater_than, $id_less_than, $id_greater_than_or_equal, $id_less_than_or_equal, $id_equals, $id_not_equals, $id_specified, $id_in, $id_not_in, $name_contains, $name_does_not_contain, $name_equals, $name_not_equals, $name_specified, $name_in, $name_not_in, $min_age_greater_than, $min_age_less_than, $min_age_greater_than_or_equal, $min_age_less_than_or_equal, $min_age_equals, $min_age_not_equals, $min_age_specified, $min_age_in, $min_age_not_in, $max_age_greater_than, $max_age_less_than, $max_age_greater_than_or_equal, $max_age_less_than_or_equal, $max_age_equals, $max_age_not_equals, $max_age_specified, $max_age_in, $max_age_not_in, $gender_equals, $gender_not_equals, $gender_specified, $gender_in, $gender_not_in, $period_id_greater_than, $period_id_less_than, $period_id_greater_than_or_equal, $period_id_less_than_or_equal, $period_id_equals, $period_id_not_equals, $period_id_specified, $period_id_in, $period_id_not_in, $product_id_greater_than, $product_id_less_than, $product_id_greater_than_or_equal, $product_id_less_than_or_equal, $product_id_equals, $product_id_not_equals, $product_id_specified, $product_id_in, $product_id_not_in, $number_type_id_greater_than, $number_type_id_less_than, $number_type_id_greater_than_or_equal, $number_type_id_less_than_or_equal, $number_type_id_equals, $number_type_id_not_equals, $number_type_id_specified, $number_type_id_in, $number_type_id_not_in, $distinct, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'countMembershipCriteria'
     *
     * @param  int $id_greater_than (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_equals (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int[] $id_in (optional)
     * @param  int[] $id_not_in (optional)
     * @param  string $name_contains (optional)
     * @param  string $name_does_not_contain (optional)
     * @param  string $name_equals (optional)
     * @param  string $name_not_equals (optional)
     * @param  bool $name_specified (optional)
     * @param  string[] $name_in (optional)
     * @param  string[] $name_not_in (optional)
     * @param  int $min_age_greater_than (optional)
     * @param  int $min_age_less_than (optional)
     * @param  int $min_age_greater_than_or_equal (optional)
     * @param  int $min_age_less_than_or_equal (optional)
     * @param  int $min_age_equals (optional)
     * @param  int $min_age_not_equals (optional)
     * @param  bool $min_age_specified (optional)
     * @param  int[] $min_age_in (optional)
     * @param  int[] $min_age_not_in (optional)
     * @param  int $max_age_greater_than (optional)
     * @param  int $max_age_less_than (optional)
     * @param  int $max_age_greater_than_or_equal (optional)
     * @param  int $max_age_less_than_or_equal (optional)
     * @param  int $max_age_equals (optional)
     * @param  int $max_age_not_equals (optional)
     * @param  bool $max_age_specified (optional)
     * @param  int[] $max_age_in (optional)
     * @param  int[] $max_age_not_in (optional)
     * @param  string $gender_equals (optional)
     * @param  string $gender_not_equals (optional)
     * @param  bool $gender_specified (optional)
     * @param  string[] $gender_in (optional)
     * @param  string[] $gender_not_in (optional)
     * @param  int $period_id_greater_than (optional)
     * @param  int $period_id_less_than (optional)
     * @param  int $period_id_greater_than_or_equal (optional)
     * @param  int $period_id_less_than_or_equal (optional)
     * @param  int $period_id_equals (optional)
     * @param  int $period_id_not_equals (optional)
     * @param  bool $period_id_specified (optional)
     * @param  int[] $period_id_in (optional)
     * @param  int[] $period_id_not_in (optional)
     * @param  int $product_id_greater_than (optional)
     * @param  int $product_id_less_than (optional)
     * @param  int $product_id_greater_than_or_equal (optional)
     * @param  int $product_id_less_than_or_equal (optional)
     * @param  int $product_id_equals (optional)
     * @param  int $product_id_not_equals (optional)
     * @param  bool $product_id_specified (optional)
     * @param  int[] $product_id_in (optional)
     * @param  int[] $product_id_not_in (optional)
     * @param  int $number_type_id_greater_than (optional)
     * @param  int $number_type_id_less_than (optional)
     * @param  int $number_type_id_greater_than_or_equal (optional)
     * @param  int $number_type_id_less_than_or_equal (optional)
     * @param  int $number_type_id_equals (optional)
     * @param  int $number_type_id_not_equals (optional)
     * @param  bool $number_type_id_specified (optional)
     * @param  int[] $number_type_id_in (optional)
     * @param  int[] $number_type_id_not_in (optional)
     * @param  bool $distinct (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['countMembershipCriteria'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function countMembershipCriteriaRequest($id_greater_than = null, $id_less_than = null, $id_greater_than_or_equal = null, $id_less_than_or_equal = null, $id_equals = null, $id_not_equals = null, $id_specified = null, $id_in = null, $id_not_in = null, $name_contains = null, $name_does_not_contain = null, $name_equals = null, $name_not_equals = null, $name_specified = null, $name_in = null, $name_not_in = null, $min_age_greater_than = null, $min_age_less_than = null, $min_age_greater_than_or_equal = null, $min_age_less_than_or_equal = null, $min_age_equals = null, $min_age_not_equals = null, $min_age_specified = null, $min_age_in = null, $min_age_not_in = null, $max_age_greater_than = null, $max_age_less_than = null, $max_age_greater_than_or_equal = null, $max_age_less_than_or_equal = null, $max_age_equals = null, $max_age_not_equals = null, $max_age_specified = null, $max_age_in = null, $max_age_not_in = null, $gender_equals = null, $gender_not_equals = null, $gender_specified = null, $gender_in = null, $gender_not_in = null, $period_id_greater_than = null, $period_id_less_than = null, $period_id_greater_than_or_equal = null, $period_id_less_than_or_equal = null, $period_id_equals = null, $period_id_not_equals = null, $period_id_specified = null, $period_id_in = null, $period_id_not_in = null, $product_id_greater_than = null, $product_id_less_than = null, $product_id_greater_than_or_equal = null, $product_id_less_than_or_equal = null, $product_id_equals = null, $product_id_not_equals = null, $product_id_specified = null, $product_id_in = null, $product_id_not_in = null, $number_type_id_greater_than = null, $number_type_id_less_than = null, $number_type_id_greater_than_or_equal = null, $number_type_id_less_than_or_equal = null, $number_type_id_equals = null, $number_type_id_not_equals = null, $number_type_id_specified = null, $number_type_id_in = null, $number_type_id_not_in = null, $distinct = null, string $contentType = self::contentTypes['countMembershipCriteria'][0])
    {





































































        $resourcePath = '/api/membership-criteria/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_greater_than,
            'id.greaterThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_less_than,
            'id.lessThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_greater_than_or_equal,
            'id.greaterThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_less_than_or_equal,
            'id.lessThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_equals,
            'id.equals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_not_equals,
            'id.notEquals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_specified,
            'id.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_in,
            'id.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_not_in,
            'id.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name_contains,
            'name.contains', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name_does_not_contain,
            'name.doesNotContain', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name_equals,
            'name.equals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name_not_equals,
            'name.notEquals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name_specified,
            'name.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name_in,
            'name.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name_not_in,
            'name.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_age_greater_than,
            'minAge.greaterThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_age_less_than,
            'minAge.lessThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_age_greater_than_or_equal,
            'minAge.greaterThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_age_less_than_or_equal,
            'minAge.lessThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_age_equals,
            'minAge.equals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_age_not_equals,
            'minAge.notEquals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_age_specified,
            'minAge.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_age_in,
            'minAge.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_age_not_in,
            'minAge.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_age_greater_than,
            'maxAge.greaterThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_age_less_than,
            'maxAge.lessThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_age_greater_than_or_equal,
            'maxAge.greaterThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_age_less_than_or_equal,
            'maxAge.lessThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_age_equals,
            'maxAge.equals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_age_not_equals,
            'maxAge.notEquals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_age_specified,
            'maxAge.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_age_in,
            'maxAge.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_age_not_in,
            'maxAge.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $gender_equals,
            'gender.equals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $gender_not_equals,
            'gender.notEquals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $gender_specified,
            'gender.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $gender_in,
            'gender.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $gender_not_in,
            'gender.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period_id_greater_than,
            'periodId.greaterThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period_id_less_than,
            'periodId.lessThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period_id_greater_than_or_equal,
            'periodId.greaterThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period_id_less_than_or_equal,
            'periodId.lessThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period_id_equals,
            'periodId.equals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period_id_not_equals,
            'periodId.notEquals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period_id_specified,
            'periodId.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period_id_in,
            'periodId.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period_id_not_in,
            'periodId.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product_id_greater_than,
            'productId.greaterThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product_id_less_than,
            'productId.lessThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product_id_greater_than_or_equal,
            'productId.greaterThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product_id_less_than_or_equal,
            'productId.lessThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product_id_equals,
            'productId.equals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product_id_not_equals,
            'productId.notEquals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product_id_specified,
            'productId.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product_id_in,
            'productId.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product_id_not_in,
            'productId.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_type_id_greater_than,
            'numberTypeId.greaterThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_type_id_less_than,
            'numberTypeId.lessThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_type_id_greater_than_or_equal,
            'numberTypeId.greaterThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_type_id_less_than_or_equal,
            'numberTypeId.lessThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_type_id_equals,
            'numberTypeId.equals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_type_id_not_equals,
            'numberTypeId.notEquals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_type_id_specified,
            'numberTypeId.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_type_id_in,
            'numberTypeId.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_type_id_not_in,
            'numberTypeId.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $distinct,
            'distinct', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createMembershipCriteria
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO $membership_criteria_dto membership_criteria_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMembershipCriteria'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO
     */
    public function createMembershipCriteria($membership_criteria_dto, string $contentType = self::contentTypes['createMembershipCriteria'][0])
    {
        list($response) = $this->createMembershipCriteriaWithHttpInfo($membership_criteria_dto, $contentType);
        return $response;
    }

    /**
     * Operation createMembershipCriteriaWithHttpInfo
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO $membership_criteria_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMembershipCriteria'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createMembershipCriteriaWithHttpInfo($membership_criteria_dto, string $contentType = self::contentTypes['createMembershipCriteria'][0])
    {
        $request = $this->createMembershipCriteriaRequest($membership_criteria_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createMembershipCriteriaAsync
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO $membership_criteria_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMembershipCriteria'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMembershipCriteriaAsync($membership_criteria_dto, string $contentType = self::contentTypes['createMembershipCriteria'][0])
    {
        return $this->createMembershipCriteriaAsyncWithHttpInfo($membership_criteria_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createMembershipCriteriaAsyncWithHttpInfo
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO $membership_criteria_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMembershipCriteria'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMembershipCriteriaAsyncWithHttpInfo($membership_criteria_dto, string $contentType = self::contentTypes['createMembershipCriteria'][0])
    {
        $returnType = '\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO';
        $request = $this->createMembershipCriteriaRequest($membership_criteria_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createMembershipCriteria'
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO $membership_criteria_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMembershipCriteria'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createMembershipCriteriaRequest($membership_criteria_dto, string $contentType = self::contentTypes['createMembershipCriteria'][0])
    {

        // verify the required parameter 'membership_criteria_dto' is set
        if ($membership_criteria_dto === null || (is_array($membership_criteria_dto) && count($membership_criteria_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $membership_criteria_dto when calling createMembershipCriteria'
            );
        }


        $resourcePath = '/api/membership-criteria';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($membership_criteria_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($membership_criteria_dto));
            } else {
                $httpBody = $membership_criteria_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteMembershipCriteria
     *
     * @param  int $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteMembershipCriteria'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteMembershipCriteria($id, string $contentType = self::contentTypes['deleteMembershipCriteria'][0])
    {
        $this->deleteMembershipCriteriaWithHttpInfo($id, $contentType);
    }

    /**
     * Operation deleteMembershipCriteriaWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteMembershipCriteria'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteMembershipCriteriaWithHttpInfo($id, string $contentType = self::contentTypes['deleteMembershipCriteria'][0])
    {
        $request = $this->deleteMembershipCriteriaRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteMembershipCriteriaAsync
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteMembershipCriteria'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMembershipCriteriaAsync($id, string $contentType = self::contentTypes['deleteMembershipCriteria'][0])
    {
        return $this->deleteMembershipCriteriaAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteMembershipCriteriaAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteMembershipCriteria'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMembershipCriteriaAsyncWithHttpInfo($id, string $contentType = self::contentTypes['deleteMembershipCriteria'][0])
    {
        $returnType = '';
        $request = $this->deleteMembershipCriteriaRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteMembershipCriteria'
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteMembershipCriteria'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteMembershipCriteriaRequest($id, string $contentType = self::contentTypes['deleteMembershipCriteria'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteMembershipCriteria'
            );
        }


        $resourcePath = '/api/membership-criteria/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllMembershipCriteria
     *
     * @param  Pageable $pageable pageable (required)
     * @param  int $id_greater_than id_greater_than (optional)
     * @param  int $id_less_than id_less_than (optional)
     * @param  int $id_greater_than_or_equal id_greater_than_or_equal (optional)
     * @param  int $id_less_than_or_equal id_less_than_or_equal (optional)
     * @param  int $id_equals id_equals (optional)
     * @param  int $id_not_equals id_not_equals (optional)
     * @param  bool $id_specified id_specified (optional)
     * @param  int[] $id_in id_in (optional)
     * @param  int[] $id_not_in id_not_in (optional)
     * @param  string $name_contains name_contains (optional)
     * @param  string $name_does_not_contain name_does_not_contain (optional)
     * @param  string $name_equals name_equals (optional)
     * @param  string $name_not_equals name_not_equals (optional)
     * @param  bool $name_specified name_specified (optional)
     * @param  string[] $name_in name_in (optional)
     * @param  string[] $name_not_in name_not_in (optional)
     * @param  int $min_age_greater_than min_age_greater_than (optional)
     * @param  int $min_age_less_than min_age_less_than (optional)
     * @param  int $min_age_greater_than_or_equal min_age_greater_than_or_equal (optional)
     * @param  int $min_age_less_than_or_equal min_age_less_than_or_equal (optional)
     * @param  int $min_age_equals min_age_equals (optional)
     * @param  int $min_age_not_equals min_age_not_equals (optional)
     * @param  bool $min_age_specified min_age_specified (optional)
     * @param  int[] $min_age_in min_age_in (optional)
     * @param  int[] $min_age_not_in min_age_not_in (optional)
     * @param  int $max_age_greater_than max_age_greater_than (optional)
     * @param  int $max_age_less_than max_age_less_than (optional)
     * @param  int $max_age_greater_than_or_equal max_age_greater_than_or_equal (optional)
     * @param  int $max_age_less_than_or_equal max_age_less_than_or_equal (optional)
     * @param  int $max_age_equals max_age_equals (optional)
     * @param  int $max_age_not_equals max_age_not_equals (optional)
     * @param  bool $max_age_specified max_age_specified (optional)
     * @param  int[] $max_age_in max_age_in (optional)
     * @param  int[] $max_age_not_in max_age_not_in (optional)
     * @param  string $gender_equals gender_equals (optional)
     * @param  string $gender_not_equals gender_not_equals (optional)
     * @param  bool $gender_specified gender_specified (optional)
     * @param  string[] $gender_in gender_in (optional)
     * @param  string[] $gender_not_in gender_not_in (optional)
     * @param  int $period_id_greater_than period_id_greater_than (optional)
     * @param  int $period_id_less_than period_id_less_than (optional)
     * @param  int $period_id_greater_than_or_equal period_id_greater_than_or_equal (optional)
     * @param  int $period_id_less_than_or_equal period_id_less_than_or_equal (optional)
     * @param  int $period_id_equals period_id_equals (optional)
     * @param  int $period_id_not_equals period_id_not_equals (optional)
     * @param  bool $period_id_specified period_id_specified (optional)
     * @param  int[] $period_id_in period_id_in (optional)
     * @param  int[] $period_id_not_in period_id_not_in (optional)
     * @param  int $product_id_greater_than product_id_greater_than (optional)
     * @param  int $product_id_less_than product_id_less_than (optional)
     * @param  int $product_id_greater_than_or_equal product_id_greater_than_or_equal (optional)
     * @param  int $product_id_less_than_or_equal product_id_less_than_or_equal (optional)
     * @param  int $product_id_equals product_id_equals (optional)
     * @param  int $product_id_not_equals product_id_not_equals (optional)
     * @param  bool $product_id_specified product_id_specified (optional)
     * @param  int[] $product_id_in product_id_in (optional)
     * @param  int[] $product_id_not_in product_id_not_in (optional)
     * @param  int $number_type_id_greater_than number_type_id_greater_than (optional)
     * @param  int $number_type_id_less_than number_type_id_less_than (optional)
     * @param  int $number_type_id_greater_than_or_equal number_type_id_greater_than_or_equal (optional)
     * @param  int $number_type_id_less_than_or_equal number_type_id_less_than_or_equal (optional)
     * @param  int $number_type_id_equals number_type_id_equals (optional)
     * @param  int $number_type_id_not_equals number_type_id_not_equals (optional)
     * @param  bool $number_type_id_specified number_type_id_specified (optional)
     * @param  int[] $number_type_id_in number_type_id_in (optional)
     * @param  int[] $number_type_id_not_in number_type_id_not_in (optional)
     * @param  bool $distinct distinct (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllMembershipCriteria'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO[]
     */
    public function getAllMembershipCriteria($pageable, $id_greater_than = null, $id_less_than = null, $id_greater_than_or_equal = null, $id_less_than_or_equal = null, $id_equals = null, $id_not_equals = null, $id_specified = null, $id_in = null, $id_not_in = null, $name_contains = null, $name_does_not_contain = null, $name_equals = null, $name_not_equals = null, $name_specified = null, $name_in = null, $name_not_in = null, $min_age_greater_than = null, $min_age_less_than = null, $min_age_greater_than_or_equal = null, $min_age_less_than_or_equal = null, $min_age_equals = null, $min_age_not_equals = null, $min_age_specified = null, $min_age_in = null, $min_age_not_in = null, $max_age_greater_than = null, $max_age_less_than = null, $max_age_greater_than_or_equal = null, $max_age_less_than_or_equal = null, $max_age_equals = null, $max_age_not_equals = null, $max_age_specified = null, $max_age_in = null, $max_age_not_in = null, $gender_equals = null, $gender_not_equals = null, $gender_specified = null, $gender_in = null, $gender_not_in = null, $period_id_greater_than = null, $period_id_less_than = null, $period_id_greater_than_or_equal = null, $period_id_less_than_or_equal = null, $period_id_equals = null, $period_id_not_equals = null, $period_id_specified = null, $period_id_in = null, $period_id_not_in = null, $product_id_greater_than = null, $product_id_less_than = null, $product_id_greater_than_or_equal = null, $product_id_less_than_or_equal = null, $product_id_equals = null, $product_id_not_equals = null, $product_id_specified = null, $product_id_in = null, $product_id_not_in = null, $number_type_id_greater_than = null, $number_type_id_less_than = null, $number_type_id_greater_than_or_equal = null, $number_type_id_less_than_or_equal = null, $number_type_id_equals = null, $number_type_id_not_equals = null, $number_type_id_specified = null, $number_type_id_in = null, $number_type_id_not_in = null, $distinct = null, string $contentType = self::contentTypes['getAllMembershipCriteria'][0])
    {
        list($response) = $this->getAllMembershipCriteriaWithHttpInfo($pageable, $id_greater_than, $id_less_than, $id_greater_than_or_equal, $id_less_than_or_equal, $id_equals, $id_not_equals, $id_specified, $id_in, $id_not_in, $name_contains, $name_does_not_contain, $name_equals, $name_not_equals, $name_specified, $name_in, $name_not_in, $min_age_greater_than, $min_age_less_than, $min_age_greater_than_or_equal, $min_age_less_than_or_equal, $min_age_equals, $min_age_not_equals, $min_age_specified, $min_age_in, $min_age_not_in, $max_age_greater_than, $max_age_less_than, $max_age_greater_than_or_equal, $max_age_less_than_or_equal, $max_age_equals, $max_age_not_equals, $max_age_specified, $max_age_in, $max_age_not_in, $gender_equals, $gender_not_equals, $gender_specified, $gender_in, $gender_not_in, $period_id_greater_than, $period_id_less_than, $period_id_greater_than_or_equal, $period_id_less_than_or_equal, $period_id_equals, $period_id_not_equals, $period_id_specified, $period_id_in, $period_id_not_in, $product_id_greater_than, $product_id_less_than, $product_id_greater_than_or_equal, $product_id_less_than_or_equal, $product_id_equals, $product_id_not_equals, $product_id_specified, $product_id_in, $product_id_not_in, $number_type_id_greater_than, $number_type_id_less_than, $number_type_id_greater_than_or_equal, $number_type_id_less_than_or_equal, $number_type_id_equals, $number_type_id_not_equals, $number_type_id_specified, $number_type_id_in, $number_type_id_not_in, $distinct, $contentType);
        return $response;
    }

    /**
     * Operation getAllMembershipCriteriaWithHttpInfo
     *
     * @param  Pageable $pageable (required)
     * @param  int $id_greater_than (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_equals (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int[] $id_in (optional)
     * @param  int[] $id_not_in (optional)
     * @param  string $name_contains (optional)
     * @param  string $name_does_not_contain (optional)
     * @param  string $name_equals (optional)
     * @param  string $name_not_equals (optional)
     * @param  bool $name_specified (optional)
     * @param  string[] $name_in (optional)
     * @param  string[] $name_not_in (optional)
     * @param  int $min_age_greater_than (optional)
     * @param  int $min_age_less_than (optional)
     * @param  int $min_age_greater_than_or_equal (optional)
     * @param  int $min_age_less_than_or_equal (optional)
     * @param  int $min_age_equals (optional)
     * @param  int $min_age_not_equals (optional)
     * @param  bool $min_age_specified (optional)
     * @param  int[] $min_age_in (optional)
     * @param  int[] $min_age_not_in (optional)
     * @param  int $max_age_greater_than (optional)
     * @param  int $max_age_less_than (optional)
     * @param  int $max_age_greater_than_or_equal (optional)
     * @param  int $max_age_less_than_or_equal (optional)
     * @param  int $max_age_equals (optional)
     * @param  int $max_age_not_equals (optional)
     * @param  bool $max_age_specified (optional)
     * @param  int[] $max_age_in (optional)
     * @param  int[] $max_age_not_in (optional)
     * @param  string $gender_equals (optional)
     * @param  string $gender_not_equals (optional)
     * @param  bool $gender_specified (optional)
     * @param  string[] $gender_in (optional)
     * @param  string[] $gender_not_in (optional)
     * @param  int $period_id_greater_than (optional)
     * @param  int $period_id_less_than (optional)
     * @param  int $period_id_greater_than_or_equal (optional)
     * @param  int $period_id_less_than_or_equal (optional)
     * @param  int $period_id_equals (optional)
     * @param  int $period_id_not_equals (optional)
     * @param  bool $period_id_specified (optional)
     * @param  int[] $period_id_in (optional)
     * @param  int[] $period_id_not_in (optional)
     * @param  int $product_id_greater_than (optional)
     * @param  int $product_id_less_than (optional)
     * @param  int $product_id_greater_than_or_equal (optional)
     * @param  int $product_id_less_than_or_equal (optional)
     * @param  int $product_id_equals (optional)
     * @param  int $product_id_not_equals (optional)
     * @param  bool $product_id_specified (optional)
     * @param  int[] $product_id_in (optional)
     * @param  int[] $product_id_not_in (optional)
     * @param  int $number_type_id_greater_than (optional)
     * @param  int $number_type_id_less_than (optional)
     * @param  int $number_type_id_greater_than_or_equal (optional)
     * @param  int $number_type_id_less_than_or_equal (optional)
     * @param  int $number_type_id_equals (optional)
     * @param  int $number_type_id_not_equals (optional)
     * @param  bool $number_type_id_specified (optional)
     * @param  int[] $number_type_id_in (optional)
     * @param  int[] $number_type_id_not_in (optional)
     * @param  bool $distinct (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllMembershipCriteria'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllMembershipCriteriaWithHttpInfo($pageable, $id_greater_than = null, $id_less_than = null, $id_greater_than_or_equal = null, $id_less_than_or_equal = null, $id_equals = null, $id_not_equals = null, $id_specified = null, $id_in = null, $id_not_in = null, $name_contains = null, $name_does_not_contain = null, $name_equals = null, $name_not_equals = null, $name_specified = null, $name_in = null, $name_not_in = null, $min_age_greater_than = null, $min_age_less_than = null, $min_age_greater_than_or_equal = null, $min_age_less_than_or_equal = null, $min_age_equals = null, $min_age_not_equals = null, $min_age_specified = null, $min_age_in = null, $min_age_not_in = null, $max_age_greater_than = null, $max_age_less_than = null, $max_age_greater_than_or_equal = null, $max_age_less_than_or_equal = null, $max_age_equals = null, $max_age_not_equals = null, $max_age_specified = null, $max_age_in = null, $max_age_not_in = null, $gender_equals = null, $gender_not_equals = null, $gender_specified = null, $gender_in = null, $gender_not_in = null, $period_id_greater_than = null, $period_id_less_than = null, $period_id_greater_than_or_equal = null, $period_id_less_than_or_equal = null, $period_id_equals = null, $period_id_not_equals = null, $period_id_specified = null, $period_id_in = null, $period_id_not_in = null, $product_id_greater_than = null, $product_id_less_than = null, $product_id_greater_than_or_equal = null, $product_id_less_than_or_equal = null, $product_id_equals = null, $product_id_not_equals = null, $product_id_specified = null, $product_id_in = null, $product_id_not_in = null, $number_type_id_greater_than = null, $number_type_id_less_than = null, $number_type_id_greater_than_or_equal = null, $number_type_id_less_than_or_equal = null, $number_type_id_equals = null, $number_type_id_not_equals = null, $number_type_id_specified = null, $number_type_id_in = null, $number_type_id_not_in = null, $distinct = null, string $contentType = self::contentTypes['getAllMembershipCriteria'][0])
    {
        $request = $this->getAllMembershipCriteriaRequest($pageable, $id_greater_than, $id_less_than, $id_greater_than_or_equal, $id_less_than_or_equal, $id_equals, $id_not_equals, $id_specified, $id_in, $id_not_in, $name_contains, $name_does_not_contain, $name_equals, $name_not_equals, $name_specified, $name_in, $name_not_in, $min_age_greater_than, $min_age_less_than, $min_age_greater_than_or_equal, $min_age_less_than_or_equal, $min_age_equals, $min_age_not_equals, $min_age_specified, $min_age_in, $min_age_not_in, $max_age_greater_than, $max_age_less_than, $max_age_greater_than_or_equal, $max_age_less_than_or_equal, $max_age_equals, $max_age_not_equals, $max_age_specified, $max_age_in, $max_age_not_in, $gender_equals, $gender_not_equals, $gender_specified, $gender_in, $gender_not_in, $period_id_greater_than, $period_id_less_than, $period_id_greater_than_or_equal, $period_id_less_than_or_equal, $period_id_equals, $period_id_not_equals, $period_id_specified, $period_id_in, $period_id_not_in, $product_id_greater_than, $product_id_less_than, $product_id_greater_than_or_equal, $product_id_less_than_or_equal, $product_id_equals, $product_id_not_equals, $product_id_specified, $product_id_in, $product_id_not_in, $number_type_id_greater_than, $number_type_id_less_than, $number_type_id_greater_than_or_equal, $number_type_id_less_than_or_equal, $number_type_id_equals, $number_type_id_not_equals, $number_type_id_specified, $number_type_id_in, $number_type_id_not_in, $distinct, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllMembershipCriteriaAsync
     *
     * @param  Pageable $pageable (required)
     * @param  int $id_greater_than (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_equals (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int[] $id_in (optional)
     * @param  int[] $id_not_in (optional)
     * @param  string $name_contains (optional)
     * @param  string $name_does_not_contain (optional)
     * @param  string $name_equals (optional)
     * @param  string $name_not_equals (optional)
     * @param  bool $name_specified (optional)
     * @param  string[] $name_in (optional)
     * @param  string[] $name_not_in (optional)
     * @param  int $min_age_greater_than (optional)
     * @param  int $min_age_less_than (optional)
     * @param  int $min_age_greater_than_or_equal (optional)
     * @param  int $min_age_less_than_or_equal (optional)
     * @param  int $min_age_equals (optional)
     * @param  int $min_age_not_equals (optional)
     * @param  bool $min_age_specified (optional)
     * @param  int[] $min_age_in (optional)
     * @param  int[] $min_age_not_in (optional)
     * @param  int $max_age_greater_than (optional)
     * @param  int $max_age_less_than (optional)
     * @param  int $max_age_greater_than_or_equal (optional)
     * @param  int $max_age_less_than_or_equal (optional)
     * @param  int $max_age_equals (optional)
     * @param  int $max_age_not_equals (optional)
     * @param  bool $max_age_specified (optional)
     * @param  int[] $max_age_in (optional)
     * @param  int[] $max_age_not_in (optional)
     * @param  string $gender_equals (optional)
     * @param  string $gender_not_equals (optional)
     * @param  bool $gender_specified (optional)
     * @param  string[] $gender_in (optional)
     * @param  string[] $gender_not_in (optional)
     * @param  int $period_id_greater_than (optional)
     * @param  int $period_id_less_than (optional)
     * @param  int $period_id_greater_than_or_equal (optional)
     * @param  int $period_id_less_than_or_equal (optional)
     * @param  int $period_id_equals (optional)
     * @param  int $period_id_not_equals (optional)
     * @param  bool $period_id_specified (optional)
     * @param  int[] $period_id_in (optional)
     * @param  int[] $period_id_not_in (optional)
     * @param  int $product_id_greater_than (optional)
     * @param  int $product_id_less_than (optional)
     * @param  int $product_id_greater_than_or_equal (optional)
     * @param  int $product_id_less_than_or_equal (optional)
     * @param  int $product_id_equals (optional)
     * @param  int $product_id_not_equals (optional)
     * @param  bool $product_id_specified (optional)
     * @param  int[] $product_id_in (optional)
     * @param  int[] $product_id_not_in (optional)
     * @param  int $number_type_id_greater_than (optional)
     * @param  int $number_type_id_less_than (optional)
     * @param  int $number_type_id_greater_than_or_equal (optional)
     * @param  int $number_type_id_less_than_or_equal (optional)
     * @param  int $number_type_id_equals (optional)
     * @param  int $number_type_id_not_equals (optional)
     * @param  bool $number_type_id_specified (optional)
     * @param  int[] $number_type_id_in (optional)
     * @param  int[] $number_type_id_not_in (optional)
     * @param  bool $distinct (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllMembershipCriteria'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllMembershipCriteriaAsync($pageable, $id_greater_than = null, $id_less_than = null, $id_greater_than_or_equal = null, $id_less_than_or_equal = null, $id_equals = null, $id_not_equals = null, $id_specified = null, $id_in = null, $id_not_in = null, $name_contains = null, $name_does_not_contain = null, $name_equals = null, $name_not_equals = null, $name_specified = null, $name_in = null, $name_not_in = null, $min_age_greater_than = null, $min_age_less_than = null, $min_age_greater_than_or_equal = null, $min_age_less_than_or_equal = null, $min_age_equals = null, $min_age_not_equals = null, $min_age_specified = null, $min_age_in = null, $min_age_not_in = null, $max_age_greater_than = null, $max_age_less_than = null, $max_age_greater_than_or_equal = null, $max_age_less_than_or_equal = null, $max_age_equals = null, $max_age_not_equals = null, $max_age_specified = null, $max_age_in = null, $max_age_not_in = null, $gender_equals = null, $gender_not_equals = null, $gender_specified = null, $gender_in = null, $gender_not_in = null, $period_id_greater_than = null, $period_id_less_than = null, $period_id_greater_than_or_equal = null, $period_id_less_than_or_equal = null, $period_id_equals = null, $period_id_not_equals = null, $period_id_specified = null, $period_id_in = null, $period_id_not_in = null, $product_id_greater_than = null, $product_id_less_than = null, $product_id_greater_than_or_equal = null, $product_id_less_than_or_equal = null, $product_id_equals = null, $product_id_not_equals = null, $product_id_specified = null, $product_id_in = null, $product_id_not_in = null, $number_type_id_greater_than = null, $number_type_id_less_than = null, $number_type_id_greater_than_or_equal = null, $number_type_id_less_than_or_equal = null, $number_type_id_equals = null, $number_type_id_not_equals = null, $number_type_id_specified = null, $number_type_id_in = null, $number_type_id_not_in = null, $distinct = null, string $contentType = self::contentTypes['getAllMembershipCriteria'][0])
    {
        return $this->getAllMembershipCriteriaAsyncWithHttpInfo($pageable, $id_greater_than, $id_less_than, $id_greater_than_or_equal, $id_less_than_or_equal, $id_equals, $id_not_equals, $id_specified, $id_in, $id_not_in, $name_contains, $name_does_not_contain, $name_equals, $name_not_equals, $name_specified, $name_in, $name_not_in, $min_age_greater_than, $min_age_less_than, $min_age_greater_than_or_equal, $min_age_less_than_or_equal, $min_age_equals, $min_age_not_equals, $min_age_specified, $min_age_in, $min_age_not_in, $max_age_greater_than, $max_age_less_than, $max_age_greater_than_or_equal, $max_age_less_than_or_equal, $max_age_equals, $max_age_not_equals, $max_age_specified, $max_age_in, $max_age_not_in, $gender_equals, $gender_not_equals, $gender_specified, $gender_in, $gender_not_in, $period_id_greater_than, $period_id_less_than, $period_id_greater_than_or_equal, $period_id_less_than_or_equal, $period_id_equals, $period_id_not_equals, $period_id_specified, $period_id_in, $period_id_not_in, $product_id_greater_than, $product_id_less_than, $product_id_greater_than_or_equal, $product_id_less_than_or_equal, $product_id_equals, $product_id_not_equals, $product_id_specified, $product_id_in, $product_id_not_in, $number_type_id_greater_than, $number_type_id_less_than, $number_type_id_greater_than_or_equal, $number_type_id_less_than_or_equal, $number_type_id_equals, $number_type_id_not_equals, $number_type_id_specified, $number_type_id_in, $number_type_id_not_in, $distinct, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllMembershipCriteriaAsyncWithHttpInfo
     *
     * @param  Pageable $pageable (required)
     * @param  int $id_greater_than (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_equals (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int[] $id_in (optional)
     * @param  int[] $id_not_in (optional)
     * @param  string $name_contains (optional)
     * @param  string $name_does_not_contain (optional)
     * @param  string $name_equals (optional)
     * @param  string $name_not_equals (optional)
     * @param  bool $name_specified (optional)
     * @param  string[] $name_in (optional)
     * @param  string[] $name_not_in (optional)
     * @param  int $min_age_greater_than (optional)
     * @param  int $min_age_less_than (optional)
     * @param  int $min_age_greater_than_or_equal (optional)
     * @param  int $min_age_less_than_or_equal (optional)
     * @param  int $min_age_equals (optional)
     * @param  int $min_age_not_equals (optional)
     * @param  bool $min_age_specified (optional)
     * @param  int[] $min_age_in (optional)
     * @param  int[] $min_age_not_in (optional)
     * @param  int $max_age_greater_than (optional)
     * @param  int $max_age_less_than (optional)
     * @param  int $max_age_greater_than_or_equal (optional)
     * @param  int $max_age_less_than_or_equal (optional)
     * @param  int $max_age_equals (optional)
     * @param  int $max_age_not_equals (optional)
     * @param  bool $max_age_specified (optional)
     * @param  int[] $max_age_in (optional)
     * @param  int[] $max_age_not_in (optional)
     * @param  string $gender_equals (optional)
     * @param  string $gender_not_equals (optional)
     * @param  bool $gender_specified (optional)
     * @param  string[] $gender_in (optional)
     * @param  string[] $gender_not_in (optional)
     * @param  int $period_id_greater_than (optional)
     * @param  int $period_id_less_than (optional)
     * @param  int $period_id_greater_than_or_equal (optional)
     * @param  int $period_id_less_than_or_equal (optional)
     * @param  int $period_id_equals (optional)
     * @param  int $period_id_not_equals (optional)
     * @param  bool $period_id_specified (optional)
     * @param  int[] $period_id_in (optional)
     * @param  int[] $period_id_not_in (optional)
     * @param  int $product_id_greater_than (optional)
     * @param  int $product_id_less_than (optional)
     * @param  int $product_id_greater_than_or_equal (optional)
     * @param  int $product_id_less_than_or_equal (optional)
     * @param  int $product_id_equals (optional)
     * @param  int $product_id_not_equals (optional)
     * @param  bool $product_id_specified (optional)
     * @param  int[] $product_id_in (optional)
     * @param  int[] $product_id_not_in (optional)
     * @param  int $number_type_id_greater_than (optional)
     * @param  int $number_type_id_less_than (optional)
     * @param  int $number_type_id_greater_than_or_equal (optional)
     * @param  int $number_type_id_less_than_or_equal (optional)
     * @param  int $number_type_id_equals (optional)
     * @param  int $number_type_id_not_equals (optional)
     * @param  bool $number_type_id_specified (optional)
     * @param  int[] $number_type_id_in (optional)
     * @param  int[] $number_type_id_not_in (optional)
     * @param  bool $distinct (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllMembershipCriteria'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllMembershipCriteriaAsyncWithHttpInfo($pageable, $id_greater_than = null, $id_less_than = null, $id_greater_than_or_equal = null, $id_less_than_or_equal = null, $id_equals = null, $id_not_equals = null, $id_specified = null, $id_in = null, $id_not_in = null, $name_contains = null, $name_does_not_contain = null, $name_equals = null, $name_not_equals = null, $name_specified = null, $name_in = null, $name_not_in = null, $min_age_greater_than = null, $min_age_less_than = null, $min_age_greater_than_or_equal = null, $min_age_less_than_or_equal = null, $min_age_equals = null, $min_age_not_equals = null, $min_age_specified = null, $min_age_in = null, $min_age_not_in = null, $max_age_greater_than = null, $max_age_less_than = null, $max_age_greater_than_or_equal = null, $max_age_less_than_or_equal = null, $max_age_equals = null, $max_age_not_equals = null, $max_age_specified = null, $max_age_in = null, $max_age_not_in = null, $gender_equals = null, $gender_not_equals = null, $gender_specified = null, $gender_in = null, $gender_not_in = null, $period_id_greater_than = null, $period_id_less_than = null, $period_id_greater_than_or_equal = null, $period_id_less_than_or_equal = null, $period_id_equals = null, $period_id_not_equals = null, $period_id_specified = null, $period_id_in = null, $period_id_not_in = null, $product_id_greater_than = null, $product_id_less_than = null, $product_id_greater_than_or_equal = null, $product_id_less_than_or_equal = null, $product_id_equals = null, $product_id_not_equals = null, $product_id_specified = null, $product_id_in = null, $product_id_not_in = null, $number_type_id_greater_than = null, $number_type_id_less_than = null, $number_type_id_greater_than_or_equal = null, $number_type_id_less_than_or_equal = null, $number_type_id_equals = null, $number_type_id_not_equals = null, $number_type_id_specified = null, $number_type_id_in = null, $number_type_id_not_in = null, $distinct = null, string $contentType = self::contentTypes['getAllMembershipCriteria'][0])
    {
        $returnType = '\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO[]';
        $request = $this->getAllMembershipCriteriaRequest($pageable, $id_greater_than, $id_less_than, $id_greater_than_or_equal, $id_less_than_or_equal, $id_equals, $id_not_equals, $id_specified, $id_in, $id_not_in, $name_contains, $name_does_not_contain, $name_equals, $name_not_equals, $name_specified, $name_in, $name_not_in, $min_age_greater_than, $min_age_less_than, $min_age_greater_than_or_equal, $min_age_less_than_or_equal, $min_age_equals, $min_age_not_equals, $min_age_specified, $min_age_in, $min_age_not_in, $max_age_greater_than, $max_age_less_than, $max_age_greater_than_or_equal, $max_age_less_than_or_equal, $max_age_equals, $max_age_not_equals, $max_age_specified, $max_age_in, $max_age_not_in, $gender_equals, $gender_not_equals, $gender_specified, $gender_in, $gender_not_in, $period_id_greater_than, $period_id_less_than, $period_id_greater_than_or_equal, $period_id_less_than_or_equal, $period_id_equals, $period_id_not_equals, $period_id_specified, $period_id_in, $period_id_not_in, $product_id_greater_than, $product_id_less_than, $product_id_greater_than_or_equal, $product_id_less_than_or_equal, $product_id_equals, $product_id_not_equals, $product_id_specified, $product_id_in, $product_id_not_in, $number_type_id_greater_than, $number_type_id_less_than, $number_type_id_greater_than_or_equal, $number_type_id_less_than_or_equal, $number_type_id_equals, $number_type_id_not_equals, $number_type_id_specified, $number_type_id_in, $number_type_id_not_in, $distinct, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllMembershipCriteria'
     *
     * @param  Pageable $pageable (required)
     * @param  int $id_greater_than (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_equals (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int[] $id_in (optional)
     * @param  int[] $id_not_in (optional)
     * @param  string $name_contains (optional)
     * @param  string $name_does_not_contain (optional)
     * @param  string $name_equals (optional)
     * @param  string $name_not_equals (optional)
     * @param  bool $name_specified (optional)
     * @param  string[] $name_in (optional)
     * @param  string[] $name_not_in (optional)
     * @param  int $min_age_greater_than (optional)
     * @param  int $min_age_less_than (optional)
     * @param  int $min_age_greater_than_or_equal (optional)
     * @param  int $min_age_less_than_or_equal (optional)
     * @param  int $min_age_equals (optional)
     * @param  int $min_age_not_equals (optional)
     * @param  bool $min_age_specified (optional)
     * @param  int[] $min_age_in (optional)
     * @param  int[] $min_age_not_in (optional)
     * @param  int $max_age_greater_than (optional)
     * @param  int $max_age_less_than (optional)
     * @param  int $max_age_greater_than_or_equal (optional)
     * @param  int $max_age_less_than_or_equal (optional)
     * @param  int $max_age_equals (optional)
     * @param  int $max_age_not_equals (optional)
     * @param  bool $max_age_specified (optional)
     * @param  int[] $max_age_in (optional)
     * @param  int[] $max_age_not_in (optional)
     * @param  string $gender_equals (optional)
     * @param  string $gender_not_equals (optional)
     * @param  bool $gender_specified (optional)
     * @param  string[] $gender_in (optional)
     * @param  string[] $gender_not_in (optional)
     * @param  int $period_id_greater_than (optional)
     * @param  int $period_id_less_than (optional)
     * @param  int $period_id_greater_than_or_equal (optional)
     * @param  int $period_id_less_than_or_equal (optional)
     * @param  int $period_id_equals (optional)
     * @param  int $period_id_not_equals (optional)
     * @param  bool $period_id_specified (optional)
     * @param  int[] $period_id_in (optional)
     * @param  int[] $period_id_not_in (optional)
     * @param  int $product_id_greater_than (optional)
     * @param  int $product_id_less_than (optional)
     * @param  int $product_id_greater_than_or_equal (optional)
     * @param  int $product_id_less_than_or_equal (optional)
     * @param  int $product_id_equals (optional)
     * @param  int $product_id_not_equals (optional)
     * @param  bool $product_id_specified (optional)
     * @param  int[] $product_id_in (optional)
     * @param  int[] $product_id_not_in (optional)
     * @param  int $number_type_id_greater_than (optional)
     * @param  int $number_type_id_less_than (optional)
     * @param  int $number_type_id_greater_than_or_equal (optional)
     * @param  int $number_type_id_less_than_or_equal (optional)
     * @param  int $number_type_id_equals (optional)
     * @param  int $number_type_id_not_equals (optional)
     * @param  bool $number_type_id_specified (optional)
     * @param  int[] $number_type_id_in (optional)
     * @param  int[] $number_type_id_not_in (optional)
     * @param  bool $distinct (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllMembershipCriteria'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllMembershipCriteriaRequest($pageable, $id_greater_than = null, $id_less_than = null, $id_greater_than_or_equal = null, $id_less_than_or_equal = null, $id_equals = null, $id_not_equals = null, $id_specified = null, $id_in = null, $id_not_in = null, $name_contains = null, $name_does_not_contain = null, $name_equals = null, $name_not_equals = null, $name_specified = null, $name_in = null, $name_not_in = null, $min_age_greater_than = null, $min_age_less_than = null, $min_age_greater_than_or_equal = null, $min_age_less_than_or_equal = null, $min_age_equals = null, $min_age_not_equals = null, $min_age_specified = null, $min_age_in = null, $min_age_not_in = null, $max_age_greater_than = null, $max_age_less_than = null, $max_age_greater_than_or_equal = null, $max_age_less_than_or_equal = null, $max_age_equals = null, $max_age_not_equals = null, $max_age_specified = null, $max_age_in = null, $max_age_not_in = null, $gender_equals = null, $gender_not_equals = null, $gender_specified = null, $gender_in = null, $gender_not_in = null, $period_id_greater_than = null, $period_id_less_than = null, $period_id_greater_than_or_equal = null, $period_id_less_than_or_equal = null, $period_id_equals = null, $period_id_not_equals = null, $period_id_specified = null, $period_id_in = null, $period_id_not_in = null, $product_id_greater_than = null, $product_id_less_than = null, $product_id_greater_than_or_equal = null, $product_id_less_than_or_equal = null, $product_id_equals = null, $product_id_not_equals = null, $product_id_specified = null, $product_id_in = null, $product_id_not_in = null, $number_type_id_greater_than = null, $number_type_id_less_than = null, $number_type_id_greater_than_or_equal = null, $number_type_id_less_than_or_equal = null, $number_type_id_equals = null, $number_type_id_not_equals = null, $number_type_id_specified = null, $number_type_id_in = null, $number_type_id_not_in = null, $distinct = null, string $contentType = self::contentTypes['getAllMembershipCriteria'][0])
    {

        // verify the required parameter 'pageable' is set
        if ($pageable === null || (is_array($pageable) && count($pageable) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pageable when calling getAllMembershipCriteria'
            );
        }





































































        $resourcePath = '/api/membership-criteria';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_greater_than,
            'id.greaterThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_less_than,
            'id.lessThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_greater_than_or_equal,
            'id.greaterThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_less_than_or_equal,
            'id.lessThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_equals,
            'id.equals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_not_equals,
            'id.notEquals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_specified,
            'id.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_in,
            'id.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_not_in,
            'id.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name_contains,
            'name.contains', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name_does_not_contain,
            'name.doesNotContain', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name_equals,
            'name.equals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name_not_equals,
            'name.notEquals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name_specified,
            'name.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name_in,
            'name.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name_not_in,
            'name.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_age_greater_than,
            'minAge.greaterThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_age_less_than,
            'minAge.lessThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_age_greater_than_or_equal,
            'minAge.greaterThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_age_less_than_or_equal,
            'minAge.lessThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_age_equals,
            'minAge.equals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_age_not_equals,
            'minAge.notEquals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_age_specified,
            'minAge.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_age_in,
            'minAge.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_age_not_in,
            'minAge.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_age_greater_than,
            'maxAge.greaterThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_age_less_than,
            'maxAge.lessThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_age_greater_than_or_equal,
            'maxAge.greaterThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_age_less_than_or_equal,
            'maxAge.lessThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_age_equals,
            'maxAge.equals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_age_not_equals,
            'maxAge.notEquals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_age_specified,
            'maxAge.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_age_in,
            'maxAge.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_age_not_in,
            'maxAge.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $gender_equals,
            'gender.equals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $gender_not_equals,
            'gender.notEquals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $gender_specified,
            'gender.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $gender_in,
            'gender.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $gender_not_in,
            'gender.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period_id_greater_than,
            'periodId.greaterThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period_id_less_than,
            'periodId.lessThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period_id_greater_than_or_equal,
            'periodId.greaterThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period_id_less_than_or_equal,
            'periodId.lessThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period_id_equals,
            'periodId.equals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period_id_not_equals,
            'periodId.notEquals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period_id_specified,
            'periodId.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period_id_in,
            'periodId.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period_id_not_in,
            'periodId.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product_id_greater_than,
            'productId.greaterThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product_id_less_than,
            'productId.lessThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product_id_greater_than_or_equal,
            'productId.greaterThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product_id_less_than_or_equal,
            'productId.lessThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product_id_equals,
            'productId.equals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product_id_not_equals,
            'productId.notEquals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product_id_specified,
            'productId.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product_id_in,
            'productId.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product_id_not_in,
            'productId.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_type_id_greater_than,
            'numberTypeId.greaterThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_type_id_less_than,
            'numberTypeId.lessThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_type_id_greater_than_or_equal,
            'numberTypeId.greaterThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_type_id_less_than_or_equal,
            'numberTypeId.lessThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_type_id_equals,
            'numberTypeId.equals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_type_id_not_equals,
            'numberTypeId.notEquals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_type_id_specified,
            'numberTypeId.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_type_id_in,
            'numberTypeId.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_type_id_not_in,
            'numberTypeId.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $distinct,
            'distinct', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pageable,
            'pageable', // param base name
            'object', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMembershipCriteria
     *
     * @param  int $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMembershipCriteria'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO
     */
    public function getMembershipCriteria($id, string $contentType = self::contentTypes['getMembershipCriteria'][0])
    {
        list($response) = $this->getMembershipCriteriaWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getMembershipCriteriaWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMembershipCriteria'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMembershipCriteriaWithHttpInfo($id, string $contentType = self::contentTypes['getMembershipCriteria'][0])
    {
        $request = $this->getMembershipCriteriaRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMembershipCriteriaAsync
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMembershipCriteria'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMembershipCriteriaAsync($id, string $contentType = self::contentTypes['getMembershipCriteria'][0])
    {
        return $this->getMembershipCriteriaAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMembershipCriteriaAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMembershipCriteria'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMembershipCriteriaAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getMembershipCriteria'][0])
    {
        $returnType = '\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO';
        $request = $this->getMembershipCriteriaRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMembershipCriteria'
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMembershipCriteria'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMembershipCriteriaRequest($id, string $contentType = self::contentTypes['getMembershipCriteria'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getMembershipCriteria'
            );
        }


        $resourcePath = '/api/membership-criteria/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation partialUpdateMembershipCriteria
     *
     * @param  int $id id (required)
     * @param  \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO $membership_criteria_dto membership_criteria_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['partialUpdateMembershipCriteria'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO
     */
    public function partialUpdateMembershipCriteria($id, $membership_criteria_dto, string $contentType = self::contentTypes['partialUpdateMembershipCriteria'][0])
    {
        list($response) = $this->partialUpdateMembershipCriteriaWithHttpInfo($id, $membership_criteria_dto, $contentType);
        return $response;
    }

    /**
     * Operation partialUpdateMembershipCriteriaWithHttpInfo
     *
     * @param  int $id (required)
     * @param  \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO $membership_criteria_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['partialUpdateMembershipCriteria'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function partialUpdateMembershipCriteriaWithHttpInfo($id, $membership_criteria_dto, string $contentType = self::contentTypes['partialUpdateMembershipCriteria'][0])
    {
        $request = $this->partialUpdateMembershipCriteriaRequest($id, $membership_criteria_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation partialUpdateMembershipCriteriaAsync
     *
     * @param  int $id (required)
     * @param  \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO $membership_criteria_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['partialUpdateMembershipCriteria'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function partialUpdateMembershipCriteriaAsync($id, $membership_criteria_dto, string $contentType = self::contentTypes['partialUpdateMembershipCriteria'][0])
    {
        return $this->partialUpdateMembershipCriteriaAsyncWithHttpInfo($id, $membership_criteria_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation partialUpdateMembershipCriteriaAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO $membership_criteria_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['partialUpdateMembershipCriteria'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function partialUpdateMembershipCriteriaAsyncWithHttpInfo($id, $membership_criteria_dto, string $contentType = self::contentTypes['partialUpdateMembershipCriteria'][0])
    {
        $returnType = '\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO';
        $request = $this->partialUpdateMembershipCriteriaRequest($id, $membership_criteria_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'partialUpdateMembershipCriteria'
     *
     * @param  int $id (required)
     * @param  \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO $membership_criteria_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['partialUpdateMembershipCriteria'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function partialUpdateMembershipCriteriaRequest($id, $membership_criteria_dto, string $contentType = self::contentTypes['partialUpdateMembershipCriteria'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling partialUpdateMembershipCriteria'
            );
        }

        // verify the required parameter 'membership_criteria_dto' is set
        if ($membership_criteria_dto === null || (is_array($membership_criteria_dto) && count($membership_criteria_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $membership_criteria_dto when calling partialUpdateMembershipCriteria'
            );
        }


        $resourcePath = '/api/membership-criteria/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($membership_criteria_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($membership_criteria_dto));
            } else {
                $httpBody = $membership_criteria_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateMembershipCriteria
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO $membership_criteria_dto membership_criteria_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMembershipCriteria'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO
     */
    public function updateMembershipCriteria($membership_criteria_dto, string $contentType = self::contentTypes['updateMembershipCriteria'][0])
    {
        list($response) = $this->updateMembershipCriteriaWithHttpInfo($membership_criteria_dto, $contentType);
        return $response;
    }

    /**
     * Operation updateMembershipCriteriaWithHttpInfo
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO $membership_criteria_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMembershipCriteria'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateMembershipCriteriaWithHttpInfo($membership_criteria_dto, string $contentType = self::contentTypes['updateMembershipCriteria'][0])
    {
        $request = $this->updateMembershipCriteriaRequest($membership_criteria_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateMembershipCriteriaAsync
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO $membership_criteria_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMembershipCriteria'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateMembershipCriteriaAsync($membership_criteria_dto, string $contentType = self::contentTypes['updateMembershipCriteria'][0])
    {
        return $this->updateMembershipCriteriaAsyncWithHttpInfo($membership_criteria_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateMembershipCriteriaAsyncWithHttpInfo
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO $membership_criteria_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMembershipCriteria'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateMembershipCriteriaAsyncWithHttpInfo($membership_criteria_dto, string $contentType = self::contentTypes['updateMembershipCriteria'][0])
    {
        $returnType = '\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO';
        $request = $this->updateMembershipCriteriaRequest($membership_criteria_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateMembershipCriteria'
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO $membership_criteria_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMembershipCriteria'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateMembershipCriteriaRequest($membership_criteria_dto, string $contentType = self::contentTypes['updateMembershipCriteria'][0])
    {

        // verify the required parameter 'membership_criteria_dto' is set
        if ($membership_criteria_dto === null || (is_array($membership_criteria_dto) && count($membership_criteria_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $membership_criteria_dto when calling updateMembershipCriteria'
            );
        }


        $resourcePath = '/api/membership-criteria';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($membership_criteria_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($membership_criteria_dto));
            } else {
                $httpBody = $membership_criteria_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateMembershipCriteria1
     *
     * @param  int $id id (required)
     * @param  \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO $membership_criteria_dto membership_criteria_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMembershipCriteria1'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO
     */
    public function updateMembershipCriteria1($id, $membership_criteria_dto, string $contentType = self::contentTypes['updateMembershipCriteria1'][0])
    {
        list($response) = $this->updateMembershipCriteria1WithHttpInfo($id, $membership_criteria_dto, $contentType);
        return $response;
    }

    /**
     * Operation updateMembershipCriteria1WithHttpInfo
     *
     * @param  int $id (required)
     * @param  \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO $membership_criteria_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMembershipCriteria1'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateMembershipCriteria1WithHttpInfo($id, $membership_criteria_dto, string $contentType = self::contentTypes['updateMembershipCriteria1'][0])
    {
        $request = $this->updateMembershipCriteria1Request($id, $membership_criteria_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateMembershipCriteria1Async
     *
     * @param  int $id (required)
     * @param  \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO $membership_criteria_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMembershipCriteria1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateMembershipCriteria1Async($id, $membership_criteria_dto, string $contentType = self::contentTypes['updateMembershipCriteria1'][0])
    {
        return $this->updateMembershipCriteria1AsyncWithHttpInfo($id, $membership_criteria_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateMembershipCriteria1AsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO $membership_criteria_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMembershipCriteria1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateMembershipCriteria1AsyncWithHttpInfo($id, $membership_criteria_dto, string $contentType = self::contentTypes['updateMembershipCriteria1'][0])
    {
        $returnType = '\Idealogic\MembershipAPI\Model\MembershipCriteriaDTO';
        $request = $this->updateMembershipCriteria1Request($id, $membership_criteria_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateMembershipCriteria1'
     *
     * @param  int $id (required)
     * @param  \Idealogic\MembershipAPI\Model\MembershipCriteriaDTO $membership_criteria_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMembershipCriteria1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateMembershipCriteria1Request($id, $membership_criteria_dto, string $contentType = self::contentTypes['updateMembershipCriteria1'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateMembershipCriteria1'
            );
        }

        // verify the required parameter 'membership_criteria_dto' is set
        if ($membership_criteria_dto === null || (is_array($membership_criteria_dto) && count($membership_criteria_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $membership_criteria_dto when calling updateMembershipCriteria1'
            );
        }


        $resourcePath = '/api/membership-criteria/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($membership_criteria_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($membership_criteria_dto));
            } else {
                $httpBody = $membership_criteria_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
