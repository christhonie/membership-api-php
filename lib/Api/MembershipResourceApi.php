<?php
/**
 * MembershipResourceApi
 * PHP version 5
 *
 * @category Class
 * @package  Idealogic\MembershipAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Application API
 *
 * API documentation
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Idealogic\MembershipAPI\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Idealogic\MembershipAPI\ApiException;
use Idealogic\MembershipAPI\Configuration;
use Idealogic\MembershipAPI\HeaderSelector;
use Idealogic\MembershipAPI\ObjectSerializer;

/**
 * MembershipResourceApi Class Doc Comment
 *
 * @category Class
 * @package  Idealogic\MembershipAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MembershipResourceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation countMembershipsUsingGET
     *
     * countMemberships
     *
     * @param  int $criteria_id_equals criteria_id_equals (optional)
     * @param  int $criteria_id_greater_than criteria_id_greater_than (optional)
     * @param  int $criteria_id_greater_than_or_equal criteria_id_greater_than_or_equal (optional)
     * @param  int[] $criteria_id_in criteria_id_in (optional)
     * @param  int $criteria_id_less_than criteria_id_less_than (optional)
     * @param  int $criteria_id_less_than_or_equal criteria_id_less_than_or_equal (optional)
     * @param  int $criteria_id_not_equals criteria_id_not_equals (optional)
     * @param  bool $criteria_id_specified criteria_id_specified (optional)
     * @param  int $id_equals id_equals (optional)
     * @param  int $id_greater_than id_greater_than (optional)
     * @param  int $id_greater_than_or_equal id_greater_than_or_equal (optional)
     * @param  int[] $id_in id_in (optional)
     * @param  int $id_less_than id_less_than (optional)
     * @param  int $id_less_than_or_equal id_less_than_or_equal (optional)
     * @param  int $id_not_equals id_not_equals (optional)
     * @param  bool $id_specified id_specified (optional)
     * @param  int $membership_period_id_equals membership_period_id_equals (optional)
     * @param  int $membership_period_id_greater_than membership_period_id_greater_than (optional)
     * @param  int $membership_period_id_greater_than_or_equal membership_period_id_greater_than_or_equal (optional)
     * @param  int[] $membership_period_id_in membership_period_id_in (optional)
     * @param  int $membership_period_id_less_than membership_period_id_less_than (optional)
     * @param  int $membership_period_id_less_than_or_equal membership_period_id_less_than_or_equal (optional)
     * @param  int $membership_period_id_not_equals membership_period_id_not_equals (optional)
     * @param  bool $membership_period_id_specified membership_period_id_specified (optional)
     * @param  int $number_id_equals number_id_equals (optional)
     * @param  int $number_id_greater_than number_id_greater_than (optional)
     * @param  int $number_id_greater_than_or_equal number_id_greater_than_or_equal (optional)
     * @param  int[] $number_id_in number_id_in (optional)
     * @param  int $number_id_less_than number_id_less_than (optional)
     * @param  int $number_id_less_than_or_equal number_id_less_than_or_equal (optional)
     * @param  int $number_id_not_equals number_id_not_equals (optional)
     * @param  bool $number_id_specified number_id_specified (optional)
     * @param  int $order_id_equals order_id_equals (optional)
     * @param  int $order_id_greater_than order_id_greater_than (optional)
     * @param  int $order_id_greater_than_or_equal order_id_greater_than_or_equal (optional)
     * @param  int[] $order_id_in order_id_in (optional)
     * @param  int $order_id_less_than order_id_less_than (optional)
     * @param  int $order_id_less_than_or_equal order_id_less_than_or_equal (optional)
     * @param  int $order_id_not_equals order_id_not_equals (optional)
     * @param  bool $order_id_specified order_id_specified (optional)
     * @param  int $person_id_equals person_id_equals (optional)
     * @param  int $person_id_greater_than person_id_greater_than (optional)
     * @param  int $person_id_greater_than_or_equal person_id_greater_than_or_equal (optional)
     * @param  int[] $person_id_in person_id_in (optional)
     * @param  int $person_id_less_than person_id_less_than (optional)
     * @param  int $person_id_less_than_or_equal person_id_less_than_or_equal (optional)
     * @param  int $person_id_not_equals person_id_not_equals (optional)
     * @param  bool $person_id_specified person_id_specified (optional)
     * @param  string $status_equals status_equals (optional)
     * @param  string[] $status_in status_in (optional)
     * @param  string $status_not_equals status_not_equals (optional)
     * @param  bool $status_specified status_specified (optional)
     * @param  \DateTime $valid_from_equals valid_from_equals (optional)
     * @param  \DateTime $valid_from_greater_than valid_from_greater_than (optional)
     * @param  \DateTime $valid_from_greater_than_or_equal valid_from_greater_than_or_equal (optional)
     * @param  string $valid_from_in_0_chronology_calendar_type valid_from_in_0_chronology_calendar_type (optional)
     * @param  string $valid_from_in_0_chronology_id valid_from_in_0_chronology_id (optional)
     * @param  int $valid_from_in_0_day_of_month valid_from_in_0_day_of_month (optional)
     * @param  string $valid_from_in_0_day_of_week valid_from_in_0_day_of_week (optional)
     * @param  int $valid_from_in_0_day_of_year valid_from_in_0_day_of_year (optional)
     * @param  int $valid_from_in_0_era_value valid_from_in_0_era_value (optional)
     * @param  bool $valid_from_in_0_leap_year valid_from_in_0_leap_year (optional)
     * @param  string $valid_from_in_0_month valid_from_in_0_month (optional)
     * @param  int $valid_from_in_0_month_value valid_from_in_0_month_value (optional)
     * @param  int $valid_from_in_0_year valid_from_in_0_year (optional)
     * @param  \DateTime $valid_from_less_than valid_from_less_than (optional)
     * @param  \DateTime $valid_from_less_than_or_equal valid_from_less_than_or_equal (optional)
     * @param  \DateTime $valid_from_not_equals valid_from_not_equals (optional)
     * @param  bool $valid_from_specified valid_from_specified (optional)
     * @param  \DateTime $valid_to_equals valid_to_equals (optional)
     * @param  \DateTime $valid_to_greater_than valid_to_greater_than (optional)
     * @param  \DateTime $valid_to_greater_than_or_equal valid_to_greater_than_or_equal (optional)
     * @param  string $valid_to_in_0_chronology_calendar_type valid_to_in_0_chronology_calendar_type (optional)
     * @param  string $valid_to_in_0_chronology_id valid_to_in_0_chronology_id (optional)
     * @param  int $valid_to_in_0_day_of_month valid_to_in_0_day_of_month (optional)
     * @param  string $valid_to_in_0_day_of_week valid_to_in_0_day_of_week (optional)
     * @param  int $valid_to_in_0_day_of_year valid_to_in_0_day_of_year (optional)
     * @param  int $valid_to_in_0_era_value valid_to_in_0_era_value (optional)
     * @param  bool $valid_to_in_0_leap_year valid_to_in_0_leap_year (optional)
     * @param  string $valid_to_in_0_month valid_to_in_0_month (optional)
     * @param  int $valid_to_in_0_month_value valid_to_in_0_month_value (optional)
     * @param  int $valid_to_in_0_year valid_to_in_0_year (optional)
     * @param  \DateTime $valid_to_less_than valid_to_less_than (optional)
     * @param  \DateTime $valid_to_less_than_or_equal valid_to_less_than_or_equal (optional)
     * @param  \DateTime $valid_to_not_equals valid_to_not_equals (optional)
     * @param  bool $valid_to_specified valid_to_specified (optional)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return int
     */
    public function countMembershipsUsingGET($criteria_id_equals = null, $criteria_id_greater_than = null, $criteria_id_greater_than_or_equal = null, $criteria_id_in = null, $criteria_id_less_than = null, $criteria_id_less_than_or_equal = null, $criteria_id_not_equals = null, $criteria_id_specified = null, $id_equals = null, $id_greater_than = null, $id_greater_than_or_equal = null, $id_in = null, $id_less_than = null, $id_less_than_or_equal = null, $id_not_equals = null, $id_specified = null, $membership_period_id_equals = null, $membership_period_id_greater_than = null, $membership_period_id_greater_than_or_equal = null, $membership_period_id_in = null, $membership_period_id_less_than = null, $membership_period_id_less_than_or_equal = null, $membership_period_id_not_equals = null, $membership_period_id_specified = null, $number_id_equals = null, $number_id_greater_than = null, $number_id_greater_than_or_equal = null, $number_id_in = null, $number_id_less_than = null, $number_id_less_than_or_equal = null, $number_id_not_equals = null, $number_id_specified = null, $order_id_equals = null, $order_id_greater_than = null, $order_id_greater_than_or_equal = null, $order_id_in = null, $order_id_less_than = null, $order_id_less_than_or_equal = null, $order_id_not_equals = null, $order_id_specified = null, $person_id_equals = null, $person_id_greater_than = null, $person_id_greater_than_or_equal = null, $person_id_in = null, $person_id_less_than = null, $person_id_less_than_or_equal = null, $person_id_not_equals = null, $person_id_specified = null, $status_equals = null, $status_in = null, $status_not_equals = null, $status_specified = null, $valid_from_equals = null, $valid_from_greater_than = null, $valid_from_greater_than_or_equal = null, $valid_from_in_0_chronology_calendar_type = null, $valid_from_in_0_chronology_id = null, $valid_from_in_0_day_of_month = null, $valid_from_in_0_day_of_week = null, $valid_from_in_0_day_of_year = null, $valid_from_in_0_era_value = null, $valid_from_in_0_leap_year = null, $valid_from_in_0_month = null, $valid_from_in_0_month_value = null, $valid_from_in_0_year = null, $valid_from_less_than = null, $valid_from_less_than_or_equal = null, $valid_from_not_equals = null, $valid_from_specified = null, $valid_to_equals = null, $valid_to_greater_than = null, $valid_to_greater_than_or_equal = null, $valid_to_in_0_chronology_calendar_type = null, $valid_to_in_0_chronology_id = null, $valid_to_in_0_day_of_month = null, $valid_to_in_0_day_of_week = null, $valid_to_in_0_day_of_year = null, $valid_to_in_0_era_value = null, $valid_to_in_0_leap_year = null, $valid_to_in_0_month = null, $valid_to_in_0_month_value = null, $valid_to_in_0_year = null, $valid_to_less_than = null, $valid_to_less_than_or_equal = null, $valid_to_not_equals = null, $valid_to_specified = null)
    {
        list($response) = $this->countMembershipsUsingGETWithHttpInfo($criteria_id_equals, $criteria_id_greater_than, $criteria_id_greater_than_or_equal, $criteria_id_in, $criteria_id_less_than, $criteria_id_less_than_or_equal, $criteria_id_not_equals, $criteria_id_specified, $id_equals, $id_greater_than, $id_greater_than_or_equal, $id_in, $id_less_than, $id_less_than_or_equal, $id_not_equals, $id_specified, $membership_period_id_equals, $membership_period_id_greater_than, $membership_period_id_greater_than_or_equal, $membership_period_id_in, $membership_period_id_less_than, $membership_period_id_less_than_or_equal, $membership_period_id_not_equals, $membership_period_id_specified, $number_id_equals, $number_id_greater_than, $number_id_greater_than_or_equal, $number_id_in, $number_id_less_than, $number_id_less_than_or_equal, $number_id_not_equals, $number_id_specified, $order_id_equals, $order_id_greater_than, $order_id_greater_than_or_equal, $order_id_in, $order_id_less_than, $order_id_less_than_or_equal, $order_id_not_equals, $order_id_specified, $person_id_equals, $person_id_greater_than, $person_id_greater_than_or_equal, $person_id_in, $person_id_less_than, $person_id_less_than_or_equal, $person_id_not_equals, $person_id_specified, $status_equals, $status_in, $status_not_equals, $status_specified, $valid_from_equals, $valid_from_greater_than, $valid_from_greater_than_or_equal, $valid_from_in_0_chronology_calendar_type, $valid_from_in_0_chronology_id, $valid_from_in_0_day_of_month, $valid_from_in_0_day_of_week, $valid_from_in_0_day_of_year, $valid_from_in_0_era_value, $valid_from_in_0_leap_year, $valid_from_in_0_month, $valid_from_in_0_month_value, $valid_from_in_0_year, $valid_from_less_than, $valid_from_less_than_or_equal, $valid_from_not_equals, $valid_from_specified, $valid_to_equals, $valid_to_greater_than, $valid_to_greater_than_or_equal, $valid_to_in_0_chronology_calendar_type, $valid_to_in_0_chronology_id, $valid_to_in_0_day_of_month, $valid_to_in_0_day_of_week, $valid_to_in_0_day_of_year, $valid_to_in_0_era_value, $valid_to_in_0_leap_year, $valid_to_in_0_month, $valid_to_in_0_month_value, $valid_to_in_0_year, $valid_to_less_than, $valid_to_less_than_or_equal, $valid_to_not_equals, $valid_to_specified);
        return $response;
    }

    /**
     * Operation countMembershipsUsingGETWithHttpInfo
     *
     * countMemberships
     *
     * @param  int $criteria_id_equals (optional)
     * @param  int $criteria_id_greater_than (optional)
     * @param  int $criteria_id_greater_than_or_equal (optional)
     * @param  int[] $criteria_id_in (optional)
     * @param  int $criteria_id_less_than (optional)
     * @param  int $criteria_id_less_than_or_equal (optional)
     * @param  int $criteria_id_not_equals (optional)
     * @param  bool $criteria_id_specified (optional)
     * @param  int $id_equals (optional)
     * @param  int $id_greater_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int[] $id_in (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int $membership_period_id_equals (optional)
     * @param  int $membership_period_id_greater_than (optional)
     * @param  int $membership_period_id_greater_than_or_equal (optional)
     * @param  int[] $membership_period_id_in (optional)
     * @param  int $membership_period_id_less_than (optional)
     * @param  int $membership_period_id_less_than_or_equal (optional)
     * @param  int $membership_period_id_not_equals (optional)
     * @param  bool $membership_period_id_specified (optional)
     * @param  int $number_id_equals (optional)
     * @param  int $number_id_greater_than (optional)
     * @param  int $number_id_greater_than_or_equal (optional)
     * @param  int[] $number_id_in (optional)
     * @param  int $number_id_less_than (optional)
     * @param  int $number_id_less_than_or_equal (optional)
     * @param  int $number_id_not_equals (optional)
     * @param  bool $number_id_specified (optional)
     * @param  int $order_id_equals (optional)
     * @param  int $order_id_greater_than (optional)
     * @param  int $order_id_greater_than_or_equal (optional)
     * @param  int[] $order_id_in (optional)
     * @param  int $order_id_less_than (optional)
     * @param  int $order_id_less_than_or_equal (optional)
     * @param  int $order_id_not_equals (optional)
     * @param  bool $order_id_specified (optional)
     * @param  int $person_id_equals (optional)
     * @param  int $person_id_greater_than (optional)
     * @param  int $person_id_greater_than_or_equal (optional)
     * @param  int[] $person_id_in (optional)
     * @param  int $person_id_less_than (optional)
     * @param  int $person_id_less_than_or_equal (optional)
     * @param  int $person_id_not_equals (optional)
     * @param  bool $person_id_specified (optional)
     * @param  string $status_equals (optional)
     * @param  string[] $status_in (optional)
     * @param  string $status_not_equals (optional)
     * @param  bool $status_specified (optional)
     * @param  \DateTime $valid_from_equals (optional)
     * @param  \DateTime $valid_from_greater_than (optional)
     * @param  \DateTime $valid_from_greater_than_or_equal (optional)
     * @param  string $valid_from_in_0_chronology_calendar_type (optional)
     * @param  string $valid_from_in_0_chronology_id (optional)
     * @param  int $valid_from_in_0_day_of_month (optional)
     * @param  string $valid_from_in_0_day_of_week (optional)
     * @param  int $valid_from_in_0_day_of_year (optional)
     * @param  int $valid_from_in_0_era_value (optional)
     * @param  bool $valid_from_in_0_leap_year (optional)
     * @param  string $valid_from_in_0_month (optional)
     * @param  int $valid_from_in_0_month_value (optional)
     * @param  int $valid_from_in_0_year (optional)
     * @param  \DateTime $valid_from_less_than (optional)
     * @param  \DateTime $valid_from_less_than_or_equal (optional)
     * @param  \DateTime $valid_from_not_equals (optional)
     * @param  bool $valid_from_specified (optional)
     * @param  \DateTime $valid_to_equals (optional)
     * @param  \DateTime $valid_to_greater_than (optional)
     * @param  \DateTime $valid_to_greater_than_or_equal (optional)
     * @param  string $valid_to_in_0_chronology_calendar_type (optional)
     * @param  string $valid_to_in_0_chronology_id (optional)
     * @param  int $valid_to_in_0_day_of_month (optional)
     * @param  string $valid_to_in_0_day_of_week (optional)
     * @param  int $valid_to_in_0_day_of_year (optional)
     * @param  int $valid_to_in_0_era_value (optional)
     * @param  bool $valid_to_in_0_leap_year (optional)
     * @param  string $valid_to_in_0_month (optional)
     * @param  int $valid_to_in_0_month_value (optional)
     * @param  int $valid_to_in_0_year (optional)
     * @param  \DateTime $valid_to_less_than (optional)
     * @param  \DateTime $valid_to_less_than_or_equal (optional)
     * @param  \DateTime $valid_to_not_equals (optional)
     * @param  bool $valid_to_specified (optional)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function countMembershipsUsingGETWithHttpInfo($criteria_id_equals = null, $criteria_id_greater_than = null, $criteria_id_greater_than_or_equal = null, $criteria_id_in = null, $criteria_id_less_than = null, $criteria_id_less_than_or_equal = null, $criteria_id_not_equals = null, $criteria_id_specified = null, $id_equals = null, $id_greater_than = null, $id_greater_than_or_equal = null, $id_in = null, $id_less_than = null, $id_less_than_or_equal = null, $id_not_equals = null, $id_specified = null, $membership_period_id_equals = null, $membership_period_id_greater_than = null, $membership_period_id_greater_than_or_equal = null, $membership_period_id_in = null, $membership_period_id_less_than = null, $membership_period_id_less_than_or_equal = null, $membership_period_id_not_equals = null, $membership_period_id_specified = null, $number_id_equals = null, $number_id_greater_than = null, $number_id_greater_than_or_equal = null, $number_id_in = null, $number_id_less_than = null, $number_id_less_than_or_equal = null, $number_id_not_equals = null, $number_id_specified = null, $order_id_equals = null, $order_id_greater_than = null, $order_id_greater_than_or_equal = null, $order_id_in = null, $order_id_less_than = null, $order_id_less_than_or_equal = null, $order_id_not_equals = null, $order_id_specified = null, $person_id_equals = null, $person_id_greater_than = null, $person_id_greater_than_or_equal = null, $person_id_in = null, $person_id_less_than = null, $person_id_less_than_or_equal = null, $person_id_not_equals = null, $person_id_specified = null, $status_equals = null, $status_in = null, $status_not_equals = null, $status_specified = null, $valid_from_equals = null, $valid_from_greater_than = null, $valid_from_greater_than_or_equal = null, $valid_from_in_0_chronology_calendar_type = null, $valid_from_in_0_chronology_id = null, $valid_from_in_0_day_of_month = null, $valid_from_in_0_day_of_week = null, $valid_from_in_0_day_of_year = null, $valid_from_in_0_era_value = null, $valid_from_in_0_leap_year = null, $valid_from_in_0_month = null, $valid_from_in_0_month_value = null, $valid_from_in_0_year = null, $valid_from_less_than = null, $valid_from_less_than_or_equal = null, $valid_from_not_equals = null, $valid_from_specified = null, $valid_to_equals = null, $valid_to_greater_than = null, $valid_to_greater_than_or_equal = null, $valid_to_in_0_chronology_calendar_type = null, $valid_to_in_0_chronology_id = null, $valid_to_in_0_day_of_month = null, $valid_to_in_0_day_of_week = null, $valid_to_in_0_day_of_year = null, $valid_to_in_0_era_value = null, $valid_to_in_0_leap_year = null, $valid_to_in_0_month = null, $valid_to_in_0_month_value = null, $valid_to_in_0_year = null, $valid_to_less_than = null, $valid_to_less_than_or_equal = null, $valid_to_not_equals = null, $valid_to_specified = null)
    {
        $returnType = 'int';
        $request = $this->countMembershipsUsingGETRequest($criteria_id_equals, $criteria_id_greater_than, $criteria_id_greater_than_or_equal, $criteria_id_in, $criteria_id_less_than, $criteria_id_less_than_or_equal, $criteria_id_not_equals, $criteria_id_specified, $id_equals, $id_greater_than, $id_greater_than_or_equal, $id_in, $id_less_than, $id_less_than_or_equal, $id_not_equals, $id_specified, $membership_period_id_equals, $membership_period_id_greater_than, $membership_period_id_greater_than_or_equal, $membership_period_id_in, $membership_period_id_less_than, $membership_period_id_less_than_or_equal, $membership_period_id_not_equals, $membership_period_id_specified, $number_id_equals, $number_id_greater_than, $number_id_greater_than_or_equal, $number_id_in, $number_id_less_than, $number_id_less_than_or_equal, $number_id_not_equals, $number_id_specified, $order_id_equals, $order_id_greater_than, $order_id_greater_than_or_equal, $order_id_in, $order_id_less_than, $order_id_less_than_or_equal, $order_id_not_equals, $order_id_specified, $person_id_equals, $person_id_greater_than, $person_id_greater_than_or_equal, $person_id_in, $person_id_less_than, $person_id_less_than_or_equal, $person_id_not_equals, $person_id_specified, $status_equals, $status_in, $status_not_equals, $status_specified, $valid_from_equals, $valid_from_greater_than, $valid_from_greater_than_or_equal, $valid_from_in_0_chronology_calendar_type, $valid_from_in_0_chronology_id, $valid_from_in_0_day_of_month, $valid_from_in_0_day_of_week, $valid_from_in_0_day_of_year, $valid_from_in_0_era_value, $valid_from_in_0_leap_year, $valid_from_in_0_month, $valid_from_in_0_month_value, $valid_from_in_0_year, $valid_from_less_than, $valid_from_less_than_or_equal, $valid_from_not_equals, $valid_from_specified, $valid_to_equals, $valid_to_greater_than, $valid_to_greater_than_or_equal, $valid_to_in_0_chronology_calendar_type, $valid_to_in_0_chronology_id, $valid_to_in_0_day_of_month, $valid_to_in_0_day_of_week, $valid_to_in_0_day_of_year, $valid_to_in_0_era_value, $valid_to_in_0_leap_year, $valid_to_in_0_month, $valid_to_in_0_month_value, $valid_to_in_0_year, $valid_to_less_than, $valid_to_less_than_or_equal, $valid_to_not_equals, $valid_to_specified);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation countMembershipsUsingGETAsync
     *
     * countMemberships
     *
     * @param  int $criteria_id_equals (optional)
     * @param  int $criteria_id_greater_than (optional)
     * @param  int $criteria_id_greater_than_or_equal (optional)
     * @param  int[] $criteria_id_in (optional)
     * @param  int $criteria_id_less_than (optional)
     * @param  int $criteria_id_less_than_or_equal (optional)
     * @param  int $criteria_id_not_equals (optional)
     * @param  bool $criteria_id_specified (optional)
     * @param  int $id_equals (optional)
     * @param  int $id_greater_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int[] $id_in (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int $membership_period_id_equals (optional)
     * @param  int $membership_period_id_greater_than (optional)
     * @param  int $membership_period_id_greater_than_or_equal (optional)
     * @param  int[] $membership_period_id_in (optional)
     * @param  int $membership_period_id_less_than (optional)
     * @param  int $membership_period_id_less_than_or_equal (optional)
     * @param  int $membership_period_id_not_equals (optional)
     * @param  bool $membership_period_id_specified (optional)
     * @param  int $number_id_equals (optional)
     * @param  int $number_id_greater_than (optional)
     * @param  int $number_id_greater_than_or_equal (optional)
     * @param  int[] $number_id_in (optional)
     * @param  int $number_id_less_than (optional)
     * @param  int $number_id_less_than_or_equal (optional)
     * @param  int $number_id_not_equals (optional)
     * @param  bool $number_id_specified (optional)
     * @param  int $order_id_equals (optional)
     * @param  int $order_id_greater_than (optional)
     * @param  int $order_id_greater_than_or_equal (optional)
     * @param  int[] $order_id_in (optional)
     * @param  int $order_id_less_than (optional)
     * @param  int $order_id_less_than_or_equal (optional)
     * @param  int $order_id_not_equals (optional)
     * @param  bool $order_id_specified (optional)
     * @param  int $person_id_equals (optional)
     * @param  int $person_id_greater_than (optional)
     * @param  int $person_id_greater_than_or_equal (optional)
     * @param  int[] $person_id_in (optional)
     * @param  int $person_id_less_than (optional)
     * @param  int $person_id_less_than_or_equal (optional)
     * @param  int $person_id_not_equals (optional)
     * @param  bool $person_id_specified (optional)
     * @param  string $status_equals (optional)
     * @param  string[] $status_in (optional)
     * @param  string $status_not_equals (optional)
     * @param  bool $status_specified (optional)
     * @param  \DateTime $valid_from_equals (optional)
     * @param  \DateTime $valid_from_greater_than (optional)
     * @param  \DateTime $valid_from_greater_than_or_equal (optional)
     * @param  string $valid_from_in_0_chronology_calendar_type (optional)
     * @param  string $valid_from_in_0_chronology_id (optional)
     * @param  int $valid_from_in_0_day_of_month (optional)
     * @param  string $valid_from_in_0_day_of_week (optional)
     * @param  int $valid_from_in_0_day_of_year (optional)
     * @param  int $valid_from_in_0_era_value (optional)
     * @param  bool $valid_from_in_0_leap_year (optional)
     * @param  string $valid_from_in_0_month (optional)
     * @param  int $valid_from_in_0_month_value (optional)
     * @param  int $valid_from_in_0_year (optional)
     * @param  \DateTime $valid_from_less_than (optional)
     * @param  \DateTime $valid_from_less_than_or_equal (optional)
     * @param  \DateTime $valid_from_not_equals (optional)
     * @param  bool $valid_from_specified (optional)
     * @param  \DateTime $valid_to_equals (optional)
     * @param  \DateTime $valid_to_greater_than (optional)
     * @param  \DateTime $valid_to_greater_than_or_equal (optional)
     * @param  string $valid_to_in_0_chronology_calendar_type (optional)
     * @param  string $valid_to_in_0_chronology_id (optional)
     * @param  int $valid_to_in_0_day_of_month (optional)
     * @param  string $valid_to_in_0_day_of_week (optional)
     * @param  int $valid_to_in_0_day_of_year (optional)
     * @param  int $valid_to_in_0_era_value (optional)
     * @param  bool $valid_to_in_0_leap_year (optional)
     * @param  string $valid_to_in_0_month (optional)
     * @param  int $valid_to_in_0_month_value (optional)
     * @param  int $valid_to_in_0_year (optional)
     * @param  \DateTime $valid_to_less_than (optional)
     * @param  \DateTime $valid_to_less_than_or_equal (optional)
     * @param  \DateTime $valid_to_not_equals (optional)
     * @param  bool $valid_to_specified (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function countMembershipsUsingGETAsync($criteria_id_equals = null, $criteria_id_greater_than = null, $criteria_id_greater_than_or_equal = null, $criteria_id_in = null, $criteria_id_less_than = null, $criteria_id_less_than_or_equal = null, $criteria_id_not_equals = null, $criteria_id_specified = null, $id_equals = null, $id_greater_than = null, $id_greater_than_or_equal = null, $id_in = null, $id_less_than = null, $id_less_than_or_equal = null, $id_not_equals = null, $id_specified = null, $membership_period_id_equals = null, $membership_period_id_greater_than = null, $membership_period_id_greater_than_or_equal = null, $membership_period_id_in = null, $membership_period_id_less_than = null, $membership_period_id_less_than_or_equal = null, $membership_period_id_not_equals = null, $membership_period_id_specified = null, $number_id_equals = null, $number_id_greater_than = null, $number_id_greater_than_or_equal = null, $number_id_in = null, $number_id_less_than = null, $number_id_less_than_or_equal = null, $number_id_not_equals = null, $number_id_specified = null, $order_id_equals = null, $order_id_greater_than = null, $order_id_greater_than_or_equal = null, $order_id_in = null, $order_id_less_than = null, $order_id_less_than_or_equal = null, $order_id_not_equals = null, $order_id_specified = null, $person_id_equals = null, $person_id_greater_than = null, $person_id_greater_than_or_equal = null, $person_id_in = null, $person_id_less_than = null, $person_id_less_than_or_equal = null, $person_id_not_equals = null, $person_id_specified = null, $status_equals = null, $status_in = null, $status_not_equals = null, $status_specified = null, $valid_from_equals = null, $valid_from_greater_than = null, $valid_from_greater_than_or_equal = null, $valid_from_in_0_chronology_calendar_type = null, $valid_from_in_0_chronology_id = null, $valid_from_in_0_day_of_month = null, $valid_from_in_0_day_of_week = null, $valid_from_in_0_day_of_year = null, $valid_from_in_0_era_value = null, $valid_from_in_0_leap_year = null, $valid_from_in_0_month = null, $valid_from_in_0_month_value = null, $valid_from_in_0_year = null, $valid_from_less_than = null, $valid_from_less_than_or_equal = null, $valid_from_not_equals = null, $valid_from_specified = null, $valid_to_equals = null, $valid_to_greater_than = null, $valid_to_greater_than_or_equal = null, $valid_to_in_0_chronology_calendar_type = null, $valid_to_in_0_chronology_id = null, $valid_to_in_0_day_of_month = null, $valid_to_in_0_day_of_week = null, $valid_to_in_0_day_of_year = null, $valid_to_in_0_era_value = null, $valid_to_in_0_leap_year = null, $valid_to_in_0_month = null, $valid_to_in_0_month_value = null, $valid_to_in_0_year = null, $valid_to_less_than = null, $valid_to_less_than_or_equal = null, $valid_to_not_equals = null, $valid_to_specified = null)
    {
        return $this->countMembershipsUsingGETAsyncWithHttpInfo($criteria_id_equals, $criteria_id_greater_than, $criteria_id_greater_than_or_equal, $criteria_id_in, $criteria_id_less_than, $criteria_id_less_than_or_equal, $criteria_id_not_equals, $criteria_id_specified, $id_equals, $id_greater_than, $id_greater_than_or_equal, $id_in, $id_less_than, $id_less_than_or_equal, $id_not_equals, $id_specified, $membership_period_id_equals, $membership_period_id_greater_than, $membership_period_id_greater_than_or_equal, $membership_period_id_in, $membership_period_id_less_than, $membership_period_id_less_than_or_equal, $membership_period_id_not_equals, $membership_period_id_specified, $number_id_equals, $number_id_greater_than, $number_id_greater_than_or_equal, $number_id_in, $number_id_less_than, $number_id_less_than_or_equal, $number_id_not_equals, $number_id_specified, $order_id_equals, $order_id_greater_than, $order_id_greater_than_or_equal, $order_id_in, $order_id_less_than, $order_id_less_than_or_equal, $order_id_not_equals, $order_id_specified, $person_id_equals, $person_id_greater_than, $person_id_greater_than_or_equal, $person_id_in, $person_id_less_than, $person_id_less_than_or_equal, $person_id_not_equals, $person_id_specified, $status_equals, $status_in, $status_not_equals, $status_specified, $valid_from_equals, $valid_from_greater_than, $valid_from_greater_than_or_equal, $valid_from_in_0_chronology_calendar_type, $valid_from_in_0_chronology_id, $valid_from_in_0_day_of_month, $valid_from_in_0_day_of_week, $valid_from_in_0_day_of_year, $valid_from_in_0_era_value, $valid_from_in_0_leap_year, $valid_from_in_0_month, $valid_from_in_0_month_value, $valid_from_in_0_year, $valid_from_less_than, $valid_from_less_than_or_equal, $valid_from_not_equals, $valid_from_specified, $valid_to_equals, $valid_to_greater_than, $valid_to_greater_than_or_equal, $valid_to_in_0_chronology_calendar_type, $valid_to_in_0_chronology_id, $valid_to_in_0_day_of_month, $valid_to_in_0_day_of_week, $valid_to_in_0_day_of_year, $valid_to_in_0_era_value, $valid_to_in_0_leap_year, $valid_to_in_0_month, $valid_to_in_0_month_value, $valid_to_in_0_year, $valid_to_less_than, $valid_to_less_than_or_equal, $valid_to_not_equals, $valid_to_specified)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation countMembershipsUsingGETAsyncWithHttpInfo
     *
     * countMemberships
     *
     * @param  int $criteria_id_equals (optional)
     * @param  int $criteria_id_greater_than (optional)
     * @param  int $criteria_id_greater_than_or_equal (optional)
     * @param  int[] $criteria_id_in (optional)
     * @param  int $criteria_id_less_than (optional)
     * @param  int $criteria_id_less_than_or_equal (optional)
     * @param  int $criteria_id_not_equals (optional)
     * @param  bool $criteria_id_specified (optional)
     * @param  int $id_equals (optional)
     * @param  int $id_greater_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int[] $id_in (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int $membership_period_id_equals (optional)
     * @param  int $membership_period_id_greater_than (optional)
     * @param  int $membership_period_id_greater_than_or_equal (optional)
     * @param  int[] $membership_period_id_in (optional)
     * @param  int $membership_period_id_less_than (optional)
     * @param  int $membership_period_id_less_than_or_equal (optional)
     * @param  int $membership_period_id_not_equals (optional)
     * @param  bool $membership_period_id_specified (optional)
     * @param  int $number_id_equals (optional)
     * @param  int $number_id_greater_than (optional)
     * @param  int $number_id_greater_than_or_equal (optional)
     * @param  int[] $number_id_in (optional)
     * @param  int $number_id_less_than (optional)
     * @param  int $number_id_less_than_or_equal (optional)
     * @param  int $number_id_not_equals (optional)
     * @param  bool $number_id_specified (optional)
     * @param  int $order_id_equals (optional)
     * @param  int $order_id_greater_than (optional)
     * @param  int $order_id_greater_than_or_equal (optional)
     * @param  int[] $order_id_in (optional)
     * @param  int $order_id_less_than (optional)
     * @param  int $order_id_less_than_or_equal (optional)
     * @param  int $order_id_not_equals (optional)
     * @param  bool $order_id_specified (optional)
     * @param  int $person_id_equals (optional)
     * @param  int $person_id_greater_than (optional)
     * @param  int $person_id_greater_than_or_equal (optional)
     * @param  int[] $person_id_in (optional)
     * @param  int $person_id_less_than (optional)
     * @param  int $person_id_less_than_or_equal (optional)
     * @param  int $person_id_not_equals (optional)
     * @param  bool $person_id_specified (optional)
     * @param  string $status_equals (optional)
     * @param  string[] $status_in (optional)
     * @param  string $status_not_equals (optional)
     * @param  bool $status_specified (optional)
     * @param  \DateTime $valid_from_equals (optional)
     * @param  \DateTime $valid_from_greater_than (optional)
     * @param  \DateTime $valid_from_greater_than_or_equal (optional)
     * @param  string $valid_from_in_0_chronology_calendar_type (optional)
     * @param  string $valid_from_in_0_chronology_id (optional)
     * @param  int $valid_from_in_0_day_of_month (optional)
     * @param  string $valid_from_in_0_day_of_week (optional)
     * @param  int $valid_from_in_0_day_of_year (optional)
     * @param  int $valid_from_in_0_era_value (optional)
     * @param  bool $valid_from_in_0_leap_year (optional)
     * @param  string $valid_from_in_0_month (optional)
     * @param  int $valid_from_in_0_month_value (optional)
     * @param  int $valid_from_in_0_year (optional)
     * @param  \DateTime $valid_from_less_than (optional)
     * @param  \DateTime $valid_from_less_than_or_equal (optional)
     * @param  \DateTime $valid_from_not_equals (optional)
     * @param  bool $valid_from_specified (optional)
     * @param  \DateTime $valid_to_equals (optional)
     * @param  \DateTime $valid_to_greater_than (optional)
     * @param  \DateTime $valid_to_greater_than_or_equal (optional)
     * @param  string $valid_to_in_0_chronology_calendar_type (optional)
     * @param  string $valid_to_in_0_chronology_id (optional)
     * @param  int $valid_to_in_0_day_of_month (optional)
     * @param  string $valid_to_in_0_day_of_week (optional)
     * @param  int $valid_to_in_0_day_of_year (optional)
     * @param  int $valid_to_in_0_era_value (optional)
     * @param  bool $valid_to_in_0_leap_year (optional)
     * @param  string $valid_to_in_0_month (optional)
     * @param  int $valid_to_in_0_month_value (optional)
     * @param  int $valid_to_in_0_year (optional)
     * @param  \DateTime $valid_to_less_than (optional)
     * @param  \DateTime $valid_to_less_than_or_equal (optional)
     * @param  \DateTime $valid_to_not_equals (optional)
     * @param  bool $valid_to_specified (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function countMembershipsUsingGETAsyncWithHttpInfo($criteria_id_equals = null, $criteria_id_greater_than = null, $criteria_id_greater_than_or_equal = null, $criteria_id_in = null, $criteria_id_less_than = null, $criteria_id_less_than_or_equal = null, $criteria_id_not_equals = null, $criteria_id_specified = null, $id_equals = null, $id_greater_than = null, $id_greater_than_or_equal = null, $id_in = null, $id_less_than = null, $id_less_than_or_equal = null, $id_not_equals = null, $id_specified = null, $membership_period_id_equals = null, $membership_period_id_greater_than = null, $membership_period_id_greater_than_or_equal = null, $membership_period_id_in = null, $membership_period_id_less_than = null, $membership_period_id_less_than_or_equal = null, $membership_period_id_not_equals = null, $membership_period_id_specified = null, $number_id_equals = null, $number_id_greater_than = null, $number_id_greater_than_or_equal = null, $number_id_in = null, $number_id_less_than = null, $number_id_less_than_or_equal = null, $number_id_not_equals = null, $number_id_specified = null, $order_id_equals = null, $order_id_greater_than = null, $order_id_greater_than_or_equal = null, $order_id_in = null, $order_id_less_than = null, $order_id_less_than_or_equal = null, $order_id_not_equals = null, $order_id_specified = null, $person_id_equals = null, $person_id_greater_than = null, $person_id_greater_than_or_equal = null, $person_id_in = null, $person_id_less_than = null, $person_id_less_than_or_equal = null, $person_id_not_equals = null, $person_id_specified = null, $status_equals = null, $status_in = null, $status_not_equals = null, $status_specified = null, $valid_from_equals = null, $valid_from_greater_than = null, $valid_from_greater_than_or_equal = null, $valid_from_in_0_chronology_calendar_type = null, $valid_from_in_0_chronology_id = null, $valid_from_in_0_day_of_month = null, $valid_from_in_0_day_of_week = null, $valid_from_in_0_day_of_year = null, $valid_from_in_0_era_value = null, $valid_from_in_0_leap_year = null, $valid_from_in_0_month = null, $valid_from_in_0_month_value = null, $valid_from_in_0_year = null, $valid_from_less_than = null, $valid_from_less_than_or_equal = null, $valid_from_not_equals = null, $valid_from_specified = null, $valid_to_equals = null, $valid_to_greater_than = null, $valid_to_greater_than_or_equal = null, $valid_to_in_0_chronology_calendar_type = null, $valid_to_in_0_chronology_id = null, $valid_to_in_0_day_of_month = null, $valid_to_in_0_day_of_week = null, $valid_to_in_0_day_of_year = null, $valid_to_in_0_era_value = null, $valid_to_in_0_leap_year = null, $valid_to_in_0_month = null, $valid_to_in_0_month_value = null, $valid_to_in_0_year = null, $valid_to_less_than = null, $valid_to_less_than_or_equal = null, $valid_to_not_equals = null, $valid_to_specified = null)
    {
        $returnType = 'int';
        $request = $this->countMembershipsUsingGETRequest($criteria_id_equals, $criteria_id_greater_than, $criteria_id_greater_than_or_equal, $criteria_id_in, $criteria_id_less_than, $criteria_id_less_than_or_equal, $criteria_id_not_equals, $criteria_id_specified, $id_equals, $id_greater_than, $id_greater_than_or_equal, $id_in, $id_less_than, $id_less_than_or_equal, $id_not_equals, $id_specified, $membership_period_id_equals, $membership_period_id_greater_than, $membership_period_id_greater_than_or_equal, $membership_period_id_in, $membership_period_id_less_than, $membership_period_id_less_than_or_equal, $membership_period_id_not_equals, $membership_period_id_specified, $number_id_equals, $number_id_greater_than, $number_id_greater_than_or_equal, $number_id_in, $number_id_less_than, $number_id_less_than_or_equal, $number_id_not_equals, $number_id_specified, $order_id_equals, $order_id_greater_than, $order_id_greater_than_or_equal, $order_id_in, $order_id_less_than, $order_id_less_than_or_equal, $order_id_not_equals, $order_id_specified, $person_id_equals, $person_id_greater_than, $person_id_greater_than_or_equal, $person_id_in, $person_id_less_than, $person_id_less_than_or_equal, $person_id_not_equals, $person_id_specified, $status_equals, $status_in, $status_not_equals, $status_specified, $valid_from_equals, $valid_from_greater_than, $valid_from_greater_than_or_equal, $valid_from_in_0_chronology_calendar_type, $valid_from_in_0_chronology_id, $valid_from_in_0_day_of_month, $valid_from_in_0_day_of_week, $valid_from_in_0_day_of_year, $valid_from_in_0_era_value, $valid_from_in_0_leap_year, $valid_from_in_0_month, $valid_from_in_0_month_value, $valid_from_in_0_year, $valid_from_less_than, $valid_from_less_than_or_equal, $valid_from_not_equals, $valid_from_specified, $valid_to_equals, $valid_to_greater_than, $valid_to_greater_than_or_equal, $valid_to_in_0_chronology_calendar_type, $valid_to_in_0_chronology_id, $valid_to_in_0_day_of_month, $valid_to_in_0_day_of_week, $valid_to_in_0_day_of_year, $valid_to_in_0_era_value, $valid_to_in_0_leap_year, $valid_to_in_0_month, $valid_to_in_0_month_value, $valid_to_in_0_year, $valid_to_less_than, $valid_to_less_than_or_equal, $valid_to_not_equals, $valid_to_specified);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'countMembershipsUsingGET'
     *
     * @param  int $criteria_id_equals (optional)
     * @param  int $criteria_id_greater_than (optional)
     * @param  int $criteria_id_greater_than_or_equal (optional)
     * @param  int[] $criteria_id_in (optional)
     * @param  int $criteria_id_less_than (optional)
     * @param  int $criteria_id_less_than_or_equal (optional)
     * @param  int $criteria_id_not_equals (optional)
     * @param  bool $criteria_id_specified (optional)
     * @param  int $id_equals (optional)
     * @param  int $id_greater_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int[] $id_in (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int $membership_period_id_equals (optional)
     * @param  int $membership_period_id_greater_than (optional)
     * @param  int $membership_period_id_greater_than_or_equal (optional)
     * @param  int[] $membership_period_id_in (optional)
     * @param  int $membership_period_id_less_than (optional)
     * @param  int $membership_period_id_less_than_or_equal (optional)
     * @param  int $membership_period_id_not_equals (optional)
     * @param  bool $membership_period_id_specified (optional)
     * @param  int $number_id_equals (optional)
     * @param  int $number_id_greater_than (optional)
     * @param  int $number_id_greater_than_or_equal (optional)
     * @param  int[] $number_id_in (optional)
     * @param  int $number_id_less_than (optional)
     * @param  int $number_id_less_than_or_equal (optional)
     * @param  int $number_id_not_equals (optional)
     * @param  bool $number_id_specified (optional)
     * @param  int $order_id_equals (optional)
     * @param  int $order_id_greater_than (optional)
     * @param  int $order_id_greater_than_or_equal (optional)
     * @param  int[] $order_id_in (optional)
     * @param  int $order_id_less_than (optional)
     * @param  int $order_id_less_than_or_equal (optional)
     * @param  int $order_id_not_equals (optional)
     * @param  bool $order_id_specified (optional)
     * @param  int $person_id_equals (optional)
     * @param  int $person_id_greater_than (optional)
     * @param  int $person_id_greater_than_or_equal (optional)
     * @param  int[] $person_id_in (optional)
     * @param  int $person_id_less_than (optional)
     * @param  int $person_id_less_than_or_equal (optional)
     * @param  int $person_id_not_equals (optional)
     * @param  bool $person_id_specified (optional)
     * @param  string $status_equals (optional)
     * @param  string[] $status_in (optional)
     * @param  string $status_not_equals (optional)
     * @param  bool $status_specified (optional)
     * @param  \DateTime $valid_from_equals (optional)
     * @param  \DateTime $valid_from_greater_than (optional)
     * @param  \DateTime $valid_from_greater_than_or_equal (optional)
     * @param  string $valid_from_in_0_chronology_calendar_type (optional)
     * @param  string $valid_from_in_0_chronology_id (optional)
     * @param  int $valid_from_in_0_day_of_month (optional)
     * @param  string $valid_from_in_0_day_of_week (optional)
     * @param  int $valid_from_in_0_day_of_year (optional)
     * @param  int $valid_from_in_0_era_value (optional)
     * @param  bool $valid_from_in_0_leap_year (optional)
     * @param  string $valid_from_in_0_month (optional)
     * @param  int $valid_from_in_0_month_value (optional)
     * @param  int $valid_from_in_0_year (optional)
     * @param  \DateTime $valid_from_less_than (optional)
     * @param  \DateTime $valid_from_less_than_or_equal (optional)
     * @param  \DateTime $valid_from_not_equals (optional)
     * @param  bool $valid_from_specified (optional)
     * @param  \DateTime $valid_to_equals (optional)
     * @param  \DateTime $valid_to_greater_than (optional)
     * @param  \DateTime $valid_to_greater_than_or_equal (optional)
     * @param  string $valid_to_in_0_chronology_calendar_type (optional)
     * @param  string $valid_to_in_0_chronology_id (optional)
     * @param  int $valid_to_in_0_day_of_month (optional)
     * @param  string $valid_to_in_0_day_of_week (optional)
     * @param  int $valid_to_in_0_day_of_year (optional)
     * @param  int $valid_to_in_0_era_value (optional)
     * @param  bool $valid_to_in_0_leap_year (optional)
     * @param  string $valid_to_in_0_month (optional)
     * @param  int $valid_to_in_0_month_value (optional)
     * @param  int $valid_to_in_0_year (optional)
     * @param  \DateTime $valid_to_less_than (optional)
     * @param  \DateTime $valid_to_less_than_or_equal (optional)
     * @param  \DateTime $valid_to_not_equals (optional)
     * @param  bool $valid_to_specified (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function countMembershipsUsingGETRequest($criteria_id_equals = null, $criteria_id_greater_than = null, $criteria_id_greater_than_or_equal = null, $criteria_id_in = null, $criteria_id_less_than = null, $criteria_id_less_than_or_equal = null, $criteria_id_not_equals = null, $criteria_id_specified = null, $id_equals = null, $id_greater_than = null, $id_greater_than_or_equal = null, $id_in = null, $id_less_than = null, $id_less_than_or_equal = null, $id_not_equals = null, $id_specified = null, $membership_period_id_equals = null, $membership_period_id_greater_than = null, $membership_period_id_greater_than_or_equal = null, $membership_period_id_in = null, $membership_period_id_less_than = null, $membership_period_id_less_than_or_equal = null, $membership_period_id_not_equals = null, $membership_period_id_specified = null, $number_id_equals = null, $number_id_greater_than = null, $number_id_greater_than_or_equal = null, $number_id_in = null, $number_id_less_than = null, $number_id_less_than_or_equal = null, $number_id_not_equals = null, $number_id_specified = null, $order_id_equals = null, $order_id_greater_than = null, $order_id_greater_than_or_equal = null, $order_id_in = null, $order_id_less_than = null, $order_id_less_than_or_equal = null, $order_id_not_equals = null, $order_id_specified = null, $person_id_equals = null, $person_id_greater_than = null, $person_id_greater_than_or_equal = null, $person_id_in = null, $person_id_less_than = null, $person_id_less_than_or_equal = null, $person_id_not_equals = null, $person_id_specified = null, $status_equals = null, $status_in = null, $status_not_equals = null, $status_specified = null, $valid_from_equals = null, $valid_from_greater_than = null, $valid_from_greater_than_or_equal = null, $valid_from_in_0_chronology_calendar_type = null, $valid_from_in_0_chronology_id = null, $valid_from_in_0_day_of_month = null, $valid_from_in_0_day_of_week = null, $valid_from_in_0_day_of_year = null, $valid_from_in_0_era_value = null, $valid_from_in_0_leap_year = null, $valid_from_in_0_month = null, $valid_from_in_0_month_value = null, $valid_from_in_0_year = null, $valid_from_less_than = null, $valid_from_less_than_or_equal = null, $valid_from_not_equals = null, $valid_from_specified = null, $valid_to_equals = null, $valid_to_greater_than = null, $valid_to_greater_than_or_equal = null, $valid_to_in_0_chronology_calendar_type = null, $valid_to_in_0_chronology_id = null, $valid_to_in_0_day_of_month = null, $valid_to_in_0_day_of_week = null, $valid_to_in_0_day_of_year = null, $valid_to_in_0_era_value = null, $valid_to_in_0_leap_year = null, $valid_to_in_0_month = null, $valid_to_in_0_month_value = null, $valid_to_in_0_year = null, $valid_to_less_than = null, $valid_to_less_than_or_equal = null, $valid_to_not_equals = null, $valid_to_specified = null)
    {

        $resourcePath = '/api/memberships/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($criteria_id_equals !== null) {
            $queryParams['criteriaId.equals'] = ObjectSerializer::toQueryValue($criteria_id_equals);
        }
        // query params
        if ($criteria_id_greater_than !== null) {
            $queryParams['criteriaId.greaterThan'] = ObjectSerializer::toQueryValue($criteria_id_greater_than);
        }
        // query params
        if ($criteria_id_greater_than_or_equal !== null) {
            $queryParams['criteriaId.greaterThanOrEqual'] = ObjectSerializer::toQueryValue($criteria_id_greater_than_or_equal);
        }
        // query params
        if (is_array($criteria_id_in)) {
            $queryParams['criteriaId.in'] = $criteria_id_in;
        } else
        if ($criteria_id_in !== null) {
            $queryParams['criteriaId.in'] = ObjectSerializer::toQueryValue($criteria_id_in);
        }
        // query params
        if ($criteria_id_less_than !== null) {
            $queryParams['criteriaId.lessThan'] = ObjectSerializer::toQueryValue($criteria_id_less_than);
        }
        // query params
        if ($criteria_id_less_than_or_equal !== null) {
            $queryParams['criteriaId.lessThanOrEqual'] = ObjectSerializer::toQueryValue($criteria_id_less_than_or_equal);
        }
        // query params
        if ($criteria_id_not_equals !== null) {
            $queryParams['criteriaId.notEquals'] = ObjectSerializer::toQueryValue($criteria_id_not_equals);
        }
        // query params
        if ($criteria_id_specified !== null) {
            $queryParams['criteriaId.specified'] = ObjectSerializer::toQueryValue($criteria_id_specified);
        }
        // query params
        if ($id_equals !== null) {
            $queryParams['id.equals'] = ObjectSerializer::toQueryValue($id_equals);
        }
        // query params
        if ($id_greater_than !== null) {
            $queryParams['id.greaterThan'] = ObjectSerializer::toQueryValue($id_greater_than);
        }
        // query params
        if ($id_greater_than_or_equal !== null) {
            $queryParams['id.greaterThanOrEqual'] = ObjectSerializer::toQueryValue($id_greater_than_or_equal);
        }
        // query params
        if (is_array($id_in)) {
            $queryParams['id.in'] = $id_in;
        } else
        if ($id_in !== null) {
            $queryParams['id.in'] = ObjectSerializer::toQueryValue($id_in);
        }
        // query params
        if ($id_less_than !== null) {
            $queryParams['id.lessThan'] = ObjectSerializer::toQueryValue($id_less_than);
        }
        // query params
        if ($id_less_than_or_equal !== null) {
            $queryParams['id.lessThanOrEqual'] = ObjectSerializer::toQueryValue($id_less_than_or_equal);
        }
        // query params
        if ($id_not_equals !== null) {
            $queryParams['id.notEquals'] = ObjectSerializer::toQueryValue($id_not_equals);
        }
        // query params
        if ($id_specified !== null) {
            $queryParams['id.specified'] = ObjectSerializer::toQueryValue($id_specified);
        }
        // query params
        if ($membership_period_id_equals !== null) {
            $queryParams['membershipPeriodId.equals'] = ObjectSerializer::toQueryValue($membership_period_id_equals);
        }
        // query params
        if ($membership_period_id_greater_than !== null) {
            $queryParams['membershipPeriodId.greaterThan'] = ObjectSerializer::toQueryValue($membership_period_id_greater_than);
        }
        // query params
        if ($membership_period_id_greater_than_or_equal !== null) {
            $queryParams['membershipPeriodId.greaterThanOrEqual'] = ObjectSerializer::toQueryValue($membership_period_id_greater_than_or_equal);
        }
        // query params
        if (is_array($membership_period_id_in)) {
            $queryParams['membershipPeriodId.in'] = $membership_period_id_in;
        } else
        if ($membership_period_id_in !== null) {
            $queryParams['membershipPeriodId.in'] = ObjectSerializer::toQueryValue($membership_period_id_in);
        }
        // query params
        if ($membership_period_id_less_than !== null) {
            $queryParams['membershipPeriodId.lessThan'] = ObjectSerializer::toQueryValue($membership_period_id_less_than);
        }
        // query params
        if ($membership_period_id_less_than_or_equal !== null) {
            $queryParams['membershipPeriodId.lessThanOrEqual'] = ObjectSerializer::toQueryValue($membership_period_id_less_than_or_equal);
        }
        // query params
        if ($membership_period_id_not_equals !== null) {
            $queryParams['membershipPeriodId.notEquals'] = ObjectSerializer::toQueryValue($membership_period_id_not_equals);
        }
        // query params
        if ($membership_period_id_specified !== null) {
            $queryParams['membershipPeriodId.specified'] = ObjectSerializer::toQueryValue($membership_period_id_specified);
        }
        // query params
        if ($number_id_equals !== null) {
            $queryParams['numberId.equals'] = ObjectSerializer::toQueryValue($number_id_equals);
        }
        // query params
        if ($number_id_greater_than !== null) {
            $queryParams['numberId.greaterThan'] = ObjectSerializer::toQueryValue($number_id_greater_than);
        }
        // query params
        if ($number_id_greater_than_or_equal !== null) {
            $queryParams['numberId.greaterThanOrEqual'] = ObjectSerializer::toQueryValue($number_id_greater_than_or_equal);
        }
        // query params
        if (is_array($number_id_in)) {
            $queryParams['numberId.in'] = $number_id_in;
        } else
        if ($number_id_in !== null) {
            $queryParams['numberId.in'] = ObjectSerializer::toQueryValue($number_id_in);
        }
        // query params
        if ($number_id_less_than !== null) {
            $queryParams['numberId.lessThan'] = ObjectSerializer::toQueryValue($number_id_less_than);
        }
        // query params
        if ($number_id_less_than_or_equal !== null) {
            $queryParams['numberId.lessThanOrEqual'] = ObjectSerializer::toQueryValue($number_id_less_than_or_equal);
        }
        // query params
        if ($number_id_not_equals !== null) {
            $queryParams['numberId.notEquals'] = ObjectSerializer::toQueryValue($number_id_not_equals);
        }
        // query params
        if ($number_id_specified !== null) {
            $queryParams['numberId.specified'] = ObjectSerializer::toQueryValue($number_id_specified);
        }
        // query params
        if ($order_id_equals !== null) {
            $queryParams['orderId.equals'] = ObjectSerializer::toQueryValue($order_id_equals);
        }
        // query params
        if ($order_id_greater_than !== null) {
            $queryParams['orderId.greaterThan'] = ObjectSerializer::toQueryValue($order_id_greater_than);
        }
        // query params
        if ($order_id_greater_than_or_equal !== null) {
            $queryParams['orderId.greaterThanOrEqual'] = ObjectSerializer::toQueryValue($order_id_greater_than_or_equal);
        }
        // query params
        if (is_array($order_id_in)) {
            $queryParams['orderId.in'] = $order_id_in;
        } else
        if ($order_id_in !== null) {
            $queryParams['orderId.in'] = ObjectSerializer::toQueryValue($order_id_in);
        }
        // query params
        if ($order_id_less_than !== null) {
            $queryParams['orderId.lessThan'] = ObjectSerializer::toQueryValue($order_id_less_than);
        }
        // query params
        if ($order_id_less_than_or_equal !== null) {
            $queryParams['orderId.lessThanOrEqual'] = ObjectSerializer::toQueryValue($order_id_less_than_or_equal);
        }
        // query params
        if ($order_id_not_equals !== null) {
            $queryParams['orderId.notEquals'] = ObjectSerializer::toQueryValue($order_id_not_equals);
        }
        // query params
        if ($order_id_specified !== null) {
            $queryParams['orderId.specified'] = ObjectSerializer::toQueryValue($order_id_specified);
        }
        // query params
        if ($person_id_equals !== null) {
            $queryParams['personId.equals'] = ObjectSerializer::toQueryValue($person_id_equals);
        }
        // query params
        if ($person_id_greater_than !== null) {
            $queryParams['personId.greaterThan'] = ObjectSerializer::toQueryValue($person_id_greater_than);
        }
        // query params
        if ($person_id_greater_than_or_equal !== null) {
            $queryParams['personId.greaterThanOrEqual'] = ObjectSerializer::toQueryValue($person_id_greater_than_or_equal);
        }
        // query params
        if (is_array($person_id_in)) {
            $queryParams['personId.in'] = $person_id_in;
        } else
        if ($person_id_in !== null) {
            $queryParams['personId.in'] = ObjectSerializer::toQueryValue($person_id_in);
        }
        // query params
        if ($person_id_less_than !== null) {
            $queryParams['personId.lessThan'] = ObjectSerializer::toQueryValue($person_id_less_than);
        }
        // query params
        if ($person_id_less_than_or_equal !== null) {
            $queryParams['personId.lessThanOrEqual'] = ObjectSerializer::toQueryValue($person_id_less_than_or_equal);
        }
        // query params
        if ($person_id_not_equals !== null) {
            $queryParams['personId.notEquals'] = ObjectSerializer::toQueryValue($person_id_not_equals);
        }
        // query params
        if ($person_id_specified !== null) {
            $queryParams['personId.specified'] = ObjectSerializer::toQueryValue($person_id_specified);
        }
        // query params
        if ($status_equals !== null) {
            $queryParams['status.equals'] = ObjectSerializer::toQueryValue($status_equals);
        }
        // query params
        if (is_array($status_in)) {
            $queryParams['status.in'] = $status_in;
        } else
        if ($status_in !== null) {
            $queryParams['status.in'] = ObjectSerializer::toQueryValue($status_in);
        }
        // query params
        if ($status_not_equals !== null) {
            $queryParams['status.notEquals'] = ObjectSerializer::toQueryValue($status_not_equals);
        }
        // query params
        if ($status_specified !== null) {
            $queryParams['status.specified'] = ObjectSerializer::toQueryValue($status_specified);
        }
        // query params
        if ($valid_from_equals !== null) {
            $queryParams['validFrom.equals'] = ObjectSerializer::toQueryValue($valid_from_equals);
        }
        // query params
        if ($valid_from_greater_than !== null) {
            $queryParams['validFrom.greaterThan'] = ObjectSerializer::toQueryValue($valid_from_greater_than);
        }
        // query params
        if ($valid_from_greater_than_or_equal !== null) {
            $queryParams['validFrom.greaterThanOrEqual'] = ObjectSerializer::toQueryValue($valid_from_greater_than_or_equal);
        }
        // query params
        if ($valid_from_in_0_chronology_calendar_type !== null) {
            $queryParams['validFrom.in[0].chronology.calendarType'] = ObjectSerializer::toQueryValue($valid_from_in_0_chronology_calendar_type);
        }
        // query params
        if ($valid_from_in_0_chronology_id !== null) {
            $queryParams['validFrom.in[0].chronology.id'] = ObjectSerializer::toQueryValue($valid_from_in_0_chronology_id);
        }
        // query params
        if ($valid_from_in_0_day_of_month !== null) {
            $queryParams['validFrom.in[0].dayOfMonth'] = ObjectSerializer::toQueryValue($valid_from_in_0_day_of_month);
        }
        // query params
        if ($valid_from_in_0_day_of_week !== null) {
            $queryParams['validFrom.in[0].dayOfWeek'] = ObjectSerializer::toQueryValue($valid_from_in_0_day_of_week);
        }
        // query params
        if ($valid_from_in_0_day_of_year !== null) {
            $queryParams['validFrom.in[0].dayOfYear'] = ObjectSerializer::toQueryValue($valid_from_in_0_day_of_year);
        }
        // query params
        if ($valid_from_in_0_era_value !== null) {
            $queryParams['validFrom.in[0].era.value'] = ObjectSerializer::toQueryValue($valid_from_in_0_era_value);
        }
        // query params
        if ($valid_from_in_0_leap_year !== null) {
            $queryParams['validFrom.in[0].leapYear'] = ObjectSerializer::toQueryValue($valid_from_in_0_leap_year);
        }
        // query params
        if ($valid_from_in_0_month !== null) {
            $queryParams['validFrom.in[0].month'] = ObjectSerializer::toQueryValue($valid_from_in_0_month);
        }
        // query params
        if ($valid_from_in_0_month_value !== null) {
            $queryParams['validFrom.in[0].monthValue'] = ObjectSerializer::toQueryValue($valid_from_in_0_month_value);
        }
        // query params
        if ($valid_from_in_0_year !== null) {
            $queryParams['validFrom.in[0].year'] = ObjectSerializer::toQueryValue($valid_from_in_0_year);
        }
        // query params
        if ($valid_from_less_than !== null) {
            $queryParams['validFrom.lessThan'] = ObjectSerializer::toQueryValue($valid_from_less_than);
        }
        // query params
        if ($valid_from_less_than_or_equal !== null) {
            $queryParams['validFrom.lessThanOrEqual'] = ObjectSerializer::toQueryValue($valid_from_less_than_or_equal);
        }
        // query params
        if ($valid_from_not_equals !== null) {
            $queryParams['validFrom.notEquals'] = ObjectSerializer::toQueryValue($valid_from_not_equals);
        }
        // query params
        if ($valid_from_specified !== null) {
            $queryParams['validFrom.specified'] = ObjectSerializer::toQueryValue($valid_from_specified);
        }
        // query params
        if ($valid_to_equals !== null) {
            $queryParams['validTo.equals'] = ObjectSerializer::toQueryValue($valid_to_equals);
        }
        // query params
        if ($valid_to_greater_than !== null) {
            $queryParams['validTo.greaterThan'] = ObjectSerializer::toQueryValue($valid_to_greater_than);
        }
        // query params
        if ($valid_to_greater_than_or_equal !== null) {
            $queryParams['validTo.greaterThanOrEqual'] = ObjectSerializer::toQueryValue($valid_to_greater_than_or_equal);
        }
        // query params
        if ($valid_to_in_0_chronology_calendar_type !== null) {
            $queryParams['validTo.in[0].chronology.calendarType'] = ObjectSerializer::toQueryValue($valid_to_in_0_chronology_calendar_type);
        }
        // query params
        if ($valid_to_in_0_chronology_id !== null) {
            $queryParams['validTo.in[0].chronology.id'] = ObjectSerializer::toQueryValue($valid_to_in_0_chronology_id);
        }
        // query params
        if ($valid_to_in_0_day_of_month !== null) {
            $queryParams['validTo.in[0].dayOfMonth'] = ObjectSerializer::toQueryValue($valid_to_in_0_day_of_month);
        }
        // query params
        if ($valid_to_in_0_day_of_week !== null) {
            $queryParams['validTo.in[0].dayOfWeek'] = ObjectSerializer::toQueryValue($valid_to_in_0_day_of_week);
        }
        // query params
        if ($valid_to_in_0_day_of_year !== null) {
            $queryParams['validTo.in[0].dayOfYear'] = ObjectSerializer::toQueryValue($valid_to_in_0_day_of_year);
        }
        // query params
        if ($valid_to_in_0_era_value !== null) {
            $queryParams['validTo.in[0].era.value'] = ObjectSerializer::toQueryValue($valid_to_in_0_era_value);
        }
        // query params
        if ($valid_to_in_0_leap_year !== null) {
            $queryParams['validTo.in[0].leapYear'] = ObjectSerializer::toQueryValue($valid_to_in_0_leap_year);
        }
        // query params
        if ($valid_to_in_0_month !== null) {
            $queryParams['validTo.in[0].month'] = ObjectSerializer::toQueryValue($valid_to_in_0_month);
        }
        // query params
        if ($valid_to_in_0_month_value !== null) {
            $queryParams['validTo.in[0].monthValue'] = ObjectSerializer::toQueryValue($valid_to_in_0_month_value);
        }
        // query params
        if ($valid_to_in_0_year !== null) {
            $queryParams['validTo.in[0].year'] = ObjectSerializer::toQueryValue($valid_to_in_0_year);
        }
        // query params
        if ($valid_to_less_than !== null) {
            $queryParams['validTo.lessThan'] = ObjectSerializer::toQueryValue($valid_to_less_than);
        }
        // query params
        if ($valid_to_less_than_or_equal !== null) {
            $queryParams['validTo.lessThanOrEqual'] = ObjectSerializer::toQueryValue($valid_to_less_than_or_equal);
        }
        // query params
        if ($valid_to_not_equals !== null) {
            $queryParams['validTo.notEquals'] = ObjectSerializer::toQueryValue($valid_to_not_equals);
        }
        // query params
        if ($valid_to_specified !== null) {
            $queryParams['validTo.specified'] = ObjectSerializer::toQueryValue($valid_to_specified);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createMembershipUsingPOST
     *
     * createMembership
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipDTO $membership_dto membershipDTO (required)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Idealogic\MembershipAPI\Model\MembershipDTO
     */
    public function createMembershipUsingPOST($membership_dto)
    {
        list($response) = $this->createMembershipUsingPOSTWithHttpInfo($membership_dto);
        return $response;
    }

    /**
     * Operation createMembershipUsingPOSTWithHttpInfo
     *
     * createMembership
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipDTO $membership_dto membershipDTO (required)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Idealogic\MembershipAPI\Model\MembershipDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createMembershipUsingPOSTWithHttpInfo($membership_dto)
    {
        $returnType = '\Idealogic\MembershipAPI\Model\MembershipDTO';
        $request = $this->createMembershipUsingPOSTRequest($membership_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Idealogic\MembershipAPI\Model\MembershipDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createMembershipUsingPOSTAsync
     *
     * createMembership
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipDTO $membership_dto membershipDTO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMembershipUsingPOSTAsync($membership_dto)
    {
        return $this->createMembershipUsingPOSTAsyncWithHttpInfo($membership_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createMembershipUsingPOSTAsyncWithHttpInfo
     *
     * createMembership
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipDTO $membership_dto membershipDTO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMembershipUsingPOSTAsyncWithHttpInfo($membership_dto)
    {
        $returnType = '\Idealogic\MembershipAPI\Model\MembershipDTO';
        $request = $this->createMembershipUsingPOSTRequest($membership_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createMembershipUsingPOST'
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipDTO $membership_dto membershipDTO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createMembershipUsingPOSTRequest($membership_dto)
    {
        // verify the required parameter 'membership_dto' is set
        if ($membership_dto === null || (is_array($membership_dto) && count($membership_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $membership_dto when calling createMembershipUsingPOST'
            );
        }

        $resourcePath = '/api/memberships';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($membership_dto)) {
            $_tempBody = $membership_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteMembershipUsingDELETE
     *
     * deleteMembership
     *
     * @param  int $id id (required)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteMembershipUsingDELETE($id)
    {
        $this->deleteMembershipUsingDELETEWithHttpInfo($id);
    }

    /**
     * Operation deleteMembershipUsingDELETEWithHttpInfo
     *
     * deleteMembership
     *
     * @param  int $id id (required)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteMembershipUsingDELETEWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteMembershipUsingDELETERequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteMembershipUsingDELETEAsync
     *
     * deleteMembership
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMembershipUsingDELETEAsync($id)
    {
        return $this->deleteMembershipUsingDELETEAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteMembershipUsingDELETEAsyncWithHttpInfo
     *
     * deleteMembership
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMembershipUsingDELETEAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteMembershipUsingDELETERequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteMembershipUsingDELETE'
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteMembershipUsingDELETERequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteMembershipUsingDELETE'
            );
        }

        $resourcePath = '/api/memberships/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllMembershipsUsingGET
     *
     * getAllMemberships
     *
     * @param  int $criteria_id_equals criteria_id_equals (optional)
     * @param  int $criteria_id_greater_than criteria_id_greater_than (optional)
     * @param  int $criteria_id_greater_than_or_equal criteria_id_greater_than_or_equal (optional)
     * @param  int[] $criteria_id_in criteria_id_in (optional)
     * @param  int $criteria_id_less_than criteria_id_less_than (optional)
     * @param  int $criteria_id_less_than_or_equal criteria_id_less_than_or_equal (optional)
     * @param  int $criteria_id_not_equals criteria_id_not_equals (optional)
     * @param  bool $criteria_id_specified criteria_id_specified (optional)
     * @param  int $id_equals id_equals (optional)
     * @param  int $id_greater_than id_greater_than (optional)
     * @param  int $id_greater_than_or_equal id_greater_than_or_equal (optional)
     * @param  int[] $id_in id_in (optional)
     * @param  int $id_less_than id_less_than (optional)
     * @param  int $id_less_than_or_equal id_less_than_or_equal (optional)
     * @param  int $id_not_equals id_not_equals (optional)
     * @param  bool $id_specified id_specified (optional)
     * @param  int $membership_period_id_equals membership_period_id_equals (optional)
     * @param  int $membership_period_id_greater_than membership_period_id_greater_than (optional)
     * @param  int $membership_period_id_greater_than_or_equal membership_period_id_greater_than_or_equal (optional)
     * @param  int[] $membership_period_id_in membership_period_id_in (optional)
     * @param  int $membership_period_id_less_than membership_period_id_less_than (optional)
     * @param  int $membership_period_id_less_than_or_equal membership_period_id_less_than_or_equal (optional)
     * @param  int $membership_period_id_not_equals membership_period_id_not_equals (optional)
     * @param  bool $membership_period_id_specified membership_period_id_specified (optional)
     * @param  int $number_id_equals number_id_equals (optional)
     * @param  int $number_id_greater_than number_id_greater_than (optional)
     * @param  int $number_id_greater_than_or_equal number_id_greater_than_or_equal (optional)
     * @param  int[] $number_id_in number_id_in (optional)
     * @param  int $number_id_less_than number_id_less_than (optional)
     * @param  int $number_id_less_than_or_equal number_id_less_than_or_equal (optional)
     * @param  int $number_id_not_equals number_id_not_equals (optional)
     * @param  bool $number_id_specified number_id_specified (optional)
     * @param  int $order_id_equals order_id_equals (optional)
     * @param  int $order_id_greater_than order_id_greater_than (optional)
     * @param  int $order_id_greater_than_or_equal order_id_greater_than_or_equal (optional)
     * @param  int[] $order_id_in order_id_in (optional)
     * @param  int $order_id_less_than order_id_less_than (optional)
     * @param  int $order_id_less_than_or_equal order_id_less_than_or_equal (optional)
     * @param  int $order_id_not_equals order_id_not_equals (optional)
     * @param  bool $order_id_specified order_id_specified (optional)
     * @param  int $page Page number of the requested page (optional)
     * @param  int $person_id_equals person_id_equals (optional)
     * @param  int $person_id_greater_than person_id_greater_than (optional)
     * @param  int $person_id_greater_than_or_equal person_id_greater_than_or_equal (optional)
     * @param  int[] $person_id_in person_id_in (optional)
     * @param  int $person_id_less_than person_id_less_than (optional)
     * @param  int $person_id_less_than_or_equal person_id_less_than_or_equal (optional)
     * @param  int $person_id_not_equals person_id_not_equals (optional)
     * @param  bool $person_id_specified person_id_specified (optional)
     * @param  int $size Size of a page (optional)
     * @param  string[] $sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @param  string $status_equals status_equals (optional)
     * @param  string[] $status_in status_in (optional)
     * @param  string $status_not_equals status_not_equals (optional)
     * @param  bool $status_specified status_specified (optional)
     * @param  \DateTime $valid_from_equals valid_from_equals (optional)
     * @param  \DateTime $valid_from_greater_than valid_from_greater_than (optional)
     * @param  \DateTime $valid_from_greater_than_or_equal valid_from_greater_than_or_equal (optional)
     * @param  string $valid_from_in_0_chronology_calendar_type valid_from_in_0_chronology_calendar_type (optional)
     * @param  string $valid_from_in_0_chronology_id valid_from_in_0_chronology_id (optional)
     * @param  int $valid_from_in_0_day_of_month valid_from_in_0_day_of_month (optional)
     * @param  string $valid_from_in_0_day_of_week valid_from_in_0_day_of_week (optional)
     * @param  int $valid_from_in_0_day_of_year valid_from_in_0_day_of_year (optional)
     * @param  int $valid_from_in_0_era_value valid_from_in_0_era_value (optional)
     * @param  bool $valid_from_in_0_leap_year valid_from_in_0_leap_year (optional)
     * @param  string $valid_from_in_0_month valid_from_in_0_month (optional)
     * @param  int $valid_from_in_0_month_value valid_from_in_0_month_value (optional)
     * @param  int $valid_from_in_0_year valid_from_in_0_year (optional)
     * @param  \DateTime $valid_from_less_than valid_from_less_than (optional)
     * @param  \DateTime $valid_from_less_than_or_equal valid_from_less_than_or_equal (optional)
     * @param  \DateTime $valid_from_not_equals valid_from_not_equals (optional)
     * @param  bool $valid_from_specified valid_from_specified (optional)
     * @param  \DateTime $valid_to_equals valid_to_equals (optional)
     * @param  \DateTime $valid_to_greater_than valid_to_greater_than (optional)
     * @param  \DateTime $valid_to_greater_than_or_equal valid_to_greater_than_or_equal (optional)
     * @param  string $valid_to_in_0_chronology_calendar_type valid_to_in_0_chronology_calendar_type (optional)
     * @param  string $valid_to_in_0_chronology_id valid_to_in_0_chronology_id (optional)
     * @param  int $valid_to_in_0_day_of_month valid_to_in_0_day_of_month (optional)
     * @param  string $valid_to_in_0_day_of_week valid_to_in_0_day_of_week (optional)
     * @param  int $valid_to_in_0_day_of_year valid_to_in_0_day_of_year (optional)
     * @param  int $valid_to_in_0_era_value valid_to_in_0_era_value (optional)
     * @param  bool $valid_to_in_0_leap_year valid_to_in_0_leap_year (optional)
     * @param  string $valid_to_in_0_month valid_to_in_0_month (optional)
     * @param  int $valid_to_in_0_month_value valid_to_in_0_month_value (optional)
     * @param  int $valid_to_in_0_year valid_to_in_0_year (optional)
     * @param  \DateTime $valid_to_less_than valid_to_less_than (optional)
     * @param  \DateTime $valid_to_less_than_or_equal valid_to_less_than_or_equal (optional)
     * @param  \DateTime $valid_to_not_equals valid_to_not_equals (optional)
     * @param  bool $valid_to_specified valid_to_specified (optional)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Idealogic\MembershipAPI\Model\MembershipDTO[]
     */
    public function getAllMembershipsUsingGET($criteria_id_equals = null, $criteria_id_greater_than = null, $criteria_id_greater_than_or_equal = null, $criteria_id_in = null, $criteria_id_less_than = null, $criteria_id_less_than_or_equal = null, $criteria_id_not_equals = null, $criteria_id_specified = null, $id_equals = null, $id_greater_than = null, $id_greater_than_or_equal = null, $id_in = null, $id_less_than = null, $id_less_than_or_equal = null, $id_not_equals = null, $id_specified = null, $membership_period_id_equals = null, $membership_period_id_greater_than = null, $membership_period_id_greater_than_or_equal = null, $membership_period_id_in = null, $membership_period_id_less_than = null, $membership_period_id_less_than_or_equal = null, $membership_period_id_not_equals = null, $membership_period_id_specified = null, $number_id_equals = null, $number_id_greater_than = null, $number_id_greater_than_or_equal = null, $number_id_in = null, $number_id_less_than = null, $number_id_less_than_or_equal = null, $number_id_not_equals = null, $number_id_specified = null, $order_id_equals = null, $order_id_greater_than = null, $order_id_greater_than_or_equal = null, $order_id_in = null, $order_id_less_than = null, $order_id_less_than_or_equal = null, $order_id_not_equals = null, $order_id_specified = null, $page = null, $person_id_equals = null, $person_id_greater_than = null, $person_id_greater_than_or_equal = null, $person_id_in = null, $person_id_less_than = null, $person_id_less_than_or_equal = null, $person_id_not_equals = null, $person_id_specified = null, $size = null, $sort = null, $status_equals = null, $status_in = null, $status_not_equals = null, $status_specified = null, $valid_from_equals = null, $valid_from_greater_than = null, $valid_from_greater_than_or_equal = null, $valid_from_in_0_chronology_calendar_type = null, $valid_from_in_0_chronology_id = null, $valid_from_in_0_day_of_month = null, $valid_from_in_0_day_of_week = null, $valid_from_in_0_day_of_year = null, $valid_from_in_0_era_value = null, $valid_from_in_0_leap_year = null, $valid_from_in_0_month = null, $valid_from_in_0_month_value = null, $valid_from_in_0_year = null, $valid_from_less_than = null, $valid_from_less_than_or_equal = null, $valid_from_not_equals = null, $valid_from_specified = null, $valid_to_equals = null, $valid_to_greater_than = null, $valid_to_greater_than_or_equal = null, $valid_to_in_0_chronology_calendar_type = null, $valid_to_in_0_chronology_id = null, $valid_to_in_0_day_of_month = null, $valid_to_in_0_day_of_week = null, $valid_to_in_0_day_of_year = null, $valid_to_in_0_era_value = null, $valid_to_in_0_leap_year = null, $valid_to_in_0_month = null, $valid_to_in_0_month_value = null, $valid_to_in_0_year = null, $valid_to_less_than = null, $valid_to_less_than_or_equal = null, $valid_to_not_equals = null, $valid_to_specified = null)
    {
        list($response) = $this->getAllMembershipsUsingGETWithHttpInfo($criteria_id_equals, $criteria_id_greater_than, $criteria_id_greater_than_or_equal, $criteria_id_in, $criteria_id_less_than, $criteria_id_less_than_or_equal, $criteria_id_not_equals, $criteria_id_specified, $id_equals, $id_greater_than, $id_greater_than_or_equal, $id_in, $id_less_than, $id_less_than_or_equal, $id_not_equals, $id_specified, $membership_period_id_equals, $membership_period_id_greater_than, $membership_period_id_greater_than_or_equal, $membership_period_id_in, $membership_period_id_less_than, $membership_period_id_less_than_or_equal, $membership_period_id_not_equals, $membership_period_id_specified, $number_id_equals, $number_id_greater_than, $number_id_greater_than_or_equal, $number_id_in, $number_id_less_than, $number_id_less_than_or_equal, $number_id_not_equals, $number_id_specified, $order_id_equals, $order_id_greater_than, $order_id_greater_than_or_equal, $order_id_in, $order_id_less_than, $order_id_less_than_or_equal, $order_id_not_equals, $order_id_specified, $page, $person_id_equals, $person_id_greater_than, $person_id_greater_than_or_equal, $person_id_in, $person_id_less_than, $person_id_less_than_or_equal, $person_id_not_equals, $person_id_specified, $size, $sort, $status_equals, $status_in, $status_not_equals, $status_specified, $valid_from_equals, $valid_from_greater_than, $valid_from_greater_than_or_equal, $valid_from_in_0_chronology_calendar_type, $valid_from_in_0_chronology_id, $valid_from_in_0_day_of_month, $valid_from_in_0_day_of_week, $valid_from_in_0_day_of_year, $valid_from_in_0_era_value, $valid_from_in_0_leap_year, $valid_from_in_0_month, $valid_from_in_0_month_value, $valid_from_in_0_year, $valid_from_less_than, $valid_from_less_than_or_equal, $valid_from_not_equals, $valid_from_specified, $valid_to_equals, $valid_to_greater_than, $valid_to_greater_than_or_equal, $valid_to_in_0_chronology_calendar_type, $valid_to_in_0_chronology_id, $valid_to_in_0_day_of_month, $valid_to_in_0_day_of_week, $valid_to_in_0_day_of_year, $valid_to_in_0_era_value, $valid_to_in_0_leap_year, $valid_to_in_0_month, $valid_to_in_0_month_value, $valid_to_in_0_year, $valid_to_less_than, $valid_to_less_than_or_equal, $valid_to_not_equals, $valid_to_specified);
        return $response;
    }

    /**
     * Operation getAllMembershipsUsingGETWithHttpInfo
     *
     * getAllMemberships
     *
     * @param  int $criteria_id_equals (optional)
     * @param  int $criteria_id_greater_than (optional)
     * @param  int $criteria_id_greater_than_or_equal (optional)
     * @param  int[] $criteria_id_in (optional)
     * @param  int $criteria_id_less_than (optional)
     * @param  int $criteria_id_less_than_or_equal (optional)
     * @param  int $criteria_id_not_equals (optional)
     * @param  bool $criteria_id_specified (optional)
     * @param  int $id_equals (optional)
     * @param  int $id_greater_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int[] $id_in (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int $membership_period_id_equals (optional)
     * @param  int $membership_period_id_greater_than (optional)
     * @param  int $membership_period_id_greater_than_or_equal (optional)
     * @param  int[] $membership_period_id_in (optional)
     * @param  int $membership_period_id_less_than (optional)
     * @param  int $membership_period_id_less_than_or_equal (optional)
     * @param  int $membership_period_id_not_equals (optional)
     * @param  bool $membership_period_id_specified (optional)
     * @param  int $number_id_equals (optional)
     * @param  int $number_id_greater_than (optional)
     * @param  int $number_id_greater_than_or_equal (optional)
     * @param  int[] $number_id_in (optional)
     * @param  int $number_id_less_than (optional)
     * @param  int $number_id_less_than_or_equal (optional)
     * @param  int $number_id_not_equals (optional)
     * @param  bool $number_id_specified (optional)
     * @param  int $order_id_equals (optional)
     * @param  int $order_id_greater_than (optional)
     * @param  int $order_id_greater_than_or_equal (optional)
     * @param  int[] $order_id_in (optional)
     * @param  int $order_id_less_than (optional)
     * @param  int $order_id_less_than_or_equal (optional)
     * @param  int $order_id_not_equals (optional)
     * @param  bool $order_id_specified (optional)
     * @param  int $page Page number of the requested page (optional)
     * @param  int $person_id_equals (optional)
     * @param  int $person_id_greater_than (optional)
     * @param  int $person_id_greater_than_or_equal (optional)
     * @param  int[] $person_id_in (optional)
     * @param  int $person_id_less_than (optional)
     * @param  int $person_id_less_than_or_equal (optional)
     * @param  int $person_id_not_equals (optional)
     * @param  bool $person_id_specified (optional)
     * @param  int $size Size of a page (optional)
     * @param  string[] $sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @param  string $status_equals (optional)
     * @param  string[] $status_in (optional)
     * @param  string $status_not_equals (optional)
     * @param  bool $status_specified (optional)
     * @param  \DateTime $valid_from_equals (optional)
     * @param  \DateTime $valid_from_greater_than (optional)
     * @param  \DateTime $valid_from_greater_than_or_equal (optional)
     * @param  string $valid_from_in_0_chronology_calendar_type (optional)
     * @param  string $valid_from_in_0_chronology_id (optional)
     * @param  int $valid_from_in_0_day_of_month (optional)
     * @param  string $valid_from_in_0_day_of_week (optional)
     * @param  int $valid_from_in_0_day_of_year (optional)
     * @param  int $valid_from_in_0_era_value (optional)
     * @param  bool $valid_from_in_0_leap_year (optional)
     * @param  string $valid_from_in_0_month (optional)
     * @param  int $valid_from_in_0_month_value (optional)
     * @param  int $valid_from_in_0_year (optional)
     * @param  \DateTime $valid_from_less_than (optional)
     * @param  \DateTime $valid_from_less_than_or_equal (optional)
     * @param  \DateTime $valid_from_not_equals (optional)
     * @param  bool $valid_from_specified (optional)
     * @param  \DateTime $valid_to_equals (optional)
     * @param  \DateTime $valid_to_greater_than (optional)
     * @param  \DateTime $valid_to_greater_than_or_equal (optional)
     * @param  string $valid_to_in_0_chronology_calendar_type (optional)
     * @param  string $valid_to_in_0_chronology_id (optional)
     * @param  int $valid_to_in_0_day_of_month (optional)
     * @param  string $valid_to_in_0_day_of_week (optional)
     * @param  int $valid_to_in_0_day_of_year (optional)
     * @param  int $valid_to_in_0_era_value (optional)
     * @param  bool $valid_to_in_0_leap_year (optional)
     * @param  string $valid_to_in_0_month (optional)
     * @param  int $valid_to_in_0_month_value (optional)
     * @param  int $valid_to_in_0_year (optional)
     * @param  \DateTime $valid_to_less_than (optional)
     * @param  \DateTime $valid_to_less_than_or_equal (optional)
     * @param  \DateTime $valid_to_not_equals (optional)
     * @param  bool $valid_to_specified (optional)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Idealogic\MembershipAPI\Model\MembershipDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllMembershipsUsingGETWithHttpInfo($criteria_id_equals = null, $criteria_id_greater_than = null, $criteria_id_greater_than_or_equal = null, $criteria_id_in = null, $criteria_id_less_than = null, $criteria_id_less_than_or_equal = null, $criteria_id_not_equals = null, $criteria_id_specified = null, $id_equals = null, $id_greater_than = null, $id_greater_than_or_equal = null, $id_in = null, $id_less_than = null, $id_less_than_or_equal = null, $id_not_equals = null, $id_specified = null, $membership_period_id_equals = null, $membership_period_id_greater_than = null, $membership_period_id_greater_than_or_equal = null, $membership_period_id_in = null, $membership_period_id_less_than = null, $membership_period_id_less_than_or_equal = null, $membership_period_id_not_equals = null, $membership_period_id_specified = null, $number_id_equals = null, $number_id_greater_than = null, $number_id_greater_than_or_equal = null, $number_id_in = null, $number_id_less_than = null, $number_id_less_than_or_equal = null, $number_id_not_equals = null, $number_id_specified = null, $order_id_equals = null, $order_id_greater_than = null, $order_id_greater_than_or_equal = null, $order_id_in = null, $order_id_less_than = null, $order_id_less_than_or_equal = null, $order_id_not_equals = null, $order_id_specified = null, $page = null, $person_id_equals = null, $person_id_greater_than = null, $person_id_greater_than_or_equal = null, $person_id_in = null, $person_id_less_than = null, $person_id_less_than_or_equal = null, $person_id_not_equals = null, $person_id_specified = null, $size = null, $sort = null, $status_equals = null, $status_in = null, $status_not_equals = null, $status_specified = null, $valid_from_equals = null, $valid_from_greater_than = null, $valid_from_greater_than_or_equal = null, $valid_from_in_0_chronology_calendar_type = null, $valid_from_in_0_chronology_id = null, $valid_from_in_0_day_of_month = null, $valid_from_in_0_day_of_week = null, $valid_from_in_0_day_of_year = null, $valid_from_in_0_era_value = null, $valid_from_in_0_leap_year = null, $valid_from_in_0_month = null, $valid_from_in_0_month_value = null, $valid_from_in_0_year = null, $valid_from_less_than = null, $valid_from_less_than_or_equal = null, $valid_from_not_equals = null, $valid_from_specified = null, $valid_to_equals = null, $valid_to_greater_than = null, $valid_to_greater_than_or_equal = null, $valid_to_in_0_chronology_calendar_type = null, $valid_to_in_0_chronology_id = null, $valid_to_in_0_day_of_month = null, $valid_to_in_0_day_of_week = null, $valid_to_in_0_day_of_year = null, $valid_to_in_0_era_value = null, $valid_to_in_0_leap_year = null, $valid_to_in_0_month = null, $valid_to_in_0_month_value = null, $valid_to_in_0_year = null, $valid_to_less_than = null, $valid_to_less_than_or_equal = null, $valid_to_not_equals = null, $valid_to_specified = null)
    {
        $returnType = '\Idealogic\MembershipAPI\Model\MembershipDTO[]';
        $request = $this->getAllMembershipsUsingGETRequest($criteria_id_equals, $criteria_id_greater_than, $criteria_id_greater_than_or_equal, $criteria_id_in, $criteria_id_less_than, $criteria_id_less_than_or_equal, $criteria_id_not_equals, $criteria_id_specified, $id_equals, $id_greater_than, $id_greater_than_or_equal, $id_in, $id_less_than, $id_less_than_or_equal, $id_not_equals, $id_specified, $membership_period_id_equals, $membership_period_id_greater_than, $membership_period_id_greater_than_or_equal, $membership_period_id_in, $membership_period_id_less_than, $membership_period_id_less_than_or_equal, $membership_period_id_not_equals, $membership_period_id_specified, $number_id_equals, $number_id_greater_than, $number_id_greater_than_or_equal, $number_id_in, $number_id_less_than, $number_id_less_than_or_equal, $number_id_not_equals, $number_id_specified, $order_id_equals, $order_id_greater_than, $order_id_greater_than_or_equal, $order_id_in, $order_id_less_than, $order_id_less_than_or_equal, $order_id_not_equals, $order_id_specified, $page, $person_id_equals, $person_id_greater_than, $person_id_greater_than_or_equal, $person_id_in, $person_id_less_than, $person_id_less_than_or_equal, $person_id_not_equals, $person_id_specified, $size, $sort, $status_equals, $status_in, $status_not_equals, $status_specified, $valid_from_equals, $valid_from_greater_than, $valid_from_greater_than_or_equal, $valid_from_in_0_chronology_calendar_type, $valid_from_in_0_chronology_id, $valid_from_in_0_day_of_month, $valid_from_in_0_day_of_week, $valid_from_in_0_day_of_year, $valid_from_in_0_era_value, $valid_from_in_0_leap_year, $valid_from_in_0_month, $valid_from_in_0_month_value, $valid_from_in_0_year, $valid_from_less_than, $valid_from_less_than_or_equal, $valid_from_not_equals, $valid_from_specified, $valid_to_equals, $valid_to_greater_than, $valid_to_greater_than_or_equal, $valid_to_in_0_chronology_calendar_type, $valid_to_in_0_chronology_id, $valid_to_in_0_day_of_month, $valid_to_in_0_day_of_week, $valid_to_in_0_day_of_year, $valid_to_in_0_era_value, $valid_to_in_0_leap_year, $valid_to_in_0_month, $valid_to_in_0_month_value, $valid_to_in_0_year, $valid_to_less_than, $valid_to_less_than_or_equal, $valid_to_not_equals, $valid_to_specified);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Idealogic\MembershipAPI\Model\MembershipDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllMembershipsUsingGETAsync
     *
     * getAllMemberships
     *
     * @param  int $criteria_id_equals (optional)
     * @param  int $criteria_id_greater_than (optional)
     * @param  int $criteria_id_greater_than_or_equal (optional)
     * @param  int[] $criteria_id_in (optional)
     * @param  int $criteria_id_less_than (optional)
     * @param  int $criteria_id_less_than_or_equal (optional)
     * @param  int $criteria_id_not_equals (optional)
     * @param  bool $criteria_id_specified (optional)
     * @param  int $id_equals (optional)
     * @param  int $id_greater_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int[] $id_in (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int $membership_period_id_equals (optional)
     * @param  int $membership_period_id_greater_than (optional)
     * @param  int $membership_period_id_greater_than_or_equal (optional)
     * @param  int[] $membership_period_id_in (optional)
     * @param  int $membership_period_id_less_than (optional)
     * @param  int $membership_period_id_less_than_or_equal (optional)
     * @param  int $membership_period_id_not_equals (optional)
     * @param  bool $membership_period_id_specified (optional)
     * @param  int $number_id_equals (optional)
     * @param  int $number_id_greater_than (optional)
     * @param  int $number_id_greater_than_or_equal (optional)
     * @param  int[] $number_id_in (optional)
     * @param  int $number_id_less_than (optional)
     * @param  int $number_id_less_than_or_equal (optional)
     * @param  int $number_id_not_equals (optional)
     * @param  bool $number_id_specified (optional)
     * @param  int $order_id_equals (optional)
     * @param  int $order_id_greater_than (optional)
     * @param  int $order_id_greater_than_or_equal (optional)
     * @param  int[] $order_id_in (optional)
     * @param  int $order_id_less_than (optional)
     * @param  int $order_id_less_than_or_equal (optional)
     * @param  int $order_id_not_equals (optional)
     * @param  bool $order_id_specified (optional)
     * @param  int $page Page number of the requested page (optional)
     * @param  int $person_id_equals (optional)
     * @param  int $person_id_greater_than (optional)
     * @param  int $person_id_greater_than_or_equal (optional)
     * @param  int[] $person_id_in (optional)
     * @param  int $person_id_less_than (optional)
     * @param  int $person_id_less_than_or_equal (optional)
     * @param  int $person_id_not_equals (optional)
     * @param  bool $person_id_specified (optional)
     * @param  int $size Size of a page (optional)
     * @param  string[] $sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @param  string $status_equals (optional)
     * @param  string[] $status_in (optional)
     * @param  string $status_not_equals (optional)
     * @param  bool $status_specified (optional)
     * @param  \DateTime $valid_from_equals (optional)
     * @param  \DateTime $valid_from_greater_than (optional)
     * @param  \DateTime $valid_from_greater_than_or_equal (optional)
     * @param  string $valid_from_in_0_chronology_calendar_type (optional)
     * @param  string $valid_from_in_0_chronology_id (optional)
     * @param  int $valid_from_in_0_day_of_month (optional)
     * @param  string $valid_from_in_0_day_of_week (optional)
     * @param  int $valid_from_in_0_day_of_year (optional)
     * @param  int $valid_from_in_0_era_value (optional)
     * @param  bool $valid_from_in_0_leap_year (optional)
     * @param  string $valid_from_in_0_month (optional)
     * @param  int $valid_from_in_0_month_value (optional)
     * @param  int $valid_from_in_0_year (optional)
     * @param  \DateTime $valid_from_less_than (optional)
     * @param  \DateTime $valid_from_less_than_or_equal (optional)
     * @param  \DateTime $valid_from_not_equals (optional)
     * @param  bool $valid_from_specified (optional)
     * @param  \DateTime $valid_to_equals (optional)
     * @param  \DateTime $valid_to_greater_than (optional)
     * @param  \DateTime $valid_to_greater_than_or_equal (optional)
     * @param  string $valid_to_in_0_chronology_calendar_type (optional)
     * @param  string $valid_to_in_0_chronology_id (optional)
     * @param  int $valid_to_in_0_day_of_month (optional)
     * @param  string $valid_to_in_0_day_of_week (optional)
     * @param  int $valid_to_in_0_day_of_year (optional)
     * @param  int $valid_to_in_0_era_value (optional)
     * @param  bool $valid_to_in_0_leap_year (optional)
     * @param  string $valid_to_in_0_month (optional)
     * @param  int $valid_to_in_0_month_value (optional)
     * @param  int $valid_to_in_0_year (optional)
     * @param  \DateTime $valid_to_less_than (optional)
     * @param  \DateTime $valid_to_less_than_or_equal (optional)
     * @param  \DateTime $valid_to_not_equals (optional)
     * @param  bool $valid_to_specified (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllMembershipsUsingGETAsync($criteria_id_equals = null, $criteria_id_greater_than = null, $criteria_id_greater_than_or_equal = null, $criteria_id_in = null, $criteria_id_less_than = null, $criteria_id_less_than_or_equal = null, $criteria_id_not_equals = null, $criteria_id_specified = null, $id_equals = null, $id_greater_than = null, $id_greater_than_or_equal = null, $id_in = null, $id_less_than = null, $id_less_than_or_equal = null, $id_not_equals = null, $id_specified = null, $membership_period_id_equals = null, $membership_period_id_greater_than = null, $membership_period_id_greater_than_or_equal = null, $membership_period_id_in = null, $membership_period_id_less_than = null, $membership_period_id_less_than_or_equal = null, $membership_period_id_not_equals = null, $membership_period_id_specified = null, $number_id_equals = null, $number_id_greater_than = null, $number_id_greater_than_or_equal = null, $number_id_in = null, $number_id_less_than = null, $number_id_less_than_or_equal = null, $number_id_not_equals = null, $number_id_specified = null, $order_id_equals = null, $order_id_greater_than = null, $order_id_greater_than_or_equal = null, $order_id_in = null, $order_id_less_than = null, $order_id_less_than_or_equal = null, $order_id_not_equals = null, $order_id_specified = null, $page = null, $person_id_equals = null, $person_id_greater_than = null, $person_id_greater_than_or_equal = null, $person_id_in = null, $person_id_less_than = null, $person_id_less_than_or_equal = null, $person_id_not_equals = null, $person_id_specified = null, $size = null, $sort = null, $status_equals = null, $status_in = null, $status_not_equals = null, $status_specified = null, $valid_from_equals = null, $valid_from_greater_than = null, $valid_from_greater_than_or_equal = null, $valid_from_in_0_chronology_calendar_type = null, $valid_from_in_0_chronology_id = null, $valid_from_in_0_day_of_month = null, $valid_from_in_0_day_of_week = null, $valid_from_in_0_day_of_year = null, $valid_from_in_0_era_value = null, $valid_from_in_0_leap_year = null, $valid_from_in_0_month = null, $valid_from_in_0_month_value = null, $valid_from_in_0_year = null, $valid_from_less_than = null, $valid_from_less_than_or_equal = null, $valid_from_not_equals = null, $valid_from_specified = null, $valid_to_equals = null, $valid_to_greater_than = null, $valid_to_greater_than_or_equal = null, $valid_to_in_0_chronology_calendar_type = null, $valid_to_in_0_chronology_id = null, $valid_to_in_0_day_of_month = null, $valid_to_in_0_day_of_week = null, $valid_to_in_0_day_of_year = null, $valid_to_in_0_era_value = null, $valid_to_in_0_leap_year = null, $valid_to_in_0_month = null, $valid_to_in_0_month_value = null, $valid_to_in_0_year = null, $valid_to_less_than = null, $valid_to_less_than_or_equal = null, $valid_to_not_equals = null, $valid_to_specified = null)
    {
        return $this->getAllMembershipsUsingGETAsyncWithHttpInfo($criteria_id_equals, $criteria_id_greater_than, $criteria_id_greater_than_or_equal, $criteria_id_in, $criteria_id_less_than, $criteria_id_less_than_or_equal, $criteria_id_not_equals, $criteria_id_specified, $id_equals, $id_greater_than, $id_greater_than_or_equal, $id_in, $id_less_than, $id_less_than_or_equal, $id_not_equals, $id_specified, $membership_period_id_equals, $membership_period_id_greater_than, $membership_period_id_greater_than_or_equal, $membership_period_id_in, $membership_period_id_less_than, $membership_period_id_less_than_or_equal, $membership_period_id_not_equals, $membership_period_id_specified, $number_id_equals, $number_id_greater_than, $number_id_greater_than_or_equal, $number_id_in, $number_id_less_than, $number_id_less_than_or_equal, $number_id_not_equals, $number_id_specified, $order_id_equals, $order_id_greater_than, $order_id_greater_than_or_equal, $order_id_in, $order_id_less_than, $order_id_less_than_or_equal, $order_id_not_equals, $order_id_specified, $page, $person_id_equals, $person_id_greater_than, $person_id_greater_than_or_equal, $person_id_in, $person_id_less_than, $person_id_less_than_or_equal, $person_id_not_equals, $person_id_specified, $size, $sort, $status_equals, $status_in, $status_not_equals, $status_specified, $valid_from_equals, $valid_from_greater_than, $valid_from_greater_than_or_equal, $valid_from_in_0_chronology_calendar_type, $valid_from_in_0_chronology_id, $valid_from_in_0_day_of_month, $valid_from_in_0_day_of_week, $valid_from_in_0_day_of_year, $valid_from_in_0_era_value, $valid_from_in_0_leap_year, $valid_from_in_0_month, $valid_from_in_0_month_value, $valid_from_in_0_year, $valid_from_less_than, $valid_from_less_than_or_equal, $valid_from_not_equals, $valid_from_specified, $valid_to_equals, $valid_to_greater_than, $valid_to_greater_than_or_equal, $valid_to_in_0_chronology_calendar_type, $valid_to_in_0_chronology_id, $valid_to_in_0_day_of_month, $valid_to_in_0_day_of_week, $valid_to_in_0_day_of_year, $valid_to_in_0_era_value, $valid_to_in_0_leap_year, $valid_to_in_0_month, $valid_to_in_0_month_value, $valid_to_in_0_year, $valid_to_less_than, $valid_to_less_than_or_equal, $valid_to_not_equals, $valid_to_specified)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllMembershipsUsingGETAsyncWithHttpInfo
     *
     * getAllMemberships
     *
     * @param  int $criteria_id_equals (optional)
     * @param  int $criteria_id_greater_than (optional)
     * @param  int $criteria_id_greater_than_or_equal (optional)
     * @param  int[] $criteria_id_in (optional)
     * @param  int $criteria_id_less_than (optional)
     * @param  int $criteria_id_less_than_or_equal (optional)
     * @param  int $criteria_id_not_equals (optional)
     * @param  bool $criteria_id_specified (optional)
     * @param  int $id_equals (optional)
     * @param  int $id_greater_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int[] $id_in (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int $membership_period_id_equals (optional)
     * @param  int $membership_period_id_greater_than (optional)
     * @param  int $membership_period_id_greater_than_or_equal (optional)
     * @param  int[] $membership_period_id_in (optional)
     * @param  int $membership_period_id_less_than (optional)
     * @param  int $membership_period_id_less_than_or_equal (optional)
     * @param  int $membership_period_id_not_equals (optional)
     * @param  bool $membership_period_id_specified (optional)
     * @param  int $number_id_equals (optional)
     * @param  int $number_id_greater_than (optional)
     * @param  int $number_id_greater_than_or_equal (optional)
     * @param  int[] $number_id_in (optional)
     * @param  int $number_id_less_than (optional)
     * @param  int $number_id_less_than_or_equal (optional)
     * @param  int $number_id_not_equals (optional)
     * @param  bool $number_id_specified (optional)
     * @param  int $order_id_equals (optional)
     * @param  int $order_id_greater_than (optional)
     * @param  int $order_id_greater_than_or_equal (optional)
     * @param  int[] $order_id_in (optional)
     * @param  int $order_id_less_than (optional)
     * @param  int $order_id_less_than_or_equal (optional)
     * @param  int $order_id_not_equals (optional)
     * @param  bool $order_id_specified (optional)
     * @param  int $page Page number of the requested page (optional)
     * @param  int $person_id_equals (optional)
     * @param  int $person_id_greater_than (optional)
     * @param  int $person_id_greater_than_or_equal (optional)
     * @param  int[] $person_id_in (optional)
     * @param  int $person_id_less_than (optional)
     * @param  int $person_id_less_than_or_equal (optional)
     * @param  int $person_id_not_equals (optional)
     * @param  bool $person_id_specified (optional)
     * @param  int $size Size of a page (optional)
     * @param  string[] $sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @param  string $status_equals (optional)
     * @param  string[] $status_in (optional)
     * @param  string $status_not_equals (optional)
     * @param  bool $status_specified (optional)
     * @param  \DateTime $valid_from_equals (optional)
     * @param  \DateTime $valid_from_greater_than (optional)
     * @param  \DateTime $valid_from_greater_than_or_equal (optional)
     * @param  string $valid_from_in_0_chronology_calendar_type (optional)
     * @param  string $valid_from_in_0_chronology_id (optional)
     * @param  int $valid_from_in_0_day_of_month (optional)
     * @param  string $valid_from_in_0_day_of_week (optional)
     * @param  int $valid_from_in_0_day_of_year (optional)
     * @param  int $valid_from_in_0_era_value (optional)
     * @param  bool $valid_from_in_0_leap_year (optional)
     * @param  string $valid_from_in_0_month (optional)
     * @param  int $valid_from_in_0_month_value (optional)
     * @param  int $valid_from_in_0_year (optional)
     * @param  \DateTime $valid_from_less_than (optional)
     * @param  \DateTime $valid_from_less_than_or_equal (optional)
     * @param  \DateTime $valid_from_not_equals (optional)
     * @param  bool $valid_from_specified (optional)
     * @param  \DateTime $valid_to_equals (optional)
     * @param  \DateTime $valid_to_greater_than (optional)
     * @param  \DateTime $valid_to_greater_than_or_equal (optional)
     * @param  string $valid_to_in_0_chronology_calendar_type (optional)
     * @param  string $valid_to_in_0_chronology_id (optional)
     * @param  int $valid_to_in_0_day_of_month (optional)
     * @param  string $valid_to_in_0_day_of_week (optional)
     * @param  int $valid_to_in_0_day_of_year (optional)
     * @param  int $valid_to_in_0_era_value (optional)
     * @param  bool $valid_to_in_0_leap_year (optional)
     * @param  string $valid_to_in_0_month (optional)
     * @param  int $valid_to_in_0_month_value (optional)
     * @param  int $valid_to_in_0_year (optional)
     * @param  \DateTime $valid_to_less_than (optional)
     * @param  \DateTime $valid_to_less_than_or_equal (optional)
     * @param  \DateTime $valid_to_not_equals (optional)
     * @param  bool $valid_to_specified (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllMembershipsUsingGETAsyncWithHttpInfo($criteria_id_equals = null, $criteria_id_greater_than = null, $criteria_id_greater_than_or_equal = null, $criteria_id_in = null, $criteria_id_less_than = null, $criteria_id_less_than_or_equal = null, $criteria_id_not_equals = null, $criteria_id_specified = null, $id_equals = null, $id_greater_than = null, $id_greater_than_or_equal = null, $id_in = null, $id_less_than = null, $id_less_than_or_equal = null, $id_not_equals = null, $id_specified = null, $membership_period_id_equals = null, $membership_period_id_greater_than = null, $membership_period_id_greater_than_or_equal = null, $membership_period_id_in = null, $membership_period_id_less_than = null, $membership_period_id_less_than_or_equal = null, $membership_period_id_not_equals = null, $membership_period_id_specified = null, $number_id_equals = null, $number_id_greater_than = null, $number_id_greater_than_or_equal = null, $number_id_in = null, $number_id_less_than = null, $number_id_less_than_or_equal = null, $number_id_not_equals = null, $number_id_specified = null, $order_id_equals = null, $order_id_greater_than = null, $order_id_greater_than_or_equal = null, $order_id_in = null, $order_id_less_than = null, $order_id_less_than_or_equal = null, $order_id_not_equals = null, $order_id_specified = null, $page = null, $person_id_equals = null, $person_id_greater_than = null, $person_id_greater_than_or_equal = null, $person_id_in = null, $person_id_less_than = null, $person_id_less_than_or_equal = null, $person_id_not_equals = null, $person_id_specified = null, $size = null, $sort = null, $status_equals = null, $status_in = null, $status_not_equals = null, $status_specified = null, $valid_from_equals = null, $valid_from_greater_than = null, $valid_from_greater_than_or_equal = null, $valid_from_in_0_chronology_calendar_type = null, $valid_from_in_0_chronology_id = null, $valid_from_in_0_day_of_month = null, $valid_from_in_0_day_of_week = null, $valid_from_in_0_day_of_year = null, $valid_from_in_0_era_value = null, $valid_from_in_0_leap_year = null, $valid_from_in_0_month = null, $valid_from_in_0_month_value = null, $valid_from_in_0_year = null, $valid_from_less_than = null, $valid_from_less_than_or_equal = null, $valid_from_not_equals = null, $valid_from_specified = null, $valid_to_equals = null, $valid_to_greater_than = null, $valid_to_greater_than_or_equal = null, $valid_to_in_0_chronology_calendar_type = null, $valid_to_in_0_chronology_id = null, $valid_to_in_0_day_of_month = null, $valid_to_in_0_day_of_week = null, $valid_to_in_0_day_of_year = null, $valid_to_in_0_era_value = null, $valid_to_in_0_leap_year = null, $valid_to_in_0_month = null, $valid_to_in_0_month_value = null, $valid_to_in_0_year = null, $valid_to_less_than = null, $valid_to_less_than_or_equal = null, $valid_to_not_equals = null, $valid_to_specified = null)
    {
        $returnType = '\Idealogic\MembershipAPI\Model\MembershipDTO[]';
        $request = $this->getAllMembershipsUsingGETRequest($criteria_id_equals, $criteria_id_greater_than, $criteria_id_greater_than_or_equal, $criteria_id_in, $criteria_id_less_than, $criteria_id_less_than_or_equal, $criteria_id_not_equals, $criteria_id_specified, $id_equals, $id_greater_than, $id_greater_than_or_equal, $id_in, $id_less_than, $id_less_than_or_equal, $id_not_equals, $id_specified, $membership_period_id_equals, $membership_period_id_greater_than, $membership_period_id_greater_than_or_equal, $membership_period_id_in, $membership_period_id_less_than, $membership_period_id_less_than_or_equal, $membership_period_id_not_equals, $membership_period_id_specified, $number_id_equals, $number_id_greater_than, $number_id_greater_than_or_equal, $number_id_in, $number_id_less_than, $number_id_less_than_or_equal, $number_id_not_equals, $number_id_specified, $order_id_equals, $order_id_greater_than, $order_id_greater_than_or_equal, $order_id_in, $order_id_less_than, $order_id_less_than_or_equal, $order_id_not_equals, $order_id_specified, $page, $person_id_equals, $person_id_greater_than, $person_id_greater_than_or_equal, $person_id_in, $person_id_less_than, $person_id_less_than_or_equal, $person_id_not_equals, $person_id_specified, $size, $sort, $status_equals, $status_in, $status_not_equals, $status_specified, $valid_from_equals, $valid_from_greater_than, $valid_from_greater_than_or_equal, $valid_from_in_0_chronology_calendar_type, $valid_from_in_0_chronology_id, $valid_from_in_0_day_of_month, $valid_from_in_0_day_of_week, $valid_from_in_0_day_of_year, $valid_from_in_0_era_value, $valid_from_in_0_leap_year, $valid_from_in_0_month, $valid_from_in_0_month_value, $valid_from_in_0_year, $valid_from_less_than, $valid_from_less_than_or_equal, $valid_from_not_equals, $valid_from_specified, $valid_to_equals, $valid_to_greater_than, $valid_to_greater_than_or_equal, $valid_to_in_0_chronology_calendar_type, $valid_to_in_0_chronology_id, $valid_to_in_0_day_of_month, $valid_to_in_0_day_of_week, $valid_to_in_0_day_of_year, $valid_to_in_0_era_value, $valid_to_in_0_leap_year, $valid_to_in_0_month, $valid_to_in_0_month_value, $valid_to_in_0_year, $valid_to_less_than, $valid_to_less_than_or_equal, $valid_to_not_equals, $valid_to_specified);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllMembershipsUsingGET'
     *
     * @param  int $criteria_id_equals (optional)
     * @param  int $criteria_id_greater_than (optional)
     * @param  int $criteria_id_greater_than_or_equal (optional)
     * @param  int[] $criteria_id_in (optional)
     * @param  int $criteria_id_less_than (optional)
     * @param  int $criteria_id_less_than_or_equal (optional)
     * @param  int $criteria_id_not_equals (optional)
     * @param  bool $criteria_id_specified (optional)
     * @param  int $id_equals (optional)
     * @param  int $id_greater_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int[] $id_in (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int $membership_period_id_equals (optional)
     * @param  int $membership_period_id_greater_than (optional)
     * @param  int $membership_period_id_greater_than_or_equal (optional)
     * @param  int[] $membership_period_id_in (optional)
     * @param  int $membership_period_id_less_than (optional)
     * @param  int $membership_period_id_less_than_or_equal (optional)
     * @param  int $membership_period_id_not_equals (optional)
     * @param  bool $membership_period_id_specified (optional)
     * @param  int $number_id_equals (optional)
     * @param  int $number_id_greater_than (optional)
     * @param  int $number_id_greater_than_or_equal (optional)
     * @param  int[] $number_id_in (optional)
     * @param  int $number_id_less_than (optional)
     * @param  int $number_id_less_than_or_equal (optional)
     * @param  int $number_id_not_equals (optional)
     * @param  bool $number_id_specified (optional)
     * @param  int $order_id_equals (optional)
     * @param  int $order_id_greater_than (optional)
     * @param  int $order_id_greater_than_or_equal (optional)
     * @param  int[] $order_id_in (optional)
     * @param  int $order_id_less_than (optional)
     * @param  int $order_id_less_than_or_equal (optional)
     * @param  int $order_id_not_equals (optional)
     * @param  bool $order_id_specified (optional)
     * @param  int $page Page number of the requested page (optional)
     * @param  int $person_id_equals (optional)
     * @param  int $person_id_greater_than (optional)
     * @param  int $person_id_greater_than_or_equal (optional)
     * @param  int[] $person_id_in (optional)
     * @param  int $person_id_less_than (optional)
     * @param  int $person_id_less_than_or_equal (optional)
     * @param  int $person_id_not_equals (optional)
     * @param  bool $person_id_specified (optional)
     * @param  int $size Size of a page (optional)
     * @param  string[] $sort Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @param  string $status_equals (optional)
     * @param  string[] $status_in (optional)
     * @param  string $status_not_equals (optional)
     * @param  bool $status_specified (optional)
     * @param  \DateTime $valid_from_equals (optional)
     * @param  \DateTime $valid_from_greater_than (optional)
     * @param  \DateTime $valid_from_greater_than_or_equal (optional)
     * @param  string $valid_from_in_0_chronology_calendar_type (optional)
     * @param  string $valid_from_in_0_chronology_id (optional)
     * @param  int $valid_from_in_0_day_of_month (optional)
     * @param  string $valid_from_in_0_day_of_week (optional)
     * @param  int $valid_from_in_0_day_of_year (optional)
     * @param  int $valid_from_in_0_era_value (optional)
     * @param  bool $valid_from_in_0_leap_year (optional)
     * @param  string $valid_from_in_0_month (optional)
     * @param  int $valid_from_in_0_month_value (optional)
     * @param  int $valid_from_in_0_year (optional)
     * @param  \DateTime $valid_from_less_than (optional)
     * @param  \DateTime $valid_from_less_than_or_equal (optional)
     * @param  \DateTime $valid_from_not_equals (optional)
     * @param  bool $valid_from_specified (optional)
     * @param  \DateTime $valid_to_equals (optional)
     * @param  \DateTime $valid_to_greater_than (optional)
     * @param  \DateTime $valid_to_greater_than_or_equal (optional)
     * @param  string $valid_to_in_0_chronology_calendar_type (optional)
     * @param  string $valid_to_in_0_chronology_id (optional)
     * @param  int $valid_to_in_0_day_of_month (optional)
     * @param  string $valid_to_in_0_day_of_week (optional)
     * @param  int $valid_to_in_0_day_of_year (optional)
     * @param  int $valid_to_in_0_era_value (optional)
     * @param  bool $valid_to_in_0_leap_year (optional)
     * @param  string $valid_to_in_0_month (optional)
     * @param  int $valid_to_in_0_month_value (optional)
     * @param  int $valid_to_in_0_year (optional)
     * @param  \DateTime $valid_to_less_than (optional)
     * @param  \DateTime $valid_to_less_than_or_equal (optional)
     * @param  \DateTime $valid_to_not_equals (optional)
     * @param  bool $valid_to_specified (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllMembershipsUsingGETRequest($criteria_id_equals = null, $criteria_id_greater_than = null, $criteria_id_greater_than_or_equal = null, $criteria_id_in = null, $criteria_id_less_than = null, $criteria_id_less_than_or_equal = null, $criteria_id_not_equals = null, $criteria_id_specified = null, $id_equals = null, $id_greater_than = null, $id_greater_than_or_equal = null, $id_in = null, $id_less_than = null, $id_less_than_or_equal = null, $id_not_equals = null, $id_specified = null, $membership_period_id_equals = null, $membership_period_id_greater_than = null, $membership_period_id_greater_than_or_equal = null, $membership_period_id_in = null, $membership_period_id_less_than = null, $membership_period_id_less_than_or_equal = null, $membership_period_id_not_equals = null, $membership_period_id_specified = null, $number_id_equals = null, $number_id_greater_than = null, $number_id_greater_than_or_equal = null, $number_id_in = null, $number_id_less_than = null, $number_id_less_than_or_equal = null, $number_id_not_equals = null, $number_id_specified = null, $order_id_equals = null, $order_id_greater_than = null, $order_id_greater_than_or_equal = null, $order_id_in = null, $order_id_less_than = null, $order_id_less_than_or_equal = null, $order_id_not_equals = null, $order_id_specified = null, $page = null, $person_id_equals = null, $person_id_greater_than = null, $person_id_greater_than_or_equal = null, $person_id_in = null, $person_id_less_than = null, $person_id_less_than_or_equal = null, $person_id_not_equals = null, $person_id_specified = null, $size = null, $sort = null, $status_equals = null, $status_in = null, $status_not_equals = null, $status_specified = null, $valid_from_equals = null, $valid_from_greater_than = null, $valid_from_greater_than_or_equal = null, $valid_from_in_0_chronology_calendar_type = null, $valid_from_in_0_chronology_id = null, $valid_from_in_0_day_of_month = null, $valid_from_in_0_day_of_week = null, $valid_from_in_0_day_of_year = null, $valid_from_in_0_era_value = null, $valid_from_in_0_leap_year = null, $valid_from_in_0_month = null, $valid_from_in_0_month_value = null, $valid_from_in_0_year = null, $valid_from_less_than = null, $valid_from_less_than_or_equal = null, $valid_from_not_equals = null, $valid_from_specified = null, $valid_to_equals = null, $valid_to_greater_than = null, $valid_to_greater_than_or_equal = null, $valid_to_in_0_chronology_calendar_type = null, $valid_to_in_0_chronology_id = null, $valid_to_in_0_day_of_month = null, $valid_to_in_0_day_of_week = null, $valid_to_in_0_day_of_year = null, $valid_to_in_0_era_value = null, $valid_to_in_0_leap_year = null, $valid_to_in_0_month = null, $valid_to_in_0_month_value = null, $valid_to_in_0_year = null, $valid_to_less_than = null, $valid_to_less_than_or_equal = null, $valid_to_not_equals = null, $valid_to_specified = null)
    {

        $resourcePath = '/api/memberships';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($criteria_id_equals !== null) {
            $queryParams['criteriaId.equals'] = ObjectSerializer::toQueryValue($criteria_id_equals);
        }
        // query params
        if ($criteria_id_greater_than !== null) {
            $queryParams['criteriaId.greaterThan'] = ObjectSerializer::toQueryValue($criteria_id_greater_than);
        }
        // query params
        if ($criteria_id_greater_than_or_equal !== null) {
            $queryParams['criteriaId.greaterThanOrEqual'] = ObjectSerializer::toQueryValue($criteria_id_greater_than_or_equal);
        }
        // query params
        if (is_array($criteria_id_in)) {
            $queryParams['criteriaId.in'] = $criteria_id_in;
        } else
        if ($criteria_id_in !== null) {
            $queryParams['criteriaId.in'] = ObjectSerializer::toQueryValue($criteria_id_in);
        }
        // query params
        if ($criteria_id_less_than !== null) {
            $queryParams['criteriaId.lessThan'] = ObjectSerializer::toQueryValue($criteria_id_less_than);
        }
        // query params
        if ($criteria_id_less_than_or_equal !== null) {
            $queryParams['criteriaId.lessThanOrEqual'] = ObjectSerializer::toQueryValue($criteria_id_less_than_or_equal);
        }
        // query params
        if ($criteria_id_not_equals !== null) {
            $queryParams['criteriaId.notEquals'] = ObjectSerializer::toQueryValue($criteria_id_not_equals);
        }
        // query params
        if ($criteria_id_specified !== null) {
            $queryParams['criteriaId.specified'] = ObjectSerializer::toQueryValue($criteria_id_specified);
        }
        // query params
        if ($id_equals !== null) {
            $queryParams['id.equals'] = ObjectSerializer::toQueryValue($id_equals);
        }
        // query params
        if ($id_greater_than !== null) {
            $queryParams['id.greaterThan'] = ObjectSerializer::toQueryValue($id_greater_than);
        }
        // query params
        if ($id_greater_than_or_equal !== null) {
            $queryParams['id.greaterThanOrEqual'] = ObjectSerializer::toQueryValue($id_greater_than_or_equal);
        }
        // query params
        if (is_array($id_in)) {
            $queryParams['id.in'] = $id_in;
        } else
        if ($id_in !== null) {
            $queryParams['id.in'] = ObjectSerializer::toQueryValue($id_in);
        }
        // query params
        if ($id_less_than !== null) {
            $queryParams['id.lessThan'] = ObjectSerializer::toQueryValue($id_less_than);
        }
        // query params
        if ($id_less_than_or_equal !== null) {
            $queryParams['id.lessThanOrEqual'] = ObjectSerializer::toQueryValue($id_less_than_or_equal);
        }
        // query params
        if ($id_not_equals !== null) {
            $queryParams['id.notEquals'] = ObjectSerializer::toQueryValue($id_not_equals);
        }
        // query params
        if ($id_specified !== null) {
            $queryParams['id.specified'] = ObjectSerializer::toQueryValue($id_specified);
        }
        // query params
        if ($membership_period_id_equals !== null) {
            $queryParams['membershipPeriodId.equals'] = ObjectSerializer::toQueryValue($membership_period_id_equals);
        }
        // query params
        if ($membership_period_id_greater_than !== null) {
            $queryParams['membershipPeriodId.greaterThan'] = ObjectSerializer::toQueryValue($membership_period_id_greater_than);
        }
        // query params
        if ($membership_period_id_greater_than_or_equal !== null) {
            $queryParams['membershipPeriodId.greaterThanOrEqual'] = ObjectSerializer::toQueryValue($membership_period_id_greater_than_or_equal);
        }
        // query params
        if (is_array($membership_period_id_in)) {
            $queryParams['membershipPeriodId.in'] = $membership_period_id_in;
        } else
        if ($membership_period_id_in !== null) {
            $queryParams['membershipPeriodId.in'] = ObjectSerializer::toQueryValue($membership_period_id_in);
        }
        // query params
        if ($membership_period_id_less_than !== null) {
            $queryParams['membershipPeriodId.lessThan'] = ObjectSerializer::toQueryValue($membership_period_id_less_than);
        }
        // query params
        if ($membership_period_id_less_than_or_equal !== null) {
            $queryParams['membershipPeriodId.lessThanOrEqual'] = ObjectSerializer::toQueryValue($membership_period_id_less_than_or_equal);
        }
        // query params
        if ($membership_period_id_not_equals !== null) {
            $queryParams['membershipPeriodId.notEquals'] = ObjectSerializer::toQueryValue($membership_period_id_not_equals);
        }
        // query params
        if ($membership_period_id_specified !== null) {
            $queryParams['membershipPeriodId.specified'] = ObjectSerializer::toQueryValue($membership_period_id_specified);
        }
        // query params
        if ($number_id_equals !== null) {
            $queryParams['numberId.equals'] = ObjectSerializer::toQueryValue($number_id_equals);
        }
        // query params
        if ($number_id_greater_than !== null) {
            $queryParams['numberId.greaterThan'] = ObjectSerializer::toQueryValue($number_id_greater_than);
        }
        // query params
        if ($number_id_greater_than_or_equal !== null) {
            $queryParams['numberId.greaterThanOrEqual'] = ObjectSerializer::toQueryValue($number_id_greater_than_or_equal);
        }
        // query params
        if (is_array($number_id_in)) {
            $queryParams['numberId.in'] = $number_id_in;
        } else
        if ($number_id_in !== null) {
            $queryParams['numberId.in'] = ObjectSerializer::toQueryValue($number_id_in);
        }
        // query params
        if ($number_id_less_than !== null) {
            $queryParams['numberId.lessThan'] = ObjectSerializer::toQueryValue($number_id_less_than);
        }
        // query params
        if ($number_id_less_than_or_equal !== null) {
            $queryParams['numberId.lessThanOrEqual'] = ObjectSerializer::toQueryValue($number_id_less_than_or_equal);
        }
        // query params
        if ($number_id_not_equals !== null) {
            $queryParams['numberId.notEquals'] = ObjectSerializer::toQueryValue($number_id_not_equals);
        }
        // query params
        if ($number_id_specified !== null) {
            $queryParams['numberId.specified'] = ObjectSerializer::toQueryValue($number_id_specified);
        }
        // query params
        if ($order_id_equals !== null) {
            $queryParams['orderId.equals'] = ObjectSerializer::toQueryValue($order_id_equals);
        }
        // query params
        if ($order_id_greater_than !== null) {
            $queryParams['orderId.greaterThan'] = ObjectSerializer::toQueryValue($order_id_greater_than);
        }
        // query params
        if ($order_id_greater_than_or_equal !== null) {
            $queryParams['orderId.greaterThanOrEqual'] = ObjectSerializer::toQueryValue($order_id_greater_than_or_equal);
        }
        // query params
        if (is_array($order_id_in)) {
            $queryParams['orderId.in'] = $order_id_in;
        } else
        if ($order_id_in !== null) {
            $queryParams['orderId.in'] = ObjectSerializer::toQueryValue($order_id_in);
        }
        // query params
        if ($order_id_less_than !== null) {
            $queryParams['orderId.lessThan'] = ObjectSerializer::toQueryValue($order_id_less_than);
        }
        // query params
        if ($order_id_less_than_or_equal !== null) {
            $queryParams['orderId.lessThanOrEqual'] = ObjectSerializer::toQueryValue($order_id_less_than_or_equal);
        }
        // query params
        if ($order_id_not_equals !== null) {
            $queryParams['orderId.notEquals'] = ObjectSerializer::toQueryValue($order_id_not_equals);
        }
        // query params
        if ($order_id_specified !== null) {
            $queryParams['orderId.specified'] = ObjectSerializer::toQueryValue($order_id_specified);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($person_id_equals !== null) {
            $queryParams['personId.equals'] = ObjectSerializer::toQueryValue($person_id_equals);
        }
        // query params
        if ($person_id_greater_than !== null) {
            $queryParams['personId.greaterThan'] = ObjectSerializer::toQueryValue($person_id_greater_than);
        }
        // query params
        if ($person_id_greater_than_or_equal !== null) {
            $queryParams['personId.greaterThanOrEqual'] = ObjectSerializer::toQueryValue($person_id_greater_than_or_equal);
        }
        // query params
        if (is_array($person_id_in)) {
            $queryParams['personId.in'] = $person_id_in;
        } else
        if ($person_id_in !== null) {
            $queryParams['personId.in'] = ObjectSerializer::toQueryValue($person_id_in);
        }
        // query params
        if ($person_id_less_than !== null) {
            $queryParams['personId.lessThan'] = ObjectSerializer::toQueryValue($person_id_less_than);
        }
        // query params
        if ($person_id_less_than_or_equal !== null) {
            $queryParams['personId.lessThanOrEqual'] = ObjectSerializer::toQueryValue($person_id_less_than_or_equal);
        }
        // query params
        if ($person_id_not_equals !== null) {
            $queryParams['personId.notEquals'] = ObjectSerializer::toQueryValue($person_id_not_equals);
        }
        // query params
        if ($person_id_specified !== null) {
            $queryParams['personId.specified'] = ObjectSerializer::toQueryValue($person_id_specified);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size);
        }
        // query params
        if (is_array($sort)) {
            $queryParams['sort'] = $sort;
        } else
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($status_equals !== null) {
            $queryParams['status.equals'] = ObjectSerializer::toQueryValue($status_equals);
        }
        // query params
        if (is_array($status_in)) {
            $queryParams['status.in'] = $status_in;
        } else
        if ($status_in !== null) {
            $queryParams['status.in'] = ObjectSerializer::toQueryValue($status_in);
        }
        // query params
        if ($status_not_equals !== null) {
            $queryParams['status.notEquals'] = ObjectSerializer::toQueryValue($status_not_equals);
        }
        // query params
        if ($status_specified !== null) {
            $queryParams['status.specified'] = ObjectSerializer::toQueryValue($status_specified);
        }
        // query params
        if ($valid_from_equals !== null) {
            $queryParams['validFrom.equals'] = ObjectSerializer::toQueryValue($valid_from_equals);
        }
        // query params
        if ($valid_from_greater_than !== null) {
            $queryParams['validFrom.greaterThan'] = ObjectSerializer::toQueryValue($valid_from_greater_than);
        }
        // query params
        if ($valid_from_greater_than_or_equal !== null) {
            $queryParams['validFrom.greaterThanOrEqual'] = ObjectSerializer::toQueryValue($valid_from_greater_than_or_equal);
        }
        // query params
        if ($valid_from_in_0_chronology_calendar_type !== null) {
            $queryParams['validFrom.in[0].chronology.calendarType'] = ObjectSerializer::toQueryValue($valid_from_in_0_chronology_calendar_type);
        }
        // query params
        if ($valid_from_in_0_chronology_id !== null) {
            $queryParams['validFrom.in[0].chronology.id'] = ObjectSerializer::toQueryValue($valid_from_in_0_chronology_id);
        }
        // query params
        if ($valid_from_in_0_day_of_month !== null) {
            $queryParams['validFrom.in[0].dayOfMonth'] = ObjectSerializer::toQueryValue($valid_from_in_0_day_of_month);
        }
        // query params
        if ($valid_from_in_0_day_of_week !== null) {
            $queryParams['validFrom.in[0].dayOfWeek'] = ObjectSerializer::toQueryValue($valid_from_in_0_day_of_week);
        }
        // query params
        if ($valid_from_in_0_day_of_year !== null) {
            $queryParams['validFrom.in[0].dayOfYear'] = ObjectSerializer::toQueryValue($valid_from_in_0_day_of_year);
        }
        // query params
        if ($valid_from_in_0_era_value !== null) {
            $queryParams['validFrom.in[0].era.value'] = ObjectSerializer::toQueryValue($valid_from_in_0_era_value);
        }
        // query params
        if ($valid_from_in_0_leap_year !== null) {
            $queryParams['validFrom.in[0].leapYear'] = ObjectSerializer::toQueryValue($valid_from_in_0_leap_year);
        }
        // query params
        if ($valid_from_in_0_month !== null) {
            $queryParams['validFrom.in[0].month'] = ObjectSerializer::toQueryValue($valid_from_in_0_month);
        }
        // query params
        if ($valid_from_in_0_month_value !== null) {
            $queryParams['validFrom.in[0].monthValue'] = ObjectSerializer::toQueryValue($valid_from_in_0_month_value);
        }
        // query params
        if ($valid_from_in_0_year !== null) {
            $queryParams['validFrom.in[0].year'] = ObjectSerializer::toQueryValue($valid_from_in_0_year);
        }
        // query params
        if ($valid_from_less_than !== null) {
            $queryParams['validFrom.lessThan'] = ObjectSerializer::toQueryValue($valid_from_less_than);
        }
        // query params
        if ($valid_from_less_than_or_equal !== null) {
            $queryParams['validFrom.lessThanOrEqual'] = ObjectSerializer::toQueryValue($valid_from_less_than_or_equal);
        }
        // query params
        if ($valid_from_not_equals !== null) {
            $queryParams['validFrom.notEquals'] = ObjectSerializer::toQueryValue($valid_from_not_equals);
        }
        // query params
        if ($valid_from_specified !== null) {
            $queryParams['validFrom.specified'] = ObjectSerializer::toQueryValue($valid_from_specified);
        }
        // query params
        if ($valid_to_equals !== null) {
            $queryParams['validTo.equals'] = ObjectSerializer::toQueryValue($valid_to_equals);
        }
        // query params
        if ($valid_to_greater_than !== null) {
            $queryParams['validTo.greaterThan'] = ObjectSerializer::toQueryValue($valid_to_greater_than);
        }
        // query params
        if ($valid_to_greater_than_or_equal !== null) {
            $queryParams['validTo.greaterThanOrEqual'] = ObjectSerializer::toQueryValue($valid_to_greater_than_or_equal);
        }
        // query params
        if ($valid_to_in_0_chronology_calendar_type !== null) {
            $queryParams['validTo.in[0].chronology.calendarType'] = ObjectSerializer::toQueryValue($valid_to_in_0_chronology_calendar_type);
        }
        // query params
        if ($valid_to_in_0_chronology_id !== null) {
            $queryParams['validTo.in[0].chronology.id'] = ObjectSerializer::toQueryValue($valid_to_in_0_chronology_id);
        }
        // query params
        if ($valid_to_in_0_day_of_month !== null) {
            $queryParams['validTo.in[0].dayOfMonth'] = ObjectSerializer::toQueryValue($valid_to_in_0_day_of_month);
        }
        // query params
        if ($valid_to_in_0_day_of_week !== null) {
            $queryParams['validTo.in[0].dayOfWeek'] = ObjectSerializer::toQueryValue($valid_to_in_0_day_of_week);
        }
        // query params
        if ($valid_to_in_0_day_of_year !== null) {
            $queryParams['validTo.in[0].dayOfYear'] = ObjectSerializer::toQueryValue($valid_to_in_0_day_of_year);
        }
        // query params
        if ($valid_to_in_0_era_value !== null) {
            $queryParams['validTo.in[0].era.value'] = ObjectSerializer::toQueryValue($valid_to_in_0_era_value);
        }
        // query params
        if ($valid_to_in_0_leap_year !== null) {
            $queryParams['validTo.in[0].leapYear'] = ObjectSerializer::toQueryValue($valid_to_in_0_leap_year);
        }
        // query params
        if ($valid_to_in_0_month !== null) {
            $queryParams['validTo.in[0].month'] = ObjectSerializer::toQueryValue($valid_to_in_0_month);
        }
        // query params
        if ($valid_to_in_0_month_value !== null) {
            $queryParams['validTo.in[0].monthValue'] = ObjectSerializer::toQueryValue($valid_to_in_0_month_value);
        }
        // query params
        if ($valid_to_in_0_year !== null) {
            $queryParams['validTo.in[0].year'] = ObjectSerializer::toQueryValue($valid_to_in_0_year);
        }
        // query params
        if ($valid_to_less_than !== null) {
            $queryParams['validTo.lessThan'] = ObjectSerializer::toQueryValue($valid_to_less_than);
        }
        // query params
        if ($valid_to_less_than_or_equal !== null) {
            $queryParams['validTo.lessThanOrEqual'] = ObjectSerializer::toQueryValue($valid_to_less_than_or_equal);
        }
        // query params
        if ($valid_to_not_equals !== null) {
            $queryParams['validTo.notEquals'] = ObjectSerializer::toQueryValue($valid_to_not_equals);
        }
        // query params
        if ($valid_to_specified !== null) {
            $queryParams['validTo.specified'] = ObjectSerializer::toQueryValue($valid_to_specified);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLinkedMembersUsingGET
     *
     * getLinkedMembers
     *
     * @param  int $external_person_id externalPersonId (required)
     * @param  string $membership_type_name membershipTypeName (optional)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Idealogic\MembershipAPI\Model\MembershipStatusDTO[]
     */
    public function getLinkedMembersUsingGET($external_person_id, $membership_type_name = null)
    {
        list($response) = $this->getLinkedMembersUsingGETWithHttpInfo($external_person_id, $membership_type_name);
        return $response;
    }

    /**
     * Operation getLinkedMembersUsingGETWithHttpInfo
     *
     * getLinkedMembers
     *
     * @param  int $external_person_id externalPersonId (required)
     * @param  string $membership_type_name membershipTypeName (optional)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Idealogic\MembershipAPI\Model\MembershipStatusDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getLinkedMembersUsingGETWithHttpInfo($external_person_id, $membership_type_name = null)
    {
        $returnType = '\Idealogic\MembershipAPI\Model\MembershipStatusDTO[]';
        $request = $this->getLinkedMembersUsingGETRequest($external_person_id, $membership_type_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Idealogic\MembershipAPI\Model\MembershipStatusDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLinkedMembersUsingGETAsync
     *
     * getLinkedMembers
     *
     * @param  int $external_person_id externalPersonId (required)
     * @param  string $membership_type_name membershipTypeName (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLinkedMembersUsingGETAsync($external_person_id, $membership_type_name = null)
    {
        return $this->getLinkedMembersUsingGETAsyncWithHttpInfo($external_person_id, $membership_type_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLinkedMembersUsingGETAsyncWithHttpInfo
     *
     * getLinkedMembers
     *
     * @param  int $external_person_id externalPersonId (required)
     * @param  string $membership_type_name membershipTypeName (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLinkedMembersUsingGETAsyncWithHttpInfo($external_person_id, $membership_type_name = null)
    {
        $returnType = '\Idealogic\MembershipAPI\Model\MembershipStatusDTO[]';
        $request = $this->getLinkedMembersUsingGETRequest($external_person_id, $membership_type_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLinkedMembersUsingGET'
     *
     * @param  int $external_person_id externalPersonId (required)
     * @param  string $membership_type_name membershipTypeName (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLinkedMembersUsingGETRequest($external_person_id, $membership_type_name = null)
    {
        // verify the required parameter 'external_person_id' is set
        if ($external_person_id === null || (is_array($external_person_id) && count($external_person_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_person_id when calling getLinkedMembersUsingGET'
            );
        }

        $resourcePath = '/api/memberships/linkedStatus/{externalPersonId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($membership_type_name !== null) {
            $queryParams['membershipTypeName'] = ObjectSerializer::toQueryValue($membership_type_name);
        }

        // path params
        if ($external_person_id !== null) {
            $resourcePath = str_replace(
                '{' . 'externalPersonId' . '}',
                ObjectSerializer::toPathValue($external_person_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMainMemberUsingGET
     *
     * getMainMember
     *
     * @param  int $external_person_id externalPersonId (required)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Idealogic\MembershipAPI\Model\MembershipStatusDTO
     */
    public function getMainMemberUsingGET($external_person_id)
    {
        list($response) = $this->getMainMemberUsingGETWithHttpInfo($external_person_id);
        return $response;
    }

    /**
     * Operation getMainMemberUsingGETWithHttpInfo
     *
     * getMainMember
     *
     * @param  int $external_person_id externalPersonId (required)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Idealogic\MembershipAPI\Model\MembershipStatusDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMainMemberUsingGETWithHttpInfo($external_person_id)
    {
        $returnType = '\Idealogic\MembershipAPI\Model\MembershipStatusDTO';
        $request = $this->getMainMemberUsingGETRequest($external_person_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Idealogic\MembershipAPI\Model\MembershipStatusDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMainMemberUsingGETAsync
     *
     * getMainMember
     *
     * @param  int $external_person_id externalPersonId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMainMemberUsingGETAsync($external_person_id)
    {
        return $this->getMainMemberUsingGETAsyncWithHttpInfo($external_person_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMainMemberUsingGETAsyncWithHttpInfo
     *
     * getMainMember
     *
     * @param  int $external_person_id externalPersonId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMainMemberUsingGETAsyncWithHttpInfo($external_person_id)
    {
        $returnType = '\Idealogic\MembershipAPI\Model\MembershipStatusDTO';
        $request = $this->getMainMemberUsingGETRequest($external_person_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMainMemberUsingGET'
     *
     * @param  int $external_person_id externalPersonId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMainMemberUsingGETRequest($external_person_id)
    {
        // verify the required parameter 'external_person_id' is set
        if ($external_person_id === null || (is_array($external_person_id) && count($external_person_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_person_id when calling getMainMemberUsingGET'
            );
        }

        $resourcePath = '/api/memberships/status/{externalPersonId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($external_person_id !== null) {
            $resourcePath = str_replace(
                '{' . 'externalPersonId' . '}',
                ObjectSerializer::toPathValue($external_person_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMembershipUsingGET
     *
     * getMembership
     *
     * @param  int $id id (required)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Idealogic\MembershipAPI\Model\MembershipDTO
     */
    public function getMembershipUsingGET($id)
    {
        list($response) = $this->getMembershipUsingGETWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getMembershipUsingGETWithHttpInfo
     *
     * getMembership
     *
     * @param  int $id id (required)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Idealogic\MembershipAPI\Model\MembershipDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMembershipUsingGETWithHttpInfo($id)
    {
        $returnType = '\Idealogic\MembershipAPI\Model\MembershipDTO';
        $request = $this->getMembershipUsingGETRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Idealogic\MembershipAPI\Model\MembershipDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMembershipUsingGETAsync
     *
     * getMembership
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMembershipUsingGETAsync($id)
    {
        return $this->getMembershipUsingGETAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMembershipUsingGETAsyncWithHttpInfo
     *
     * getMembership
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMembershipUsingGETAsyncWithHttpInfo($id)
    {
        $returnType = '\Idealogic\MembershipAPI\Model\MembershipDTO';
        $request = $this->getMembershipUsingGETRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMembershipUsingGET'
     *
     * @param  int $id id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMembershipUsingGETRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getMembershipUsingGET'
            );
        }

        $resourcePath = '/api/memberships/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateMembershipUsingPUT
     *
     * updateMembership
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipDTO $membership_dto membershipDTO (required)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Idealogic\MembershipAPI\Model\MembershipDTO
     */
    public function updateMembershipUsingPUT($membership_dto)
    {
        list($response) = $this->updateMembershipUsingPUTWithHttpInfo($membership_dto);
        return $response;
    }

    /**
     * Operation updateMembershipUsingPUTWithHttpInfo
     *
     * updateMembership
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipDTO $membership_dto membershipDTO (required)
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Idealogic\MembershipAPI\Model\MembershipDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateMembershipUsingPUTWithHttpInfo($membership_dto)
    {
        $returnType = '\Idealogic\MembershipAPI\Model\MembershipDTO';
        $request = $this->updateMembershipUsingPUTRequest($membership_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Idealogic\MembershipAPI\Model\MembershipDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateMembershipUsingPUTAsync
     *
     * updateMembership
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipDTO $membership_dto membershipDTO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateMembershipUsingPUTAsync($membership_dto)
    {
        return $this->updateMembershipUsingPUTAsyncWithHttpInfo($membership_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateMembershipUsingPUTAsyncWithHttpInfo
     *
     * updateMembership
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipDTO $membership_dto membershipDTO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateMembershipUsingPUTAsyncWithHttpInfo($membership_dto)
    {
        $returnType = '\Idealogic\MembershipAPI\Model\MembershipDTO';
        $request = $this->updateMembershipUsingPUTRequest($membership_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateMembershipUsingPUT'
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipDTO $membership_dto membershipDTO (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateMembershipUsingPUTRequest($membership_dto)
    {
        // verify the required parameter 'membership_dto' is set
        if ($membership_dto === null || (is_array($membership_dto) && count($membership_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $membership_dto when calling updateMembershipUsingPUT'
            );
        }

        $resourcePath = '/api/memberships';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($membership_dto)) {
            $_tempBody = $membership_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
