<?php
/**
 * MembershipResourceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Idealogic\MembershipAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Idealogic\MembershipAPI\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Idealogic\MembershipAPI\ApiException;
use Idealogic\MembershipAPI\Configuration;
use Idealogic\MembershipAPI\HeaderSelector;
use Idealogic\MembershipAPI\ObjectSerializer;

/**
 * MembershipResourceApi Class Doc Comment
 *
 * @category Class
 * @package  Idealogic\MembershipAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MembershipResourceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addMembership' => [
            'application/json',
        ],
        'addMembershipOrder' => [
            'application/json',
        ],
        'countMemberships' => [
            'application/json',
        ],
        'createMembership' => [
            'application/json',
        ],
        'deleteMembership' => [
            'application/json',
        ],
        'enrolMemberships' => [
            'application/json',
        ],
        'getAllMemberships' => [
            'application/json',
        ],
        'getLinkedMembers' => [
            'application/json',
        ],
        'getMemberStatusByLatestPeriodForMembershipType' => [
            'application/json',
        ],
        'getMembership' => [
            'application/json',
        ],
        'getMembershipAttachment' => [
            'application/json',
        ],
        'importMembership' => [
            'application/json',
        ],
        'updateMembership' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addMembership
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipAddRequestDTO $membership_add_request_dto membership_add_request_dto (required)
     * @param  int $organisation_id organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addMembership'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Idealogic\MembershipAPI\Model\MembershipAddResponseDTO
     */
    public function addMembership($membership_add_request_dto, $organisation_id = null, string $contentType = self::contentTypes['addMembership'][0])
    {
        list($response) = $this->addMembershipWithHttpInfo($membership_add_request_dto, $organisation_id, $contentType);
        return $response;
    }

    /**
     * Operation addMembershipWithHttpInfo
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipAddRequestDTO $membership_add_request_dto (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addMembership'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Idealogic\MembershipAPI\Model\MembershipAddResponseDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function addMembershipWithHttpInfo($membership_add_request_dto, $organisation_id = null, string $contentType = self::contentTypes['addMembership'][0])
    {
        $request = $this->addMembershipRequest($membership_add_request_dto, $organisation_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Idealogic\MembershipAPI\Model\MembershipAddResponseDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Idealogic\MembershipAPI\Model\MembershipAddResponseDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Idealogic\MembershipAPI\Model\MembershipAddResponseDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Idealogic\MembershipAPI\Model\MembershipAddResponseDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Idealogic\MembershipAPI\Model\MembershipAddResponseDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addMembershipAsync
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipAddRequestDTO $membership_add_request_dto (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addMembership'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addMembershipAsync($membership_add_request_dto, $organisation_id = null, string $contentType = self::contentTypes['addMembership'][0])
    {
        return $this->addMembershipAsyncWithHttpInfo($membership_add_request_dto, $organisation_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addMembershipAsyncWithHttpInfo
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipAddRequestDTO $membership_add_request_dto (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addMembership'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addMembershipAsyncWithHttpInfo($membership_add_request_dto, $organisation_id = null, string $contentType = self::contentTypes['addMembership'][0])
    {
        $returnType = '\Idealogic\MembershipAPI\Model\MembershipAddResponseDTO';
        $request = $this->addMembershipRequest($membership_add_request_dto, $organisation_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addMembership'
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipAddRequestDTO $membership_add_request_dto (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addMembership'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addMembershipRequest($membership_add_request_dto, $organisation_id = null, string $contentType = self::contentTypes['addMembership'][0])
    {

        // verify the required parameter 'membership_add_request_dto' is set
        if ($membership_add_request_dto === null || (is_array($membership_add_request_dto) && count($membership_add_request_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $membership_add_request_dto when calling addMembership'
            );
        }



        $resourcePath = '/api/memberships/add';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $organisation_id,
            'organisationId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($membership_add_request_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($membership_add_request_dto));
            } else {
                $httpBody = $membership_add_request_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addMembershipOrder
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipOrderStatusRequestDTO $membership_order_status_request_dto membership_order_status_request_dto (required)
     * @param  int $organisation_id organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addMembershipOrder'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Idealogic\MembershipAPI\Model\MembershipOrderStatusResponseDTO
     */
    public function addMembershipOrder($membership_order_status_request_dto, $organisation_id = null, string $contentType = self::contentTypes['addMembershipOrder'][0])
    {
        list($response) = $this->addMembershipOrderWithHttpInfo($membership_order_status_request_dto, $organisation_id, $contentType);
        return $response;
    }

    /**
     * Operation addMembershipOrderWithHttpInfo
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipOrderStatusRequestDTO $membership_order_status_request_dto (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addMembershipOrder'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Idealogic\MembershipAPI\Model\MembershipOrderStatusResponseDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function addMembershipOrderWithHttpInfo($membership_order_status_request_dto, $organisation_id = null, string $contentType = self::contentTypes['addMembershipOrder'][0])
    {
        $request = $this->addMembershipOrderRequest($membership_order_status_request_dto, $organisation_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Idealogic\MembershipAPI\Model\MembershipOrderStatusResponseDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Idealogic\MembershipAPI\Model\MembershipOrderStatusResponseDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Idealogic\MembershipAPI\Model\MembershipOrderStatusResponseDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Idealogic\MembershipAPI\Model\MembershipOrderStatusResponseDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Idealogic\MembershipAPI\Model\MembershipOrderStatusResponseDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addMembershipOrderAsync
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipOrderStatusRequestDTO $membership_order_status_request_dto (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addMembershipOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addMembershipOrderAsync($membership_order_status_request_dto, $organisation_id = null, string $contentType = self::contentTypes['addMembershipOrder'][0])
    {
        return $this->addMembershipOrderAsyncWithHttpInfo($membership_order_status_request_dto, $organisation_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addMembershipOrderAsyncWithHttpInfo
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipOrderStatusRequestDTO $membership_order_status_request_dto (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addMembershipOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addMembershipOrderAsyncWithHttpInfo($membership_order_status_request_dto, $organisation_id = null, string $contentType = self::contentTypes['addMembershipOrder'][0])
    {
        $returnType = '\Idealogic\MembershipAPI\Model\MembershipOrderStatusResponseDTO';
        $request = $this->addMembershipOrderRequest($membership_order_status_request_dto, $organisation_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addMembershipOrder'
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipOrderStatusRequestDTO $membership_order_status_request_dto (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addMembershipOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addMembershipOrderRequest($membership_order_status_request_dto, $organisation_id = null, string $contentType = self::contentTypes['addMembershipOrder'][0])
    {

        // verify the required parameter 'membership_order_status_request_dto' is set
        if ($membership_order_status_request_dto === null || (is_array($membership_order_status_request_dto) && count($membership_order_status_request_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $membership_order_status_request_dto when calling addMembershipOrder'
            );
        }



        $resourcePath = '/api/memberships/order';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $organisation_id,
            'organisationId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($membership_order_status_request_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($membership_order_status_request_dto));
            } else {
                $httpBody = $membership_order_status_request_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation countMemberships
     *
     * @param  int $id_greater_than id_greater_than (optional)
     * @param  int $id_less_than id_less_than (optional)
     * @param  int $id_greater_than_or_equal id_greater_than_or_equal (optional)
     * @param  int $id_less_than_or_equal id_less_than_or_equal (optional)
     * @param  int $id_equals id_equals (optional)
     * @param  int $id_not_equals id_not_equals (optional)
     * @param  bool $id_specified id_specified (optional)
     * @param  int[] $id_in id_in (optional)
     * @param  int[] $id_not_in id_not_in (optional)
     * @param  string $first_name_contains first_name_contains (optional)
     * @param  string $first_name_does_not_contain first_name_does_not_contain (optional)
     * @param  string $first_name_equals first_name_equals (optional)
     * @param  string $first_name_not_equals first_name_not_equals (optional)
     * @param  bool $first_name_specified first_name_specified (optional)
     * @param  string[] $first_name_in first_name_in (optional)
     * @param  string[] $first_name_not_in first_name_not_in (optional)
     * @param  string $last_name_contains last_name_contains (optional)
     * @param  string $last_name_does_not_contain last_name_does_not_contain (optional)
     * @param  string $last_name_equals last_name_equals (optional)
     * @param  string $last_name_not_equals last_name_not_equals (optional)
     * @param  bool $last_name_specified last_name_specified (optional)
     * @param  string[] $last_name_in last_name_in (optional)
     * @param  string[] $last_name_not_in last_name_not_in (optional)
     * @param  string $id_number_contains id_number_contains (optional)
     * @param  string $id_number_does_not_contain id_number_does_not_contain (optional)
     * @param  string $id_number_equals id_number_equals (optional)
     * @param  string $id_number_not_equals id_number_not_equals (optional)
     * @param  bool $id_number_specified id_number_specified (optional)
     * @param  string[] $id_number_in id_number_in (optional)
     * @param  string[] $id_number_not_in id_number_not_in (optional)
     * @param  string $other_number_contains other_number_contains (optional)
     * @param  string $other_number_does_not_contain other_number_does_not_contain (optional)
     * @param  string $other_number_equals other_number_equals (optional)
     * @param  string $other_number_not_equals other_number_not_equals (optional)
     * @param  bool $other_number_specified other_number_specified (optional)
     * @param  string[] $other_number_in other_number_in (optional)
     * @param  string[] $other_number_not_in other_number_not_in (optional)
     * @param  \DateTime $dob_greater_than dob_greater_than (optional)
     * @param  \DateTime $dob_less_than dob_less_than (optional)
     * @param  \DateTime $dob_greater_than_or_equal dob_greater_than_or_equal (optional)
     * @param  \DateTime $dob_less_than_or_equal dob_less_than_or_equal (optional)
     * @param  \DateTime $dob_equals dob_equals (optional)
     * @param  \DateTime $dob_not_equals dob_not_equals (optional)
     * @param  bool $dob_specified dob_specified (optional)
     * @param  \DateTime[] $dob_in dob_in (optional)
     * @param  \DateTime[] $dob_not_in dob_not_in (optional)
     * @param  string $status_equals status_equals (optional)
     * @param  string $status_not_equals status_not_equals (optional)
     * @param  bool $status_specified status_specified (optional)
     * @param  string[] $status_in status_in (optional)
     * @param  string[] $status_not_in status_not_in (optional)
     * @param  \DateTime $valid_from_greater_than valid_from_greater_than (optional)
     * @param  \DateTime $valid_from_less_than valid_from_less_than (optional)
     * @param  \DateTime $valid_from_greater_than_or_equal valid_from_greater_than_or_equal (optional)
     * @param  \DateTime $valid_from_less_than_or_equal valid_from_less_than_or_equal (optional)
     * @param  \DateTime $valid_from_equals valid_from_equals (optional)
     * @param  \DateTime $valid_from_not_equals valid_from_not_equals (optional)
     * @param  bool $valid_from_specified valid_from_specified (optional)
     * @param  \DateTime[] $valid_from_in valid_from_in (optional)
     * @param  \DateTime[] $valid_from_not_in valid_from_not_in (optional)
     * @param  \DateTime $valid_to_greater_than valid_to_greater_than (optional)
     * @param  \DateTime $valid_to_less_than valid_to_less_than (optional)
     * @param  \DateTime $valid_to_greater_than_or_equal valid_to_greater_than_or_equal (optional)
     * @param  \DateTime $valid_to_less_than_or_equal valid_to_less_than_or_equal (optional)
     * @param  \DateTime $valid_to_equals valid_to_equals (optional)
     * @param  \DateTime $valid_to_not_equals valid_to_not_equals (optional)
     * @param  bool $valid_to_specified valid_to_specified (optional)
     * @param  \DateTime[] $valid_to_in valid_to_in (optional)
     * @param  \DateTime[] $valid_to_not_in valid_to_not_in (optional)
     * @param  int $person_id_greater_than person_id_greater_than (optional)
     * @param  int $person_id_less_than person_id_less_than (optional)
     * @param  int $person_id_greater_than_or_equal person_id_greater_than_or_equal (optional)
     * @param  int $person_id_less_than_or_equal person_id_less_than_or_equal (optional)
     * @param  int $person_id_equals person_id_equals (optional)
     * @param  int $person_id_not_equals person_id_not_equals (optional)
     * @param  bool $person_id_specified person_id_specified (optional)
     * @param  int[] $person_id_in person_id_in (optional)
     * @param  int[] $person_id_not_in person_id_not_in (optional)
     * @param  int $membership_type_id_greater_than membership_type_id_greater_than (optional)
     * @param  int $membership_type_id_less_than membership_type_id_less_than (optional)
     * @param  int $membership_type_id_greater_than_or_equal membership_type_id_greater_than_or_equal (optional)
     * @param  int $membership_type_id_less_than_or_equal membership_type_id_less_than_or_equal (optional)
     * @param  int $membership_type_id_equals membership_type_id_equals (optional)
     * @param  int $membership_type_id_not_equals membership_type_id_not_equals (optional)
     * @param  bool $membership_type_id_specified membership_type_id_specified (optional)
     * @param  int[] $membership_type_id_in membership_type_id_in (optional)
     * @param  int[] $membership_type_id_not_in membership_type_id_not_in (optional)
     * @param  int $membership_period_id_greater_than membership_period_id_greater_than (optional)
     * @param  int $membership_period_id_less_than membership_period_id_less_than (optional)
     * @param  int $membership_period_id_greater_than_or_equal membership_period_id_greater_than_or_equal (optional)
     * @param  int $membership_period_id_less_than_or_equal membership_period_id_less_than_or_equal (optional)
     * @param  int $membership_period_id_equals membership_period_id_equals (optional)
     * @param  int $membership_period_id_not_equals membership_period_id_not_equals (optional)
     * @param  bool $membership_period_id_specified membership_period_id_specified (optional)
     * @param  int[] $membership_period_id_in membership_period_id_in (optional)
     * @param  int[] $membership_period_id_not_in membership_period_id_not_in (optional)
     * @param  int $criteria_id_greater_than criteria_id_greater_than (optional)
     * @param  int $criteria_id_less_than criteria_id_less_than (optional)
     * @param  int $criteria_id_greater_than_or_equal criteria_id_greater_than_or_equal (optional)
     * @param  int $criteria_id_less_than_or_equal criteria_id_less_than_or_equal (optional)
     * @param  int $criteria_id_equals criteria_id_equals (optional)
     * @param  int $criteria_id_not_equals criteria_id_not_equals (optional)
     * @param  bool $criteria_id_specified criteria_id_specified (optional)
     * @param  int[] $criteria_id_in criteria_id_in (optional)
     * @param  int[] $criteria_id_not_in criteria_id_not_in (optional)
     * @param  int $order_id_greater_than order_id_greater_than (optional)
     * @param  int $order_id_less_than order_id_less_than (optional)
     * @param  int $order_id_greater_than_or_equal order_id_greater_than_or_equal (optional)
     * @param  int $order_id_less_than_or_equal order_id_less_than_or_equal (optional)
     * @param  int $order_id_equals order_id_equals (optional)
     * @param  int $order_id_not_equals order_id_not_equals (optional)
     * @param  bool $order_id_specified order_id_specified (optional)
     * @param  int[] $order_id_in order_id_in (optional)
     * @param  int[] $order_id_not_in order_id_not_in (optional)
     * @param  int $number_id_greater_than number_id_greater_than (optional)
     * @param  int $number_id_less_than number_id_less_than (optional)
     * @param  int $number_id_greater_than_or_equal number_id_greater_than_or_equal (optional)
     * @param  int $number_id_less_than_or_equal number_id_less_than_or_equal (optional)
     * @param  int $number_id_equals number_id_equals (optional)
     * @param  int $number_id_not_equals number_id_not_equals (optional)
     * @param  bool $number_id_specified number_id_specified (optional)
     * @param  int[] $number_id_in number_id_in (optional)
     * @param  int[] $number_id_not_in number_id_not_in (optional)
     * @param  bool $distinct distinct (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['countMemberships'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return int
     */
    public function countMemberships($id_greater_than = null, $id_less_than = null, $id_greater_than_or_equal = null, $id_less_than_or_equal = null, $id_equals = null, $id_not_equals = null, $id_specified = null, $id_in = null, $id_not_in = null, $first_name_contains = null, $first_name_does_not_contain = null, $first_name_equals = null, $first_name_not_equals = null, $first_name_specified = null, $first_name_in = null, $first_name_not_in = null, $last_name_contains = null, $last_name_does_not_contain = null, $last_name_equals = null, $last_name_not_equals = null, $last_name_specified = null, $last_name_in = null, $last_name_not_in = null, $id_number_contains = null, $id_number_does_not_contain = null, $id_number_equals = null, $id_number_not_equals = null, $id_number_specified = null, $id_number_in = null, $id_number_not_in = null, $other_number_contains = null, $other_number_does_not_contain = null, $other_number_equals = null, $other_number_not_equals = null, $other_number_specified = null, $other_number_in = null, $other_number_not_in = null, $dob_greater_than = null, $dob_less_than = null, $dob_greater_than_or_equal = null, $dob_less_than_or_equal = null, $dob_equals = null, $dob_not_equals = null, $dob_specified = null, $dob_in = null, $dob_not_in = null, $status_equals = null, $status_not_equals = null, $status_specified = null, $status_in = null, $status_not_in = null, $valid_from_greater_than = null, $valid_from_less_than = null, $valid_from_greater_than_or_equal = null, $valid_from_less_than_or_equal = null, $valid_from_equals = null, $valid_from_not_equals = null, $valid_from_specified = null, $valid_from_in = null, $valid_from_not_in = null, $valid_to_greater_than = null, $valid_to_less_than = null, $valid_to_greater_than_or_equal = null, $valid_to_less_than_or_equal = null, $valid_to_equals = null, $valid_to_not_equals = null, $valid_to_specified = null, $valid_to_in = null, $valid_to_not_in = null, $person_id_greater_than = null, $person_id_less_than = null, $person_id_greater_than_or_equal = null, $person_id_less_than_or_equal = null, $person_id_equals = null, $person_id_not_equals = null, $person_id_specified = null, $person_id_in = null, $person_id_not_in = null, $membership_type_id_greater_than = null, $membership_type_id_less_than = null, $membership_type_id_greater_than_or_equal = null, $membership_type_id_less_than_or_equal = null, $membership_type_id_equals = null, $membership_type_id_not_equals = null, $membership_type_id_specified = null, $membership_type_id_in = null, $membership_type_id_not_in = null, $membership_period_id_greater_than = null, $membership_period_id_less_than = null, $membership_period_id_greater_than_or_equal = null, $membership_period_id_less_than_or_equal = null, $membership_period_id_equals = null, $membership_period_id_not_equals = null, $membership_period_id_specified = null, $membership_period_id_in = null, $membership_period_id_not_in = null, $criteria_id_greater_than = null, $criteria_id_less_than = null, $criteria_id_greater_than_or_equal = null, $criteria_id_less_than_or_equal = null, $criteria_id_equals = null, $criteria_id_not_equals = null, $criteria_id_specified = null, $criteria_id_in = null, $criteria_id_not_in = null, $order_id_greater_than = null, $order_id_less_than = null, $order_id_greater_than_or_equal = null, $order_id_less_than_or_equal = null, $order_id_equals = null, $order_id_not_equals = null, $order_id_specified = null, $order_id_in = null, $order_id_not_in = null, $number_id_greater_than = null, $number_id_less_than = null, $number_id_greater_than_or_equal = null, $number_id_less_than_or_equal = null, $number_id_equals = null, $number_id_not_equals = null, $number_id_specified = null, $number_id_in = null, $number_id_not_in = null, $distinct = null, string $contentType = self::contentTypes['countMemberships'][0])
    {
        list($response) = $this->countMembershipsWithHttpInfo($id_greater_than, $id_less_than, $id_greater_than_or_equal, $id_less_than_or_equal, $id_equals, $id_not_equals, $id_specified, $id_in, $id_not_in, $first_name_contains, $first_name_does_not_contain, $first_name_equals, $first_name_not_equals, $first_name_specified, $first_name_in, $first_name_not_in, $last_name_contains, $last_name_does_not_contain, $last_name_equals, $last_name_not_equals, $last_name_specified, $last_name_in, $last_name_not_in, $id_number_contains, $id_number_does_not_contain, $id_number_equals, $id_number_not_equals, $id_number_specified, $id_number_in, $id_number_not_in, $other_number_contains, $other_number_does_not_contain, $other_number_equals, $other_number_not_equals, $other_number_specified, $other_number_in, $other_number_not_in, $dob_greater_than, $dob_less_than, $dob_greater_than_or_equal, $dob_less_than_or_equal, $dob_equals, $dob_not_equals, $dob_specified, $dob_in, $dob_not_in, $status_equals, $status_not_equals, $status_specified, $status_in, $status_not_in, $valid_from_greater_than, $valid_from_less_than, $valid_from_greater_than_or_equal, $valid_from_less_than_or_equal, $valid_from_equals, $valid_from_not_equals, $valid_from_specified, $valid_from_in, $valid_from_not_in, $valid_to_greater_than, $valid_to_less_than, $valid_to_greater_than_or_equal, $valid_to_less_than_or_equal, $valid_to_equals, $valid_to_not_equals, $valid_to_specified, $valid_to_in, $valid_to_not_in, $person_id_greater_than, $person_id_less_than, $person_id_greater_than_or_equal, $person_id_less_than_or_equal, $person_id_equals, $person_id_not_equals, $person_id_specified, $person_id_in, $person_id_not_in, $membership_type_id_greater_than, $membership_type_id_less_than, $membership_type_id_greater_than_or_equal, $membership_type_id_less_than_or_equal, $membership_type_id_equals, $membership_type_id_not_equals, $membership_type_id_specified, $membership_type_id_in, $membership_type_id_not_in, $membership_period_id_greater_than, $membership_period_id_less_than, $membership_period_id_greater_than_or_equal, $membership_period_id_less_than_or_equal, $membership_period_id_equals, $membership_period_id_not_equals, $membership_period_id_specified, $membership_period_id_in, $membership_period_id_not_in, $criteria_id_greater_than, $criteria_id_less_than, $criteria_id_greater_than_or_equal, $criteria_id_less_than_or_equal, $criteria_id_equals, $criteria_id_not_equals, $criteria_id_specified, $criteria_id_in, $criteria_id_not_in, $order_id_greater_than, $order_id_less_than, $order_id_greater_than_or_equal, $order_id_less_than_or_equal, $order_id_equals, $order_id_not_equals, $order_id_specified, $order_id_in, $order_id_not_in, $number_id_greater_than, $number_id_less_than, $number_id_greater_than_or_equal, $number_id_less_than_or_equal, $number_id_equals, $number_id_not_equals, $number_id_specified, $number_id_in, $number_id_not_in, $distinct, $contentType);
        return $response;
    }

    /**
     * Operation countMembershipsWithHttpInfo
     *
     * @param  int $id_greater_than (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_equals (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int[] $id_in (optional)
     * @param  int[] $id_not_in (optional)
     * @param  string $first_name_contains (optional)
     * @param  string $first_name_does_not_contain (optional)
     * @param  string $first_name_equals (optional)
     * @param  string $first_name_not_equals (optional)
     * @param  bool $first_name_specified (optional)
     * @param  string[] $first_name_in (optional)
     * @param  string[] $first_name_not_in (optional)
     * @param  string $last_name_contains (optional)
     * @param  string $last_name_does_not_contain (optional)
     * @param  string $last_name_equals (optional)
     * @param  string $last_name_not_equals (optional)
     * @param  bool $last_name_specified (optional)
     * @param  string[] $last_name_in (optional)
     * @param  string[] $last_name_not_in (optional)
     * @param  string $id_number_contains (optional)
     * @param  string $id_number_does_not_contain (optional)
     * @param  string $id_number_equals (optional)
     * @param  string $id_number_not_equals (optional)
     * @param  bool $id_number_specified (optional)
     * @param  string[] $id_number_in (optional)
     * @param  string[] $id_number_not_in (optional)
     * @param  string $other_number_contains (optional)
     * @param  string $other_number_does_not_contain (optional)
     * @param  string $other_number_equals (optional)
     * @param  string $other_number_not_equals (optional)
     * @param  bool $other_number_specified (optional)
     * @param  string[] $other_number_in (optional)
     * @param  string[] $other_number_not_in (optional)
     * @param  \DateTime $dob_greater_than (optional)
     * @param  \DateTime $dob_less_than (optional)
     * @param  \DateTime $dob_greater_than_or_equal (optional)
     * @param  \DateTime $dob_less_than_or_equal (optional)
     * @param  \DateTime $dob_equals (optional)
     * @param  \DateTime $dob_not_equals (optional)
     * @param  bool $dob_specified (optional)
     * @param  \DateTime[] $dob_in (optional)
     * @param  \DateTime[] $dob_not_in (optional)
     * @param  string $status_equals (optional)
     * @param  string $status_not_equals (optional)
     * @param  bool $status_specified (optional)
     * @param  string[] $status_in (optional)
     * @param  string[] $status_not_in (optional)
     * @param  \DateTime $valid_from_greater_than (optional)
     * @param  \DateTime $valid_from_less_than (optional)
     * @param  \DateTime $valid_from_greater_than_or_equal (optional)
     * @param  \DateTime $valid_from_less_than_or_equal (optional)
     * @param  \DateTime $valid_from_equals (optional)
     * @param  \DateTime $valid_from_not_equals (optional)
     * @param  bool $valid_from_specified (optional)
     * @param  \DateTime[] $valid_from_in (optional)
     * @param  \DateTime[] $valid_from_not_in (optional)
     * @param  \DateTime $valid_to_greater_than (optional)
     * @param  \DateTime $valid_to_less_than (optional)
     * @param  \DateTime $valid_to_greater_than_or_equal (optional)
     * @param  \DateTime $valid_to_less_than_or_equal (optional)
     * @param  \DateTime $valid_to_equals (optional)
     * @param  \DateTime $valid_to_not_equals (optional)
     * @param  bool $valid_to_specified (optional)
     * @param  \DateTime[] $valid_to_in (optional)
     * @param  \DateTime[] $valid_to_not_in (optional)
     * @param  int $person_id_greater_than (optional)
     * @param  int $person_id_less_than (optional)
     * @param  int $person_id_greater_than_or_equal (optional)
     * @param  int $person_id_less_than_or_equal (optional)
     * @param  int $person_id_equals (optional)
     * @param  int $person_id_not_equals (optional)
     * @param  bool $person_id_specified (optional)
     * @param  int[] $person_id_in (optional)
     * @param  int[] $person_id_not_in (optional)
     * @param  int $membership_type_id_greater_than (optional)
     * @param  int $membership_type_id_less_than (optional)
     * @param  int $membership_type_id_greater_than_or_equal (optional)
     * @param  int $membership_type_id_less_than_or_equal (optional)
     * @param  int $membership_type_id_equals (optional)
     * @param  int $membership_type_id_not_equals (optional)
     * @param  bool $membership_type_id_specified (optional)
     * @param  int[] $membership_type_id_in (optional)
     * @param  int[] $membership_type_id_not_in (optional)
     * @param  int $membership_period_id_greater_than (optional)
     * @param  int $membership_period_id_less_than (optional)
     * @param  int $membership_period_id_greater_than_or_equal (optional)
     * @param  int $membership_period_id_less_than_or_equal (optional)
     * @param  int $membership_period_id_equals (optional)
     * @param  int $membership_period_id_not_equals (optional)
     * @param  bool $membership_period_id_specified (optional)
     * @param  int[] $membership_period_id_in (optional)
     * @param  int[] $membership_period_id_not_in (optional)
     * @param  int $criteria_id_greater_than (optional)
     * @param  int $criteria_id_less_than (optional)
     * @param  int $criteria_id_greater_than_or_equal (optional)
     * @param  int $criteria_id_less_than_or_equal (optional)
     * @param  int $criteria_id_equals (optional)
     * @param  int $criteria_id_not_equals (optional)
     * @param  bool $criteria_id_specified (optional)
     * @param  int[] $criteria_id_in (optional)
     * @param  int[] $criteria_id_not_in (optional)
     * @param  int $order_id_greater_than (optional)
     * @param  int $order_id_less_than (optional)
     * @param  int $order_id_greater_than_or_equal (optional)
     * @param  int $order_id_less_than_or_equal (optional)
     * @param  int $order_id_equals (optional)
     * @param  int $order_id_not_equals (optional)
     * @param  bool $order_id_specified (optional)
     * @param  int[] $order_id_in (optional)
     * @param  int[] $order_id_not_in (optional)
     * @param  int $number_id_greater_than (optional)
     * @param  int $number_id_less_than (optional)
     * @param  int $number_id_greater_than_or_equal (optional)
     * @param  int $number_id_less_than_or_equal (optional)
     * @param  int $number_id_equals (optional)
     * @param  int $number_id_not_equals (optional)
     * @param  bool $number_id_specified (optional)
     * @param  int[] $number_id_in (optional)
     * @param  int[] $number_id_not_in (optional)
     * @param  bool $distinct (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['countMemberships'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function countMembershipsWithHttpInfo($id_greater_than = null, $id_less_than = null, $id_greater_than_or_equal = null, $id_less_than_or_equal = null, $id_equals = null, $id_not_equals = null, $id_specified = null, $id_in = null, $id_not_in = null, $first_name_contains = null, $first_name_does_not_contain = null, $first_name_equals = null, $first_name_not_equals = null, $first_name_specified = null, $first_name_in = null, $first_name_not_in = null, $last_name_contains = null, $last_name_does_not_contain = null, $last_name_equals = null, $last_name_not_equals = null, $last_name_specified = null, $last_name_in = null, $last_name_not_in = null, $id_number_contains = null, $id_number_does_not_contain = null, $id_number_equals = null, $id_number_not_equals = null, $id_number_specified = null, $id_number_in = null, $id_number_not_in = null, $other_number_contains = null, $other_number_does_not_contain = null, $other_number_equals = null, $other_number_not_equals = null, $other_number_specified = null, $other_number_in = null, $other_number_not_in = null, $dob_greater_than = null, $dob_less_than = null, $dob_greater_than_or_equal = null, $dob_less_than_or_equal = null, $dob_equals = null, $dob_not_equals = null, $dob_specified = null, $dob_in = null, $dob_not_in = null, $status_equals = null, $status_not_equals = null, $status_specified = null, $status_in = null, $status_not_in = null, $valid_from_greater_than = null, $valid_from_less_than = null, $valid_from_greater_than_or_equal = null, $valid_from_less_than_or_equal = null, $valid_from_equals = null, $valid_from_not_equals = null, $valid_from_specified = null, $valid_from_in = null, $valid_from_not_in = null, $valid_to_greater_than = null, $valid_to_less_than = null, $valid_to_greater_than_or_equal = null, $valid_to_less_than_or_equal = null, $valid_to_equals = null, $valid_to_not_equals = null, $valid_to_specified = null, $valid_to_in = null, $valid_to_not_in = null, $person_id_greater_than = null, $person_id_less_than = null, $person_id_greater_than_or_equal = null, $person_id_less_than_or_equal = null, $person_id_equals = null, $person_id_not_equals = null, $person_id_specified = null, $person_id_in = null, $person_id_not_in = null, $membership_type_id_greater_than = null, $membership_type_id_less_than = null, $membership_type_id_greater_than_or_equal = null, $membership_type_id_less_than_or_equal = null, $membership_type_id_equals = null, $membership_type_id_not_equals = null, $membership_type_id_specified = null, $membership_type_id_in = null, $membership_type_id_not_in = null, $membership_period_id_greater_than = null, $membership_period_id_less_than = null, $membership_period_id_greater_than_or_equal = null, $membership_period_id_less_than_or_equal = null, $membership_period_id_equals = null, $membership_period_id_not_equals = null, $membership_period_id_specified = null, $membership_period_id_in = null, $membership_period_id_not_in = null, $criteria_id_greater_than = null, $criteria_id_less_than = null, $criteria_id_greater_than_or_equal = null, $criteria_id_less_than_or_equal = null, $criteria_id_equals = null, $criteria_id_not_equals = null, $criteria_id_specified = null, $criteria_id_in = null, $criteria_id_not_in = null, $order_id_greater_than = null, $order_id_less_than = null, $order_id_greater_than_or_equal = null, $order_id_less_than_or_equal = null, $order_id_equals = null, $order_id_not_equals = null, $order_id_specified = null, $order_id_in = null, $order_id_not_in = null, $number_id_greater_than = null, $number_id_less_than = null, $number_id_greater_than_or_equal = null, $number_id_less_than_or_equal = null, $number_id_equals = null, $number_id_not_equals = null, $number_id_specified = null, $number_id_in = null, $number_id_not_in = null, $distinct = null, string $contentType = self::contentTypes['countMemberships'][0])
    {
        $request = $this->countMembershipsRequest($id_greater_than, $id_less_than, $id_greater_than_or_equal, $id_less_than_or_equal, $id_equals, $id_not_equals, $id_specified, $id_in, $id_not_in, $first_name_contains, $first_name_does_not_contain, $first_name_equals, $first_name_not_equals, $first_name_specified, $first_name_in, $first_name_not_in, $last_name_contains, $last_name_does_not_contain, $last_name_equals, $last_name_not_equals, $last_name_specified, $last_name_in, $last_name_not_in, $id_number_contains, $id_number_does_not_contain, $id_number_equals, $id_number_not_equals, $id_number_specified, $id_number_in, $id_number_not_in, $other_number_contains, $other_number_does_not_contain, $other_number_equals, $other_number_not_equals, $other_number_specified, $other_number_in, $other_number_not_in, $dob_greater_than, $dob_less_than, $dob_greater_than_or_equal, $dob_less_than_or_equal, $dob_equals, $dob_not_equals, $dob_specified, $dob_in, $dob_not_in, $status_equals, $status_not_equals, $status_specified, $status_in, $status_not_in, $valid_from_greater_than, $valid_from_less_than, $valid_from_greater_than_or_equal, $valid_from_less_than_or_equal, $valid_from_equals, $valid_from_not_equals, $valid_from_specified, $valid_from_in, $valid_from_not_in, $valid_to_greater_than, $valid_to_less_than, $valid_to_greater_than_or_equal, $valid_to_less_than_or_equal, $valid_to_equals, $valid_to_not_equals, $valid_to_specified, $valid_to_in, $valid_to_not_in, $person_id_greater_than, $person_id_less_than, $person_id_greater_than_or_equal, $person_id_less_than_or_equal, $person_id_equals, $person_id_not_equals, $person_id_specified, $person_id_in, $person_id_not_in, $membership_type_id_greater_than, $membership_type_id_less_than, $membership_type_id_greater_than_or_equal, $membership_type_id_less_than_or_equal, $membership_type_id_equals, $membership_type_id_not_equals, $membership_type_id_specified, $membership_type_id_in, $membership_type_id_not_in, $membership_period_id_greater_than, $membership_period_id_less_than, $membership_period_id_greater_than_or_equal, $membership_period_id_less_than_or_equal, $membership_period_id_equals, $membership_period_id_not_equals, $membership_period_id_specified, $membership_period_id_in, $membership_period_id_not_in, $criteria_id_greater_than, $criteria_id_less_than, $criteria_id_greater_than_or_equal, $criteria_id_less_than_or_equal, $criteria_id_equals, $criteria_id_not_equals, $criteria_id_specified, $criteria_id_in, $criteria_id_not_in, $order_id_greater_than, $order_id_less_than, $order_id_greater_than_or_equal, $order_id_less_than_or_equal, $order_id_equals, $order_id_not_equals, $order_id_specified, $order_id_in, $order_id_not_in, $number_id_greater_than, $number_id_less_than, $number_id_greater_than_or_equal, $number_id_less_than_or_equal, $number_id_equals, $number_id_not_equals, $number_id_specified, $number_id_in, $number_id_not_in, $distinct, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('int' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('int' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'int', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'int';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation countMembershipsAsync
     *
     * @param  int $id_greater_than (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_equals (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int[] $id_in (optional)
     * @param  int[] $id_not_in (optional)
     * @param  string $first_name_contains (optional)
     * @param  string $first_name_does_not_contain (optional)
     * @param  string $first_name_equals (optional)
     * @param  string $first_name_not_equals (optional)
     * @param  bool $first_name_specified (optional)
     * @param  string[] $first_name_in (optional)
     * @param  string[] $first_name_not_in (optional)
     * @param  string $last_name_contains (optional)
     * @param  string $last_name_does_not_contain (optional)
     * @param  string $last_name_equals (optional)
     * @param  string $last_name_not_equals (optional)
     * @param  bool $last_name_specified (optional)
     * @param  string[] $last_name_in (optional)
     * @param  string[] $last_name_not_in (optional)
     * @param  string $id_number_contains (optional)
     * @param  string $id_number_does_not_contain (optional)
     * @param  string $id_number_equals (optional)
     * @param  string $id_number_not_equals (optional)
     * @param  bool $id_number_specified (optional)
     * @param  string[] $id_number_in (optional)
     * @param  string[] $id_number_not_in (optional)
     * @param  string $other_number_contains (optional)
     * @param  string $other_number_does_not_contain (optional)
     * @param  string $other_number_equals (optional)
     * @param  string $other_number_not_equals (optional)
     * @param  bool $other_number_specified (optional)
     * @param  string[] $other_number_in (optional)
     * @param  string[] $other_number_not_in (optional)
     * @param  \DateTime $dob_greater_than (optional)
     * @param  \DateTime $dob_less_than (optional)
     * @param  \DateTime $dob_greater_than_or_equal (optional)
     * @param  \DateTime $dob_less_than_or_equal (optional)
     * @param  \DateTime $dob_equals (optional)
     * @param  \DateTime $dob_not_equals (optional)
     * @param  bool $dob_specified (optional)
     * @param  \DateTime[] $dob_in (optional)
     * @param  \DateTime[] $dob_not_in (optional)
     * @param  string $status_equals (optional)
     * @param  string $status_not_equals (optional)
     * @param  bool $status_specified (optional)
     * @param  string[] $status_in (optional)
     * @param  string[] $status_not_in (optional)
     * @param  \DateTime $valid_from_greater_than (optional)
     * @param  \DateTime $valid_from_less_than (optional)
     * @param  \DateTime $valid_from_greater_than_or_equal (optional)
     * @param  \DateTime $valid_from_less_than_or_equal (optional)
     * @param  \DateTime $valid_from_equals (optional)
     * @param  \DateTime $valid_from_not_equals (optional)
     * @param  bool $valid_from_specified (optional)
     * @param  \DateTime[] $valid_from_in (optional)
     * @param  \DateTime[] $valid_from_not_in (optional)
     * @param  \DateTime $valid_to_greater_than (optional)
     * @param  \DateTime $valid_to_less_than (optional)
     * @param  \DateTime $valid_to_greater_than_or_equal (optional)
     * @param  \DateTime $valid_to_less_than_or_equal (optional)
     * @param  \DateTime $valid_to_equals (optional)
     * @param  \DateTime $valid_to_not_equals (optional)
     * @param  bool $valid_to_specified (optional)
     * @param  \DateTime[] $valid_to_in (optional)
     * @param  \DateTime[] $valid_to_not_in (optional)
     * @param  int $person_id_greater_than (optional)
     * @param  int $person_id_less_than (optional)
     * @param  int $person_id_greater_than_or_equal (optional)
     * @param  int $person_id_less_than_or_equal (optional)
     * @param  int $person_id_equals (optional)
     * @param  int $person_id_not_equals (optional)
     * @param  bool $person_id_specified (optional)
     * @param  int[] $person_id_in (optional)
     * @param  int[] $person_id_not_in (optional)
     * @param  int $membership_type_id_greater_than (optional)
     * @param  int $membership_type_id_less_than (optional)
     * @param  int $membership_type_id_greater_than_or_equal (optional)
     * @param  int $membership_type_id_less_than_or_equal (optional)
     * @param  int $membership_type_id_equals (optional)
     * @param  int $membership_type_id_not_equals (optional)
     * @param  bool $membership_type_id_specified (optional)
     * @param  int[] $membership_type_id_in (optional)
     * @param  int[] $membership_type_id_not_in (optional)
     * @param  int $membership_period_id_greater_than (optional)
     * @param  int $membership_period_id_less_than (optional)
     * @param  int $membership_period_id_greater_than_or_equal (optional)
     * @param  int $membership_period_id_less_than_or_equal (optional)
     * @param  int $membership_period_id_equals (optional)
     * @param  int $membership_period_id_not_equals (optional)
     * @param  bool $membership_period_id_specified (optional)
     * @param  int[] $membership_period_id_in (optional)
     * @param  int[] $membership_period_id_not_in (optional)
     * @param  int $criteria_id_greater_than (optional)
     * @param  int $criteria_id_less_than (optional)
     * @param  int $criteria_id_greater_than_or_equal (optional)
     * @param  int $criteria_id_less_than_or_equal (optional)
     * @param  int $criteria_id_equals (optional)
     * @param  int $criteria_id_not_equals (optional)
     * @param  bool $criteria_id_specified (optional)
     * @param  int[] $criteria_id_in (optional)
     * @param  int[] $criteria_id_not_in (optional)
     * @param  int $order_id_greater_than (optional)
     * @param  int $order_id_less_than (optional)
     * @param  int $order_id_greater_than_or_equal (optional)
     * @param  int $order_id_less_than_or_equal (optional)
     * @param  int $order_id_equals (optional)
     * @param  int $order_id_not_equals (optional)
     * @param  bool $order_id_specified (optional)
     * @param  int[] $order_id_in (optional)
     * @param  int[] $order_id_not_in (optional)
     * @param  int $number_id_greater_than (optional)
     * @param  int $number_id_less_than (optional)
     * @param  int $number_id_greater_than_or_equal (optional)
     * @param  int $number_id_less_than_or_equal (optional)
     * @param  int $number_id_equals (optional)
     * @param  int $number_id_not_equals (optional)
     * @param  bool $number_id_specified (optional)
     * @param  int[] $number_id_in (optional)
     * @param  int[] $number_id_not_in (optional)
     * @param  bool $distinct (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['countMemberships'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function countMembershipsAsync($id_greater_than = null, $id_less_than = null, $id_greater_than_or_equal = null, $id_less_than_or_equal = null, $id_equals = null, $id_not_equals = null, $id_specified = null, $id_in = null, $id_not_in = null, $first_name_contains = null, $first_name_does_not_contain = null, $first_name_equals = null, $first_name_not_equals = null, $first_name_specified = null, $first_name_in = null, $first_name_not_in = null, $last_name_contains = null, $last_name_does_not_contain = null, $last_name_equals = null, $last_name_not_equals = null, $last_name_specified = null, $last_name_in = null, $last_name_not_in = null, $id_number_contains = null, $id_number_does_not_contain = null, $id_number_equals = null, $id_number_not_equals = null, $id_number_specified = null, $id_number_in = null, $id_number_not_in = null, $other_number_contains = null, $other_number_does_not_contain = null, $other_number_equals = null, $other_number_not_equals = null, $other_number_specified = null, $other_number_in = null, $other_number_not_in = null, $dob_greater_than = null, $dob_less_than = null, $dob_greater_than_or_equal = null, $dob_less_than_or_equal = null, $dob_equals = null, $dob_not_equals = null, $dob_specified = null, $dob_in = null, $dob_not_in = null, $status_equals = null, $status_not_equals = null, $status_specified = null, $status_in = null, $status_not_in = null, $valid_from_greater_than = null, $valid_from_less_than = null, $valid_from_greater_than_or_equal = null, $valid_from_less_than_or_equal = null, $valid_from_equals = null, $valid_from_not_equals = null, $valid_from_specified = null, $valid_from_in = null, $valid_from_not_in = null, $valid_to_greater_than = null, $valid_to_less_than = null, $valid_to_greater_than_or_equal = null, $valid_to_less_than_or_equal = null, $valid_to_equals = null, $valid_to_not_equals = null, $valid_to_specified = null, $valid_to_in = null, $valid_to_not_in = null, $person_id_greater_than = null, $person_id_less_than = null, $person_id_greater_than_or_equal = null, $person_id_less_than_or_equal = null, $person_id_equals = null, $person_id_not_equals = null, $person_id_specified = null, $person_id_in = null, $person_id_not_in = null, $membership_type_id_greater_than = null, $membership_type_id_less_than = null, $membership_type_id_greater_than_or_equal = null, $membership_type_id_less_than_or_equal = null, $membership_type_id_equals = null, $membership_type_id_not_equals = null, $membership_type_id_specified = null, $membership_type_id_in = null, $membership_type_id_not_in = null, $membership_period_id_greater_than = null, $membership_period_id_less_than = null, $membership_period_id_greater_than_or_equal = null, $membership_period_id_less_than_or_equal = null, $membership_period_id_equals = null, $membership_period_id_not_equals = null, $membership_period_id_specified = null, $membership_period_id_in = null, $membership_period_id_not_in = null, $criteria_id_greater_than = null, $criteria_id_less_than = null, $criteria_id_greater_than_or_equal = null, $criteria_id_less_than_or_equal = null, $criteria_id_equals = null, $criteria_id_not_equals = null, $criteria_id_specified = null, $criteria_id_in = null, $criteria_id_not_in = null, $order_id_greater_than = null, $order_id_less_than = null, $order_id_greater_than_or_equal = null, $order_id_less_than_or_equal = null, $order_id_equals = null, $order_id_not_equals = null, $order_id_specified = null, $order_id_in = null, $order_id_not_in = null, $number_id_greater_than = null, $number_id_less_than = null, $number_id_greater_than_or_equal = null, $number_id_less_than_or_equal = null, $number_id_equals = null, $number_id_not_equals = null, $number_id_specified = null, $number_id_in = null, $number_id_not_in = null, $distinct = null, string $contentType = self::contentTypes['countMemberships'][0])
    {
        return $this->countMembershipsAsyncWithHttpInfo($id_greater_than, $id_less_than, $id_greater_than_or_equal, $id_less_than_or_equal, $id_equals, $id_not_equals, $id_specified, $id_in, $id_not_in, $first_name_contains, $first_name_does_not_contain, $first_name_equals, $first_name_not_equals, $first_name_specified, $first_name_in, $first_name_not_in, $last_name_contains, $last_name_does_not_contain, $last_name_equals, $last_name_not_equals, $last_name_specified, $last_name_in, $last_name_not_in, $id_number_contains, $id_number_does_not_contain, $id_number_equals, $id_number_not_equals, $id_number_specified, $id_number_in, $id_number_not_in, $other_number_contains, $other_number_does_not_contain, $other_number_equals, $other_number_not_equals, $other_number_specified, $other_number_in, $other_number_not_in, $dob_greater_than, $dob_less_than, $dob_greater_than_or_equal, $dob_less_than_or_equal, $dob_equals, $dob_not_equals, $dob_specified, $dob_in, $dob_not_in, $status_equals, $status_not_equals, $status_specified, $status_in, $status_not_in, $valid_from_greater_than, $valid_from_less_than, $valid_from_greater_than_or_equal, $valid_from_less_than_or_equal, $valid_from_equals, $valid_from_not_equals, $valid_from_specified, $valid_from_in, $valid_from_not_in, $valid_to_greater_than, $valid_to_less_than, $valid_to_greater_than_or_equal, $valid_to_less_than_or_equal, $valid_to_equals, $valid_to_not_equals, $valid_to_specified, $valid_to_in, $valid_to_not_in, $person_id_greater_than, $person_id_less_than, $person_id_greater_than_or_equal, $person_id_less_than_or_equal, $person_id_equals, $person_id_not_equals, $person_id_specified, $person_id_in, $person_id_not_in, $membership_type_id_greater_than, $membership_type_id_less_than, $membership_type_id_greater_than_or_equal, $membership_type_id_less_than_or_equal, $membership_type_id_equals, $membership_type_id_not_equals, $membership_type_id_specified, $membership_type_id_in, $membership_type_id_not_in, $membership_period_id_greater_than, $membership_period_id_less_than, $membership_period_id_greater_than_or_equal, $membership_period_id_less_than_or_equal, $membership_period_id_equals, $membership_period_id_not_equals, $membership_period_id_specified, $membership_period_id_in, $membership_period_id_not_in, $criteria_id_greater_than, $criteria_id_less_than, $criteria_id_greater_than_or_equal, $criteria_id_less_than_or_equal, $criteria_id_equals, $criteria_id_not_equals, $criteria_id_specified, $criteria_id_in, $criteria_id_not_in, $order_id_greater_than, $order_id_less_than, $order_id_greater_than_or_equal, $order_id_less_than_or_equal, $order_id_equals, $order_id_not_equals, $order_id_specified, $order_id_in, $order_id_not_in, $number_id_greater_than, $number_id_less_than, $number_id_greater_than_or_equal, $number_id_less_than_or_equal, $number_id_equals, $number_id_not_equals, $number_id_specified, $number_id_in, $number_id_not_in, $distinct, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation countMembershipsAsyncWithHttpInfo
     *
     * @param  int $id_greater_than (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_equals (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int[] $id_in (optional)
     * @param  int[] $id_not_in (optional)
     * @param  string $first_name_contains (optional)
     * @param  string $first_name_does_not_contain (optional)
     * @param  string $first_name_equals (optional)
     * @param  string $first_name_not_equals (optional)
     * @param  bool $first_name_specified (optional)
     * @param  string[] $first_name_in (optional)
     * @param  string[] $first_name_not_in (optional)
     * @param  string $last_name_contains (optional)
     * @param  string $last_name_does_not_contain (optional)
     * @param  string $last_name_equals (optional)
     * @param  string $last_name_not_equals (optional)
     * @param  bool $last_name_specified (optional)
     * @param  string[] $last_name_in (optional)
     * @param  string[] $last_name_not_in (optional)
     * @param  string $id_number_contains (optional)
     * @param  string $id_number_does_not_contain (optional)
     * @param  string $id_number_equals (optional)
     * @param  string $id_number_not_equals (optional)
     * @param  bool $id_number_specified (optional)
     * @param  string[] $id_number_in (optional)
     * @param  string[] $id_number_not_in (optional)
     * @param  string $other_number_contains (optional)
     * @param  string $other_number_does_not_contain (optional)
     * @param  string $other_number_equals (optional)
     * @param  string $other_number_not_equals (optional)
     * @param  bool $other_number_specified (optional)
     * @param  string[] $other_number_in (optional)
     * @param  string[] $other_number_not_in (optional)
     * @param  \DateTime $dob_greater_than (optional)
     * @param  \DateTime $dob_less_than (optional)
     * @param  \DateTime $dob_greater_than_or_equal (optional)
     * @param  \DateTime $dob_less_than_or_equal (optional)
     * @param  \DateTime $dob_equals (optional)
     * @param  \DateTime $dob_not_equals (optional)
     * @param  bool $dob_specified (optional)
     * @param  \DateTime[] $dob_in (optional)
     * @param  \DateTime[] $dob_not_in (optional)
     * @param  string $status_equals (optional)
     * @param  string $status_not_equals (optional)
     * @param  bool $status_specified (optional)
     * @param  string[] $status_in (optional)
     * @param  string[] $status_not_in (optional)
     * @param  \DateTime $valid_from_greater_than (optional)
     * @param  \DateTime $valid_from_less_than (optional)
     * @param  \DateTime $valid_from_greater_than_or_equal (optional)
     * @param  \DateTime $valid_from_less_than_or_equal (optional)
     * @param  \DateTime $valid_from_equals (optional)
     * @param  \DateTime $valid_from_not_equals (optional)
     * @param  bool $valid_from_specified (optional)
     * @param  \DateTime[] $valid_from_in (optional)
     * @param  \DateTime[] $valid_from_not_in (optional)
     * @param  \DateTime $valid_to_greater_than (optional)
     * @param  \DateTime $valid_to_less_than (optional)
     * @param  \DateTime $valid_to_greater_than_or_equal (optional)
     * @param  \DateTime $valid_to_less_than_or_equal (optional)
     * @param  \DateTime $valid_to_equals (optional)
     * @param  \DateTime $valid_to_not_equals (optional)
     * @param  bool $valid_to_specified (optional)
     * @param  \DateTime[] $valid_to_in (optional)
     * @param  \DateTime[] $valid_to_not_in (optional)
     * @param  int $person_id_greater_than (optional)
     * @param  int $person_id_less_than (optional)
     * @param  int $person_id_greater_than_or_equal (optional)
     * @param  int $person_id_less_than_or_equal (optional)
     * @param  int $person_id_equals (optional)
     * @param  int $person_id_not_equals (optional)
     * @param  bool $person_id_specified (optional)
     * @param  int[] $person_id_in (optional)
     * @param  int[] $person_id_not_in (optional)
     * @param  int $membership_type_id_greater_than (optional)
     * @param  int $membership_type_id_less_than (optional)
     * @param  int $membership_type_id_greater_than_or_equal (optional)
     * @param  int $membership_type_id_less_than_or_equal (optional)
     * @param  int $membership_type_id_equals (optional)
     * @param  int $membership_type_id_not_equals (optional)
     * @param  bool $membership_type_id_specified (optional)
     * @param  int[] $membership_type_id_in (optional)
     * @param  int[] $membership_type_id_not_in (optional)
     * @param  int $membership_period_id_greater_than (optional)
     * @param  int $membership_period_id_less_than (optional)
     * @param  int $membership_period_id_greater_than_or_equal (optional)
     * @param  int $membership_period_id_less_than_or_equal (optional)
     * @param  int $membership_period_id_equals (optional)
     * @param  int $membership_period_id_not_equals (optional)
     * @param  bool $membership_period_id_specified (optional)
     * @param  int[] $membership_period_id_in (optional)
     * @param  int[] $membership_period_id_not_in (optional)
     * @param  int $criteria_id_greater_than (optional)
     * @param  int $criteria_id_less_than (optional)
     * @param  int $criteria_id_greater_than_or_equal (optional)
     * @param  int $criteria_id_less_than_or_equal (optional)
     * @param  int $criteria_id_equals (optional)
     * @param  int $criteria_id_not_equals (optional)
     * @param  bool $criteria_id_specified (optional)
     * @param  int[] $criteria_id_in (optional)
     * @param  int[] $criteria_id_not_in (optional)
     * @param  int $order_id_greater_than (optional)
     * @param  int $order_id_less_than (optional)
     * @param  int $order_id_greater_than_or_equal (optional)
     * @param  int $order_id_less_than_or_equal (optional)
     * @param  int $order_id_equals (optional)
     * @param  int $order_id_not_equals (optional)
     * @param  bool $order_id_specified (optional)
     * @param  int[] $order_id_in (optional)
     * @param  int[] $order_id_not_in (optional)
     * @param  int $number_id_greater_than (optional)
     * @param  int $number_id_less_than (optional)
     * @param  int $number_id_greater_than_or_equal (optional)
     * @param  int $number_id_less_than_or_equal (optional)
     * @param  int $number_id_equals (optional)
     * @param  int $number_id_not_equals (optional)
     * @param  bool $number_id_specified (optional)
     * @param  int[] $number_id_in (optional)
     * @param  int[] $number_id_not_in (optional)
     * @param  bool $distinct (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['countMemberships'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function countMembershipsAsyncWithHttpInfo($id_greater_than = null, $id_less_than = null, $id_greater_than_or_equal = null, $id_less_than_or_equal = null, $id_equals = null, $id_not_equals = null, $id_specified = null, $id_in = null, $id_not_in = null, $first_name_contains = null, $first_name_does_not_contain = null, $first_name_equals = null, $first_name_not_equals = null, $first_name_specified = null, $first_name_in = null, $first_name_not_in = null, $last_name_contains = null, $last_name_does_not_contain = null, $last_name_equals = null, $last_name_not_equals = null, $last_name_specified = null, $last_name_in = null, $last_name_not_in = null, $id_number_contains = null, $id_number_does_not_contain = null, $id_number_equals = null, $id_number_not_equals = null, $id_number_specified = null, $id_number_in = null, $id_number_not_in = null, $other_number_contains = null, $other_number_does_not_contain = null, $other_number_equals = null, $other_number_not_equals = null, $other_number_specified = null, $other_number_in = null, $other_number_not_in = null, $dob_greater_than = null, $dob_less_than = null, $dob_greater_than_or_equal = null, $dob_less_than_or_equal = null, $dob_equals = null, $dob_not_equals = null, $dob_specified = null, $dob_in = null, $dob_not_in = null, $status_equals = null, $status_not_equals = null, $status_specified = null, $status_in = null, $status_not_in = null, $valid_from_greater_than = null, $valid_from_less_than = null, $valid_from_greater_than_or_equal = null, $valid_from_less_than_or_equal = null, $valid_from_equals = null, $valid_from_not_equals = null, $valid_from_specified = null, $valid_from_in = null, $valid_from_not_in = null, $valid_to_greater_than = null, $valid_to_less_than = null, $valid_to_greater_than_or_equal = null, $valid_to_less_than_or_equal = null, $valid_to_equals = null, $valid_to_not_equals = null, $valid_to_specified = null, $valid_to_in = null, $valid_to_not_in = null, $person_id_greater_than = null, $person_id_less_than = null, $person_id_greater_than_or_equal = null, $person_id_less_than_or_equal = null, $person_id_equals = null, $person_id_not_equals = null, $person_id_specified = null, $person_id_in = null, $person_id_not_in = null, $membership_type_id_greater_than = null, $membership_type_id_less_than = null, $membership_type_id_greater_than_or_equal = null, $membership_type_id_less_than_or_equal = null, $membership_type_id_equals = null, $membership_type_id_not_equals = null, $membership_type_id_specified = null, $membership_type_id_in = null, $membership_type_id_not_in = null, $membership_period_id_greater_than = null, $membership_period_id_less_than = null, $membership_period_id_greater_than_or_equal = null, $membership_period_id_less_than_or_equal = null, $membership_period_id_equals = null, $membership_period_id_not_equals = null, $membership_period_id_specified = null, $membership_period_id_in = null, $membership_period_id_not_in = null, $criteria_id_greater_than = null, $criteria_id_less_than = null, $criteria_id_greater_than_or_equal = null, $criteria_id_less_than_or_equal = null, $criteria_id_equals = null, $criteria_id_not_equals = null, $criteria_id_specified = null, $criteria_id_in = null, $criteria_id_not_in = null, $order_id_greater_than = null, $order_id_less_than = null, $order_id_greater_than_or_equal = null, $order_id_less_than_or_equal = null, $order_id_equals = null, $order_id_not_equals = null, $order_id_specified = null, $order_id_in = null, $order_id_not_in = null, $number_id_greater_than = null, $number_id_less_than = null, $number_id_greater_than_or_equal = null, $number_id_less_than_or_equal = null, $number_id_equals = null, $number_id_not_equals = null, $number_id_specified = null, $number_id_in = null, $number_id_not_in = null, $distinct = null, string $contentType = self::contentTypes['countMemberships'][0])
    {
        $returnType = 'int';
        $request = $this->countMembershipsRequest($id_greater_than, $id_less_than, $id_greater_than_or_equal, $id_less_than_or_equal, $id_equals, $id_not_equals, $id_specified, $id_in, $id_not_in, $first_name_contains, $first_name_does_not_contain, $first_name_equals, $first_name_not_equals, $first_name_specified, $first_name_in, $first_name_not_in, $last_name_contains, $last_name_does_not_contain, $last_name_equals, $last_name_not_equals, $last_name_specified, $last_name_in, $last_name_not_in, $id_number_contains, $id_number_does_not_contain, $id_number_equals, $id_number_not_equals, $id_number_specified, $id_number_in, $id_number_not_in, $other_number_contains, $other_number_does_not_contain, $other_number_equals, $other_number_not_equals, $other_number_specified, $other_number_in, $other_number_not_in, $dob_greater_than, $dob_less_than, $dob_greater_than_or_equal, $dob_less_than_or_equal, $dob_equals, $dob_not_equals, $dob_specified, $dob_in, $dob_not_in, $status_equals, $status_not_equals, $status_specified, $status_in, $status_not_in, $valid_from_greater_than, $valid_from_less_than, $valid_from_greater_than_or_equal, $valid_from_less_than_or_equal, $valid_from_equals, $valid_from_not_equals, $valid_from_specified, $valid_from_in, $valid_from_not_in, $valid_to_greater_than, $valid_to_less_than, $valid_to_greater_than_or_equal, $valid_to_less_than_or_equal, $valid_to_equals, $valid_to_not_equals, $valid_to_specified, $valid_to_in, $valid_to_not_in, $person_id_greater_than, $person_id_less_than, $person_id_greater_than_or_equal, $person_id_less_than_or_equal, $person_id_equals, $person_id_not_equals, $person_id_specified, $person_id_in, $person_id_not_in, $membership_type_id_greater_than, $membership_type_id_less_than, $membership_type_id_greater_than_or_equal, $membership_type_id_less_than_or_equal, $membership_type_id_equals, $membership_type_id_not_equals, $membership_type_id_specified, $membership_type_id_in, $membership_type_id_not_in, $membership_period_id_greater_than, $membership_period_id_less_than, $membership_period_id_greater_than_or_equal, $membership_period_id_less_than_or_equal, $membership_period_id_equals, $membership_period_id_not_equals, $membership_period_id_specified, $membership_period_id_in, $membership_period_id_not_in, $criteria_id_greater_than, $criteria_id_less_than, $criteria_id_greater_than_or_equal, $criteria_id_less_than_or_equal, $criteria_id_equals, $criteria_id_not_equals, $criteria_id_specified, $criteria_id_in, $criteria_id_not_in, $order_id_greater_than, $order_id_less_than, $order_id_greater_than_or_equal, $order_id_less_than_or_equal, $order_id_equals, $order_id_not_equals, $order_id_specified, $order_id_in, $order_id_not_in, $number_id_greater_than, $number_id_less_than, $number_id_greater_than_or_equal, $number_id_less_than_or_equal, $number_id_equals, $number_id_not_equals, $number_id_specified, $number_id_in, $number_id_not_in, $distinct, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'countMemberships'
     *
     * @param  int $id_greater_than (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_equals (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int[] $id_in (optional)
     * @param  int[] $id_not_in (optional)
     * @param  string $first_name_contains (optional)
     * @param  string $first_name_does_not_contain (optional)
     * @param  string $first_name_equals (optional)
     * @param  string $first_name_not_equals (optional)
     * @param  bool $first_name_specified (optional)
     * @param  string[] $first_name_in (optional)
     * @param  string[] $first_name_not_in (optional)
     * @param  string $last_name_contains (optional)
     * @param  string $last_name_does_not_contain (optional)
     * @param  string $last_name_equals (optional)
     * @param  string $last_name_not_equals (optional)
     * @param  bool $last_name_specified (optional)
     * @param  string[] $last_name_in (optional)
     * @param  string[] $last_name_not_in (optional)
     * @param  string $id_number_contains (optional)
     * @param  string $id_number_does_not_contain (optional)
     * @param  string $id_number_equals (optional)
     * @param  string $id_number_not_equals (optional)
     * @param  bool $id_number_specified (optional)
     * @param  string[] $id_number_in (optional)
     * @param  string[] $id_number_not_in (optional)
     * @param  string $other_number_contains (optional)
     * @param  string $other_number_does_not_contain (optional)
     * @param  string $other_number_equals (optional)
     * @param  string $other_number_not_equals (optional)
     * @param  bool $other_number_specified (optional)
     * @param  string[] $other_number_in (optional)
     * @param  string[] $other_number_not_in (optional)
     * @param  \DateTime $dob_greater_than (optional)
     * @param  \DateTime $dob_less_than (optional)
     * @param  \DateTime $dob_greater_than_or_equal (optional)
     * @param  \DateTime $dob_less_than_or_equal (optional)
     * @param  \DateTime $dob_equals (optional)
     * @param  \DateTime $dob_not_equals (optional)
     * @param  bool $dob_specified (optional)
     * @param  \DateTime[] $dob_in (optional)
     * @param  \DateTime[] $dob_not_in (optional)
     * @param  string $status_equals (optional)
     * @param  string $status_not_equals (optional)
     * @param  bool $status_specified (optional)
     * @param  string[] $status_in (optional)
     * @param  string[] $status_not_in (optional)
     * @param  \DateTime $valid_from_greater_than (optional)
     * @param  \DateTime $valid_from_less_than (optional)
     * @param  \DateTime $valid_from_greater_than_or_equal (optional)
     * @param  \DateTime $valid_from_less_than_or_equal (optional)
     * @param  \DateTime $valid_from_equals (optional)
     * @param  \DateTime $valid_from_not_equals (optional)
     * @param  bool $valid_from_specified (optional)
     * @param  \DateTime[] $valid_from_in (optional)
     * @param  \DateTime[] $valid_from_not_in (optional)
     * @param  \DateTime $valid_to_greater_than (optional)
     * @param  \DateTime $valid_to_less_than (optional)
     * @param  \DateTime $valid_to_greater_than_or_equal (optional)
     * @param  \DateTime $valid_to_less_than_or_equal (optional)
     * @param  \DateTime $valid_to_equals (optional)
     * @param  \DateTime $valid_to_not_equals (optional)
     * @param  bool $valid_to_specified (optional)
     * @param  \DateTime[] $valid_to_in (optional)
     * @param  \DateTime[] $valid_to_not_in (optional)
     * @param  int $person_id_greater_than (optional)
     * @param  int $person_id_less_than (optional)
     * @param  int $person_id_greater_than_or_equal (optional)
     * @param  int $person_id_less_than_or_equal (optional)
     * @param  int $person_id_equals (optional)
     * @param  int $person_id_not_equals (optional)
     * @param  bool $person_id_specified (optional)
     * @param  int[] $person_id_in (optional)
     * @param  int[] $person_id_not_in (optional)
     * @param  int $membership_type_id_greater_than (optional)
     * @param  int $membership_type_id_less_than (optional)
     * @param  int $membership_type_id_greater_than_or_equal (optional)
     * @param  int $membership_type_id_less_than_or_equal (optional)
     * @param  int $membership_type_id_equals (optional)
     * @param  int $membership_type_id_not_equals (optional)
     * @param  bool $membership_type_id_specified (optional)
     * @param  int[] $membership_type_id_in (optional)
     * @param  int[] $membership_type_id_not_in (optional)
     * @param  int $membership_period_id_greater_than (optional)
     * @param  int $membership_period_id_less_than (optional)
     * @param  int $membership_period_id_greater_than_or_equal (optional)
     * @param  int $membership_period_id_less_than_or_equal (optional)
     * @param  int $membership_period_id_equals (optional)
     * @param  int $membership_period_id_not_equals (optional)
     * @param  bool $membership_period_id_specified (optional)
     * @param  int[] $membership_period_id_in (optional)
     * @param  int[] $membership_period_id_not_in (optional)
     * @param  int $criteria_id_greater_than (optional)
     * @param  int $criteria_id_less_than (optional)
     * @param  int $criteria_id_greater_than_or_equal (optional)
     * @param  int $criteria_id_less_than_or_equal (optional)
     * @param  int $criteria_id_equals (optional)
     * @param  int $criteria_id_not_equals (optional)
     * @param  bool $criteria_id_specified (optional)
     * @param  int[] $criteria_id_in (optional)
     * @param  int[] $criteria_id_not_in (optional)
     * @param  int $order_id_greater_than (optional)
     * @param  int $order_id_less_than (optional)
     * @param  int $order_id_greater_than_or_equal (optional)
     * @param  int $order_id_less_than_or_equal (optional)
     * @param  int $order_id_equals (optional)
     * @param  int $order_id_not_equals (optional)
     * @param  bool $order_id_specified (optional)
     * @param  int[] $order_id_in (optional)
     * @param  int[] $order_id_not_in (optional)
     * @param  int $number_id_greater_than (optional)
     * @param  int $number_id_less_than (optional)
     * @param  int $number_id_greater_than_or_equal (optional)
     * @param  int $number_id_less_than_or_equal (optional)
     * @param  int $number_id_equals (optional)
     * @param  int $number_id_not_equals (optional)
     * @param  bool $number_id_specified (optional)
     * @param  int[] $number_id_in (optional)
     * @param  int[] $number_id_not_in (optional)
     * @param  bool $distinct (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['countMemberships'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function countMembershipsRequest($id_greater_than = null, $id_less_than = null, $id_greater_than_or_equal = null, $id_less_than_or_equal = null, $id_equals = null, $id_not_equals = null, $id_specified = null, $id_in = null, $id_not_in = null, $first_name_contains = null, $first_name_does_not_contain = null, $first_name_equals = null, $first_name_not_equals = null, $first_name_specified = null, $first_name_in = null, $first_name_not_in = null, $last_name_contains = null, $last_name_does_not_contain = null, $last_name_equals = null, $last_name_not_equals = null, $last_name_specified = null, $last_name_in = null, $last_name_not_in = null, $id_number_contains = null, $id_number_does_not_contain = null, $id_number_equals = null, $id_number_not_equals = null, $id_number_specified = null, $id_number_in = null, $id_number_not_in = null, $other_number_contains = null, $other_number_does_not_contain = null, $other_number_equals = null, $other_number_not_equals = null, $other_number_specified = null, $other_number_in = null, $other_number_not_in = null, $dob_greater_than = null, $dob_less_than = null, $dob_greater_than_or_equal = null, $dob_less_than_or_equal = null, $dob_equals = null, $dob_not_equals = null, $dob_specified = null, $dob_in = null, $dob_not_in = null, $status_equals = null, $status_not_equals = null, $status_specified = null, $status_in = null, $status_not_in = null, $valid_from_greater_than = null, $valid_from_less_than = null, $valid_from_greater_than_or_equal = null, $valid_from_less_than_or_equal = null, $valid_from_equals = null, $valid_from_not_equals = null, $valid_from_specified = null, $valid_from_in = null, $valid_from_not_in = null, $valid_to_greater_than = null, $valid_to_less_than = null, $valid_to_greater_than_or_equal = null, $valid_to_less_than_or_equal = null, $valid_to_equals = null, $valid_to_not_equals = null, $valid_to_specified = null, $valid_to_in = null, $valid_to_not_in = null, $person_id_greater_than = null, $person_id_less_than = null, $person_id_greater_than_or_equal = null, $person_id_less_than_or_equal = null, $person_id_equals = null, $person_id_not_equals = null, $person_id_specified = null, $person_id_in = null, $person_id_not_in = null, $membership_type_id_greater_than = null, $membership_type_id_less_than = null, $membership_type_id_greater_than_or_equal = null, $membership_type_id_less_than_or_equal = null, $membership_type_id_equals = null, $membership_type_id_not_equals = null, $membership_type_id_specified = null, $membership_type_id_in = null, $membership_type_id_not_in = null, $membership_period_id_greater_than = null, $membership_period_id_less_than = null, $membership_period_id_greater_than_or_equal = null, $membership_period_id_less_than_or_equal = null, $membership_period_id_equals = null, $membership_period_id_not_equals = null, $membership_period_id_specified = null, $membership_period_id_in = null, $membership_period_id_not_in = null, $criteria_id_greater_than = null, $criteria_id_less_than = null, $criteria_id_greater_than_or_equal = null, $criteria_id_less_than_or_equal = null, $criteria_id_equals = null, $criteria_id_not_equals = null, $criteria_id_specified = null, $criteria_id_in = null, $criteria_id_not_in = null, $order_id_greater_than = null, $order_id_less_than = null, $order_id_greater_than_or_equal = null, $order_id_less_than_or_equal = null, $order_id_equals = null, $order_id_not_equals = null, $order_id_specified = null, $order_id_in = null, $order_id_not_in = null, $number_id_greater_than = null, $number_id_less_than = null, $number_id_greater_than_or_equal = null, $number_id_less_than_or_equal = null, $number_id_equals = null, $number_id_not_equals = null, $number_id_specified = null, $number_id_in = null, $number_id_not_in = null, $distinct = null, string $contentType = self::contentTypes['countMemberships'][0])
    {






























































































































        $resourcePath = '/api/memberships/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_greater_than,
            'id.greaterThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_less_than,
            'id.lessThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_greater_than_or_equal,
            'id.greaterThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_less_than_or_equal,
            'id.lessThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_equals,
            'id.equals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_not_equals,
            'id.notEquals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_specified,
            'id.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_in,
            'id.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_not_in,
            'id.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $first_name_contains,
            'firstName.contains', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $first_name_does_not_contain,
            'firstName.doesNotContain', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $first_name_equals,
            'firstName.equals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $first_name_not_equals,
            'firstName.notEquals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $first_name_specified,
            'firstName.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $first_name_in,
            'firstName.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $first_name_not_in,
            'firstName.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_name_contains,
            'lastName.contains', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_name_does_not_contain,
            'lastName.doesNotContain', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_name_equals,
            'lastName.equals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_name_not_equals,
            'lastName.notEquals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_name_specified,
            'lastName.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_name_in,
            'lastName.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_name_not_in,
            'lastName.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_number_contains,
            'idNumber.contains', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_number_does_not_contain,
            'idNumber.doesNotContain', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_number_equals,
            'idNumber.equals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_number_not_equals,
            'idNumber.notEquals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_number_specified,
            'idNumber.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_number_in,
            'idNumber.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_number_not_in,
            'idNumber.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $other_number_contains,
            'otherNumber.contains', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $other_number_does_not_contain,
            'otherNumber.doesNotContain', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $other_number_equals,
            'otherNumber.equals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $other_number_not_equals,
            'otherNumber.notEquals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $other_number_specified,
            'otherNumber.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $other_number_in,
            'otherNumber.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $other_number_not_in,
            'otherNumber.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dob_greater_than,
            'dob.greaterThan', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dob_less_than,
            'dob.lessThan', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dob_greater_than_or_equal,
            'dob.greaterThanOrEqual', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dob_less_than_or_equal,
            'dob.lessThanOrEqual', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dob_equals,
            'dob.equals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dob_not_equals,
            'dob.notEquals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dob_specified,
            'dob.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dob_in,
            'dob.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dob_not_in,
            'dob.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status_equals,
            'status.equals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status_not_equals,
            'status.notEquals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status_specified,
            'status.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status_in,
            'status.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status_not_in,
            'status.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $valid_from_greater_than,
            'validFrom.greaterThan', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $valid_from_less_than,
            'validFrom.lessThan', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $valid_from_greater_than_or_equal,
            'validFrom.greaterThanOrEqual', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $valid_from_less_than_or_equal,
            'validFrom.lessThanOrEqual', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $valid_from_equals,
            'validFrom.equals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $valid_from_not_equals,
            'validFrom.notEquals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $valid_from_specified,
            'validFrom.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $valid_from_in,
            'validFrom.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $valid_from_not_in,
            'validFrom.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $valid_to_greater_than,
            'validTo.greaterThan', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $valid_to_less_than,
            'validTo.lessThan', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $valid_to_greater_than_or_equal,
            'validTo.greaterThanOrEqual', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $valid_to_less_than_or_equal,
            'validTo.lessThanOrEqual', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $valid_to_equals,
            'validTo.equals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $valid_to_not_equals,
            'validTo.notEquals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $valid_to_specified,
            'validTo.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $valid_to_in,
            'validTo.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $valid_to_not_in,
            'validTo.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $person_id_greater_than,
            'personId.greaterThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $person_id_less_than,
            'personId.lessThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $person_id_greater_than_or_equal,
            'personId.greaterThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $person_id_less_than_or_equal,
            'personId.lessThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $person_id_equals,
            'personId.equals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $person_id_not_equals,
            'personId.notEquals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $person_id_specified,
            'personId.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $person_id_in,
            'personId.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $person_id_not_in,
            'personId.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_type_id_greater_than,
            'membershipTypeId.greaterThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_type_id_less_than,
            'membershipTypeId.lessThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_type_id_greater_than_or_equal,
            'membershipTypeId.greaterThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_type_id_less_than_or_equal,
            'membershipTypeId.lessThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_type_id_equals,
            'membershipTypeId.equals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_type_id_not_equals,
            'membershipTypeId.notEquals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_type_id_specified,
            'membershipTypeId.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_type_id_in,
            'membershipTypeId.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_type_id_not_in,
            'membershipTypeId.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_period_id_greater_than,
            'membershipPeriodId.greaterThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_period_id_less_than,
            'membershipPeriodId.lessThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_period_id_greater_than_or_equal,
            'membershipPeriodId.greaterThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_period_id_less_than_or_equal,
            'membershipPeriodId.lessThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_period_id_equals,
            'membershipPeriodId.equals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_period_id_not_equals,
            'membershipPeriodId.notEquals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_period_id_specified,
            'membershipPeriodId.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_period_id_in,
            'membershipPeriodId.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_period_id_not_in,
            'membershipPeriodId.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $criteria_id_greater_than,
            'criteriaId.greaterThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $criteria_id_less_than,
            'criteriaId.lessThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $criteria_id_greater_than_or_equal,
            'criteriaId.greaterThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $criteria_id_less_than_or_equal,
            'criteriaId.lessThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $criteria_id_equals,
            'criteriaId.equals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $criteria_id_not_equals,
            'criteriaId.notEquals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $criteria_id_specified,
            'criteriaId.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $criteria_id_in,
            'criteriaId.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $criteria_id_not_in,
            'criteriaId.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id_greater_than,
            'orderId.greaterThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id_less_than,
            'orderId.lessThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id_greater_than_or_equal,
            'orderId.greaterThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id_less_than_or_equal,
            'orderId.lessThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id_equals,
            'orderId.equals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id_not_equals,
            'orderId.notEquals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id_specified,
            'orderId.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id_in,
            'orderId.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id_not_in,
            'orderId.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_id_greater_than,
            'numberId.greaterThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_id_less_than,
            'numberId.lessThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_id_greater_than_or_equal,
            'numberId.greaterThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_id_less_than_or_equal,
            'numberId.lessThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_id_equals,
            'numberId.equals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_id_not_equals,
            'numberId.notEquals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_id_specified,
            'numberId.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_id_in,
            'numberId.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_id_not_in,
            'numberId.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $distinct,
            'distinct', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createMembership
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipDTO $membership_dto membership_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMembership'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Idealogic\MembershipAPI\Model\MembershipDTO
     */
    public function createMembership($membership_dto, string $contentType = self::contentTypes['createMembership'][0])
    {
        list($response) = $this->createMembershipWithHttpInfo($membership_dto, $contentType);
        return $response;
    }

    /**
     * Operation createMembershipWithHttpInfo
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipDTO $membership_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMembership'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Idealogic\MembershipAPI\Model\MembershipDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function createMembershipWithHttpInfo($membership_dto, string $contentType = self::contentTypes['createMembership'][0])
    {
        $request = $this->createMembershipRequest($membership_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Idealogic\MembershipAPI\Model\MembershipDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Idealogic\MembershipAPI\Model\MembershipDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Idealogic\MembershipAPI\Model\MembershipDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Idealogic\MembershipAPI\Model\MembershipDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Idealogic\MembershipAPI\Model\MembershipDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createMembershipAsync
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipDTO $membership_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMembership'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMembershipAsync($membership_dto, string $contentType = self::contentTypes['createMembership'][0])
    {
        return $this->createMembershipAsyncWithHttpInfo($membership_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createMembershipAsyncWithHttpInfo
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipDTO $membership_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMembership'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMembershipAsyncWithHttpInfo($membership_dto, string $contentType = self::contentTypes['createMembership'][0])
    {
        $returnType = '\Idealogic\MembershipAPI\Model\MembershipDTO';
        $request = $this->createMembershipRequest($membership_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createMembership'
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipDTO $membership_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMembership'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createMembershipRequest($membership_dto, string $contentType = self::contentTypes['createMembership'][0])
    {

        // verify the required parameter 'membership_dto' is set
        if ($membership_dto === null || (is_array($membership_dto) && count($membership_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $membership_dto when calling createMembership'
            );
        }


        $resourcePath = '/api/memberships';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($membership_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($membership_dto));
            } else {
                $httpBody = $membership_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteMembership
     *
     * @param  int $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteMembership'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteMembership($id, string $contentType = self::contentTypes['deleteMembership'][0])
    {
        $this->deleteMembershipWithHttpInfo($id, $contentType);
    }

    /**
     * Operation deleteMembershipWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteMembership'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteMembershipWithHttpInfo($id, string $contentType = self::contentTypes['deleteMembership'][0])
    {
        $request = $this->deleteMembershipRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteMembershipAsync
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteMembership'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMembershipAsync($id, string $contentType = self::contentTypes['deleteMembership'][0])
    {
        return $this->deleteMembershipAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteMembershipAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteMembership'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMembershipAsyncWithHttpInfo($id, string $contentType = self::contentTypes['deleteMembership'][0])
    {
        $returnType = '';
        $request = $this->deleteMembershipRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteMembership'
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteMembership'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteMembershipRequest($id, string $contentType = self::contentTypes['deleteMembership'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteMembership'
            );
        }


        $resourcePath = '/api/memberships/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation enrolMemberships
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipEnrolRequestDTO $membership_enrol_request_dto membership_enrol_request_dto (required)
     * @param  int $organisation_id organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enrolMemberships'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Idealogic\MembershipAPI\Model\MembershipStatusDTO[]
     */
    public function enrolMemberships($membership_enrol_request_dto, $organisation_id = null, string $contentType = self::contentTypes['enrolMemberships'][0])
    {
        list($response) = $this->enrolMembershipsWithHttpInfo($membership_enrol_request_dto, $organisation_id, $contentType);
        return $response;
    }

    /**
     * Operation enrolMembershipsWithHttpInfo
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipEnrolRequestDTO $membership_enrol_request_dto (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enrolMemberships'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Idealogic\MembershipAPI\Model\MembershipStatusDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function enrolMembershipsWithHttpInfo($membership_enrol_request_dto, $organisation_id = null, string $contentType = self::contentTypes['enrolMemberships'][0])
    {
        $request = $this->enrolMembershipsRequest($membership_enrol_request_dto, $organisation_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Idealogic\MembershipAPI\Model\MembershipStatusDTO[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Idealogic\MembershipAPI\Model\MembershipStatusDTO[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Idealogic\MembershipAPI\Model\MembershipStatusDTO[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Idealogic\MembershipAPI\Model\MembershipStatusDTO[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Idealogic\MembershipAPI\Model\MembershipStatusDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation enrolMembershipsAsync
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipEnrolRequestDTO $membership_enrol_request_dto (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enrolMemberships'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function enrolMembershipsAsync($membership_enrol_request_dto, $organisation_id = null, string $contentType = self::contentTypes['enrolMemberships'][0])
    {
        return $this->enrolMembershipsAsyncWithHttpInfo($membership_enrol_request_dto, $organisation_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation enrolMembershipsAsyncWithHttpInfo
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipEnrolRequestDTO $membership_enrol_request_dto (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enrolMemberships'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function enrolMembershipsAsyncWithHttpInfo($membership_enrol_request_dto, $organisation_id = null, string $contentType = self::contentTypes['enrolMemberships'][0])
    {
        $returnType = '\Idealogic\MembershipAPI\Model\MembershipStatusDTO[]';
        $request = $this->enrolMembershipsRequest($membership_enrol_request_dto, $organisation_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'enrolMemberships'
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipEnrolRequestDTO $membership_enrol_request_dto (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enrolMemberships'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function enrolMembershipsRequest($membership_enrol_request_dto, $organisation_id = null, string $contentType = self::contentTypes['enrolMemberships'][0])
    {

        // verify the required parameter 'membership_enrol_request_dto' is set
        if ($membership_enrol_request_dto === null || (is_array($membership_enrol_request_dto) && count($membership_enrol_request_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $membership_enrol_request_dto when calling enrolMemberships'
            );
        }



        $resourcePath = '/api/memberships/enrol';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $organisation_id,
            'organisationId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($membership_enrol_request_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($membership_enrol_request_dto));
            } else {
                $httpBody = $membership_enrol_request_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllMemberships
     *
     * @param  Pageable $pageable pageable (required)
     * @param  int $id_greater_than id_greater_than (optional)
     * @param  int $id_less_than id_less_than (optional)
     * @param  int $id_greater_than_or_equal id_greater_than_or_equal (optional)
     * @param  int $id_less_than_or_equal id_less_than_or_equal (optional)
     * @param  int $id_equals id_equals (optional)
     * @param  int $id_not_equals id_not_equals (optional)
     * @param  bool $id_specified id_specified (optional)
     * @param  int[] $id_in id_in (optional)
     * @param  int[] $id_not_in id_not_in (optional)
     * @param  string $first_name_contains first_name_contains (optional)
     * @param  string $first_name_does_not_contain first_name_does_not_contain (optional)
     * @param  string $first_name_equals first_name_equals (optional)
     * @param  string $first_name_not_equals first_name_not_equals (optional)
     * @param  bool $first_name_specified first_name_specified (optional)
     * @param  string[] $first_name_in first_name_in (optional)
     * @param  string[] $first_name_not_in first_name_not_in (optional)
     * @param  string $last_name_contains last_name_contains (optional)
     * @param  string $last_name_does_not_contain last_name_does_not_contain (optional)
     * @param  string $last_name_equals last_name_equals (optional)
     * @param  string $last_name_not_equals last_name_not_equals (optional)
     * @param  bool $last_name_specified last_name_specified (optional)
     * @param  string[] $last_name_in last_name_in (optional)
     * @param  string[] $last_name_not_in last_name_not_in (optional)
     * @param  string $id_number_contains id_number_contains (optional)
     * @param  string $id_number_does_not_contain id_number_does_not_contain (optional)
     * @param  string $id_number_equals id_number_equals (optional)
     * @param  string $id_number_not_equals id_number_not_equals (optional)
     * @param  bool $id_number_specified id_number_specified (optional)
     * @param  string[] $id_number_in id_number_in (optional)
     * @param  string[] $id_number_not_in id_number_not_in (optional)
     * @param  string $other_number_contains other_number_contains (optional)
     * @param  string $other_number_does_not_contain other_number_does_not_contain (optional)
     * @param  string $other_number_equals other_number_equals (optional)
     * @param  string $other_number_not_equals other_number_not_equals (optional)
     * @param  bool $other_number_specified other_number_specified (optional)
     * @param  string[] $other_number_in other_number_in (optional)
     * @param  string[] $other_number_not_in other_number_not_in (optional)
     * @param  \DateTime $dob_greater_than dob_greater_than (optional)
     * @param  \DateTime $dob_less_than dob_less_than (optional)
     * @param  \DateTime $dob_greater_than_or_equal dob_greater_than_or_equal (optional)
     * @param  \DateTime $dob_less_than_or_equal dob_less_than_or_equal (optional)
     * @param  \DateTime $dob_equals dob_equals (optional)
     * @param  \DateTime $dob_not_equals dob_not_equals (optional)
     * @param  bool $dob_specified dob_specified (optional)
     * @param  \DateTime[] $dob_in dob_in (optional)
     * @param  \DateTime[] $dob_not_in dob_not_in (optional)
     * @param  string $status_equals status_equals (optional)
     * @param  string $status_not_equals status_not_equals (optional)
     * @param  bool $status_specified status_specified (optional)
     * @param  string[] $status_in status_in (optional)
     * @param  string[] $status_not_in status_not_in (optional)
     * @param  \DateTime $valid_from_greater_than valid_from_greater_than (optional)
     * @param  \DateTime $valid_from_less_than valid_from_less_than (optional)
     * @param  \DateTime $valid_from_greater_than_or_equal valid_from_greater_than_or_equal (optional)
     * @param  \DateTime $valid_from_less_than_or_equal valid_from_less_than_or_equal (optional)
     * @param  \DateTime $valid_from_equals valid_from_equals (optional)
     * @param  \DateTime $valid_from_not_equals valid_from_not_equals (optional)
     * @param  bool $valid_from_specified valid_from_specified (optional)
     * @param  \DateTime[] $valid_from_in valid_from_in (optional)
     * @param  \DateTime[] $valid_from_not_in valid_from_not_in (optional)
     * @param  \DateTime $valid_to_greater_than valid_to_greater_than (optional)
     * @param  \DateTime $valid_to_less_than valid_to_less_than (optional)
     * @param  \DateTime $valid_to_greater_than_or_equal valid_to_greater_than_or_equal (optional)
     * @param  \DateTime $valid_to_less_than_or_equal valid_to_less_than_or_equal (optional)
     * @param  \DateTime $valid_to_equals valid_to_equals (optional)
     * @param  \DateTime $valid_to_not_equals valid_to_not_equals (optional)
     * @param  bool $valid_to_specified valid_to_specified (optional)
     * @param  \DateTime[] $valid_to_in valid_to_in (optional)
     * @param  \DateTime[] $valid_to_not_in valid_to_not_in (optional)
     * @param  int $person_id_greater_than person_id_greater_than (optional)
     * @param  int $person_id_less_than person_id_less_than (optional)
     * @param  int $person_id_greater_than_or_equal person_id_greater_than_or_equal (optional)
     * @param  int $person_id_less_than_or_equal person_id_less_than_or_equal (optional)
     * @param  int $person_id_equals person_id_equals (optional)
     * @param  int $person_id_not_equals person_id_not_equals (optional)
     * @param  bool $person_id_specified person_id_specified (optional)
     * @param  int[] $person_id_in person_id_in (optional)
     * @param  int[] $person_id_not_in person_id_not_in (optional)
     * @param  int $membership_type_id_greater_than membership_type_id_greater_than (optional)
     * @param  int $membership_type_id_less_than membership_type_id_less_than (optional)
     * @param  int $membership_type_id_greater_than_or_equal membership_type_id_greater_than_or_equal (optional)
     * @param  int $membership_type_id_less_than_or_equal membership_type_id_less_than_or_equal (optional)
     * @param  int $membership_type_id_equals membership_type_id_equals (optional)
     * @param  int $membership_type_id_not_equals membership_type_id_not_equals (optional)
     * @param  bool $membership_type_id_specified membership_type_id_specified (optional)
     * @param  int[] $membership_type_id_in membership_type_id_in (optional)
     * @param  int[] $membership_type_id_not_in membership_type_id_not_in (optional)
     * @param  int $membership_period_id_greater_than membership_period_id_greater_than (optional)
     * @param  int $membership_period_id_less_than membership_period_id_less_than (optional)
     * @param  int $membership_period_id_greater_than_or_equal membership_period_id_greater_than_or_equal (optional)
     * @param  int $membership_period_id_less_than_or_equal membership_period_id_less_than_or_equal (optional)
     * @param  int $membership_period_id_equals membership_period_id_equals (optional)
     * @param  int $membership_period_id_not_equals membership_period_id_not_equals (optional)
     * @param  bool $membership_period_id_specified membership_period_id_specified (optional)
     * @param  int[] $membership_period_id_in membership_period_id_in (optional)
     * @param  int[] $membership_period_id_not_in membership_period_id_not_in (optional)
     * @param  int $criteria_id_greater_than criteria_id_greater_than (optional)
     * @param  int $criteria_id_less_than criteria_id_less_than (optional)
     * @param  int $criteria_id_greater_than_or_equal criteria_id_greater_than_or_equal (optional)
     * @param  int $criteria_id_less_than_or_equal criteria_id_less_than_or_equal (optional)
     * @param  int $criteria_id_equals criteria_id_equals (optional)
     * @param  int $criteria_id_not_equals criteria_id_not_equals (optional)
     * @param  bool $criteria_id_specified criteria_id_specified (optional)
     * @param  int[] $criteria_id_in criteria_id_in (optional)
     * @param  int[] $criteria_id_not_in criteria_id_not_in (optional)
     * @param  int $order_id_greater_than order_id_greater_than (optional)
     * @param  int $order_id_less_than order_id_less_than (optional)
     * @param  int $order_id_greater_than_or_equal order_id_greater_than_or_equal (optional)
     * @param  int $order_id_less_than_or_equal order_id_less_than_or_equal (optional)
     * @param  int $order_id_equals order_id_equals (optional)
     * @param  int $order_id_not_equals order_id_not_equals (optional)
     * @param  bool $order_id_specified order_id_specified (optional)
     * @param  int[] $order_id_in order_id_in (optional)
     * @param  int[] $order_id_not_in order_id_not_in (optional)
     * @param  int $number_id_greater_than number_id_greater_than (optional)
     * @param  int $number_id_less_than number_id_less_than (optional)
     * @param  int $number_id_greater_than_or_equal number_id_greater_than_or_equal (optional)
     * @param  int $number_id_less_than_or_equal number_id_less_than_or_equal (optional)
     * @param  int $number_id_equals number_id_equals (optional)
     * @param  int $number_id_not_equals number_id_not_equals (optional)
     * @param  bool $number_id_specified number_id_specified (optional)
     * @param  int[] $number_id_in number_id_in (optional)
     * @param  int[] $number_id_not_in number_id_not_in (optional)
     * @param  bool $distinct distinct (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllMemberships'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Idealogic\MembershipAPI\Model\MembershipDTO[]
     */
    public function getAllMemberships($pageable, $id_greater_than = null, $id_less_than = null, $id_greater_than_or_equal = null, $id_less_than_or_equal = null, $id_equals = null, $id_not_equals = null, $id_specified = null, $id_in = null, $id_not_in = null, $first_name_contains = null, $first_name_does_not_contain = null, $first_name_equals = null, $first_name_not_equals = null, $first_name_specified = null, $first_name_in = null, $first_name_not_in = null, $last_name_contains = null, $last_name_does_not_contain = null, $last_name_equals = null, $last_name_not_equals = null, $last_name_specified = null, $last_name_in = null, $last_name_not_in = null, $id_number_contains = null, $id_number_does_not_contain = null, $id_number_equals = null, $id_number_not_equals = null, $id_number_specified = null, $id_number_in = null, $id_number_not_in = null, $other_number_contains = null, $other_number_does_not_contain = null, $other_number_equals = null, $other_number_not_equals = null, $other_number_specified = null, $other_number_in = null, $other_number_not_in = null, $dob_greater_than = null, $dob_less_than = null, $dob_greater_than_or_equal = null, $dob_less_than_or_equal = null, $dob_equals = null, $dob_not_equals = null, $dob_specified = null, $dob_in = null, $dob_not_in = null, $status_equals = null, $status_not_equals = null, $status_specified = null, $status_in = null, $status_not_in = null, $valid_from_greater_than = null, $valid_from_less_than = null, $valid_from_greater_than_or_equal = null, $valid_from_less_than_or_equal = null, $valid_from_equals = null, $valid_from_not_equals = null, $valid_from_specified = null, $valid_from_in = null, $valid_from_not_in = null, $valid_to_greater_than = null, $valid_to_less_than = null, $valid_to_greater_than_or_equal = null, $valid_to_less_than_or_equal = null, $valid_to_equals = null, $valid_to_not_equals = null, $valid_to_specified = null, $valid_to_in = null, $valid_to_not_in = null, $person_id_greater_than = null, $person_id_less_than = null, $person_id_greater_than_or_equal = null, $person_id_less_than_or_equal = null, $person_id_equals = null, $person_id_not_equals = null, $person_id_specified = null, $person_id_in = null, $person_id_not_in = null, $membership_type_id_greater_than = null, $membership_type_id_less_than = null, $membership_type_id_greater_than_or_equal = null, $membership_type_id_less_than_or_equal = null, $membership_type_id_equals = null, $membership_type_id_not_equals = null, $membership_type_id_specified = null, $membership_type_id_in = null, $membership_type_id_not_in = null, $membership_period_id_greater_than = null, $membership_period_id_less_than = null, $membership_period_id_greater_than_or_equal = null, $membership_period_id_less_than_or_equal = null, $membership_period_id_equals = null, $membership_period_id_not_equals = null, $membership_period_id_specified = null, $membership_period_id_in = null, $membership_period_id_not_in = null, $criteria_id_greater_than = null, $criteria_id_less_than = null, $criteria_id_greater_than_or_equal = null, $criteria_id_less_than_or_equal = null, $criteria_id_equals = null, $criteria_id_not_equals = null, $criteria_id_specified = null, $criteria_id_in = null, $criteria_id_not_in = null, $order_id_greater_than = null, $order_id_less_than = null, $order_id_greater_than_or_equal = null, $order_id_less_than_or_equal = null, $order_id_equals = null, $order_id_not_equals = null, $order_id_specified = null, $order_id_in = null, $order_id_not_in = null, $number_id_greater_than = null, $number_id_less_than = null, $number_id_greater_than_or_equal = null, $number_id_less_than_or_equal = null, $number_id_equals = null, $number_id_not_equals = null, $number_id_specified = null, $number_id_in = null, $number_id_not_in = null, $distinct = null, string $contentType = self::contentTypes['getAllMemberships'][0])
    {
        list($response) = $this->getAllMembershipsWithHttpInfo($pageable, $id_greater_than, $id_less_than, $id_greater_than_or_equal, $id_less_than_or_equal, $id_equals, $id_not_equals, $id_specified, $id_in, $id_not_in, $first_name_contains, $first_name_does_not_contain, $first_name_equals, $first_name_not_equals, $first_name_specified, $first_name_in, $first_name_not_in, $last_name_contains, $last_name_does_not_contain, $last_name_equals, $last_name_not_equals, $last_name_specified, $last_name_in, $last_name_not_in, $id_number_contains, $id_number_does_not_contain, $id_number_equals, $id_number_not_equals, $id_number_specified, $id_number_in, $id_number_not_in, $other_number_contains, $other_number_does_not_contain, $other_number_equals, $other_number_not_equals, $other_number_specified, $other_number_in, $other_number_not_in, $dob_greater_than, $dob_less_than, $dob_greater_than_or_equal, $dob_less_than_or_equal, $dob_equals, $dob_not_equals, $dob_specified, $dob_in, $dob_not_in, $status_equals, $status_not_equals, $status_specified, $status_in, $status_not_in, $valid_from_greater_than, $valid_from_less_than, $valid_from_greater_than_or_equal, $valid_from_less_than_or_equal, $valid_from_equals, $valid_from_not_equals, $valid_from_specified, $valid_from_in, $valid_from_not_in, $valid_to_greater_than, $valid_to_less_than, $valid_to_greater_than_or_equal, $valid_to_less_than_or_equal, $valid_to_equals, $valid_to_not_equals, $valid_to_specified, $valid_to_in, $valid_to_not_in, $person_id_greater_than, $person_id_less_than, $person_id_greater_than_or_equal, $person_id_less_than_or_equal, $person_id_equals, $person_id_not_equals, $person_id_specified, $person_id_in, $person_id_not_in, $membership_type_id_greater_than, $membership_type_id_less_than, $membership_type_id_greater_than_or_equal, $membership_type_id_less_than_or_equal, $membership_type_id_equals, $membership_type_id_not_equals, $membership_type_id_specified, $membership_type_id_in, $membership_type_id_not_in, $membership_period_id_greater_than, $membership_period_id_less_than, $membership_period_id_greater_than_or_equal, $membership_period_id_less_than_or_equal, $membership_period_id_equals, $membership_period_id_not_equals, $membership_period_id_specified, $membership_period_id_in, $membership_period_id_not_in, $criteria_id_greater_than, $criteria_id_less_than, $criteria_id_greater_than_or_equal, $criteria_id_less_than_or_equal, $criteria_id_equals, $criteria_id_not_equals, $criteria_id_specified, $criteria_id_in, $criteria_id_not_in, $order_id_greater_than, $order_id_less_than, $order_id_greater_than_or_equal, $order_id_less_than_or_equal, $order_id_equals, $order_id_not_equals, $order_id_specified, $order_id_in, $order_id_not_in, $number_id_greater_than, $number_id_less_than, $number_id_greater_than_or_equal, $number_id_less_than_or_equal, $number_id_equals, $number_id_not_equals, $number_id_specified, $number_id_in, $number_id_not_in, $distinct, $contentType);
        return $response;
    }

    /**
     * Operation getAllMembershipsWithHttpInfo
     *
     * @param  Pageable $pageable (required)
     * @param  int $id_greater_than (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_equals (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int[] $id_in (optional)
     * @param  int[] $id_not_in (optional)
     * @param  string $first_name_contains (optional)
     * @param  string $first_name_does_not_contain (optional)
     * @param  string $first_name_equals (optional)
     * @param  string $first_name_not_equals (optional)
     * @param  bool $first_name_specified (optional)
     * @param  string[] $first_name_in (optional)
     * @param  string[] $first_name_not_in (optional)
     * @param  string $last_name_contains (optional)
     * @param  string $last_name_does_not_contain (optional)
     * @param  string $last_name_equals (optional)
     * @param  string $last_name_not_equals (optional)
     * @param  bool $last_name_specified (optional)
     * @param  string[] $last_name_in (optional)
     * @param  string[] $last_name_not_in (optional)
     * @param  string $id_number_contains (optional)
     * @param  string $id_number_does_not_contain (optional)
     * @param  string $id_number_equals (optional)
     * @param  string $id_number_not_equals (optional)
     * @param  bool $id_number_specified (optional)
     * @param  string[] $id_number_in (optional)
     * @param  string[] $id_number_not_in (optional)
     * @param  string $other_number_contains (optional)
     * @param  string $other_number_does_not_contain (optional)
     * @param  string $other_number_equals (optional)
     * @param  string $other_number_not_equals (optional)
     * @param  bool $other_number_specified (optional)
     * @param  string[] $other_number_in (optional)
     * @param  string[] $other_number_not_in (optional)
     * @param  \DateTime $dob_greater_than (optional)
     * @param  \DateTime $dob_less_than (optional)
     * @param  \DateTime $dob_greater_than_or_equal (optional)
     * @param  \DateTime $dob_less_than_or_equal (optional)
     * @param  \DateTime $dob_equals (optional)
     * @param  \DateTime $dob_not_equals (optional)
     * @param  bool $dob_specified (optional)
     * @param  \DateTime[] $dob_in (optional)
     * @param  \DateTime[] $dob_not_in (optional)
     * @param  string $status_equals (optional)
     * @param  string $status_not_equals (optional)
     * @param  bool $status_specified (optional)
     * @param  string[] $status_in (optional)
     * @param  string[] $status_not_in (optional)
     * @param  \DateTime $valid_from_greater_than (optional)
     * @param  \DateTime $valid_from_less_than (optional)
     * @param  \DateTime $valid_from_greater_than_or_equal (optional)
     * @param  \DateTime $valid_from_less_than_or_equal (optional)
     * @param  \DateTime $valid_from_equals (optional)
     * @param  \DateTime $valid_from_not_equals (optional)
     * @param  bool $valid_from_specified (optional)
     * @param  \DateTime[] $valid_from_in (optional)
     * @param  \DateTime[] $valid_from_not_in (optional)
     * @param  \DateTime $valid_to_greater_than (optional)
     * @param  \DateTime $valid_to_less_than (optional)
     * @param  \DateTime $valid_to_greater_than_or_equal (optional)
     * @param  \DateTime $valid_to_less_than_or_equal (optional)
     * @param  \DateTime $valid_to_equals (optional)
     * @param  \DateTime $valid_to_not_equals (optional)
     * @param  bool $valid_to_specified (optional)
     * @param  \DateTime[] $valid_to_in (optional)
     * @param  \DateTime[] $valid_to_not_in (optional)
     * @param  int $person_id_greater_than (optional)
     * @param  int $person_id_less_than (optional)
     * @param  int $person_id_greater_than_or_equal (optional)
     * @param  int $person_id_less_than_or_equal (optional)
     * @param  int $person_id_equals (optional)
     * @param  int $person_id_not_equals (optional)
     * @param  bool $person_id_specified (optional)
     * @param  int[] $person_id_in (optional)
     * @param  int[] $person_id_not_in (optional)
     * @param  int $membership_type_id_greater_than (optional)
     * @param  int $membership_type_id_less_than (optional)
     * @param  int $membership_type_id_greater_than_or_equal (optional)
     * @param  int $membership_type_id_less_than_or_equal (optional)
     * @param  int $membership_type_id_equals (optional)
     * @param  int $membership_type_id_not_equals (optional)
     * @param  bool $membership_type_id_specified (optional)
     * @param  int[] $membership_type_id_in (optional)
     * @param  int[] $membership_type_id_not_in (optional)
     * @param  int $membership_period_id_greater_than (optional)
     * @param  int $membership_period_id_less_than (optional)
     * @param  int $membership_period_id_greater_than_or_equal (optional)
     * @param  int $membership_period_id_less_than_or_equal (optional)
     * @param  int $membership_period_id_equals (optional)
     * @param  int $membership_period_id_not_equals (optional)
     * @param  bool $membership_period_id_specified (optional)
     * @param  int[] $membership_period_id_in (optional)
     * @param  int[] $membership_period_id_not_in (optional)
     * @param  int $criteria_id_greater_than (optional)
     * @param  int $criteria_id_less_than (optional)
     * @param  int $criteria_id_greater_than_or_equal (optional)
     * @param  int $criteria_id_less_than_or_equal (optional)
     * @param  int $criteria_id_equals (optional)
     * @param  int $criteria_id_not_equals (optional)
     * @param  bool $criteria_id_specified (optional)
     * @param  int[] $criteria_id_in (optional)
     * @param  int[] $criteria_id_not_in (optional)
     * @param  int $order_id_greater_than (optional)
     * @param  int $order_id_less_than (optional)
     * @param  int $order_id_greater_than_or_equal (optional)
     * @param  int $order_id_less_than_or_equal (optional)
     * @param  int $order_id_equals (optional)
     * @param  int $order_id_not_equals (optional)
     * @param  bool $order_id_specified (optional)
     * @param  int[] $order_id_in (optional)
     * @param  int[] $order_id_not_in (optional)
     * @param  int $number_id_greater_than (optional)
     * @param  int $number_id_less_than (optional)
     * @param  int $number_id_greater_than_or_equal (optional)
     * @param  int $number_id_less_than_or_equal (optional)
     * @param  int $number_id_equals (optional)
     * @param  int $number_id_not_equals (optional)
     * @param  bool $number_id_specified (optional)
     * @param  int[] $number_id_in (optional)
     * @param  int[] $number_id_not_in (optional)
     * @param  bool $distinct (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllMemberships'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Idealogic\MembershipAPI\Model\MembershipDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllMembershipsWithHttpInfo($pageable, $id_greater_than = null, $id_less_than = null, $id_greater_than_or_equal = null, $id_less_than_or_equal = null, $id_equals = null, $id_not_equals = null, $id_specified = null, $id_in = null, $id_not_in = null, $first_name_contains = null, $first_name_does_not_contain = null, $first_name_equals = null, $first_name_not_equals = null, $first_name_specified = null, $first_name_in = null, $first_name_not_in = null, $last_name_contains = null, $last_name_does_not_contain = null, $last_name_equals = null, $last_name_not_equals = null, $last_name_specified = null, $last_name_in = null, $last_name_not_in = null, $id_number_contains = null, $id_number_does_not_contain = null, $id_number_equals = null, $id_number_not_equals = null, $id_number_specified = null, $id_number_in = null, $id_number_not_in = null, $other_number_contains = null, $other_number_does_not_contain = null, $other_number_equals = null, $other_number_not_equals = null, $other_number_specified = null, $other_number_in = null, $other_number_not_in = null, $dob_greater_than = null, $dob_less_than = null, $dob_greater_than_or_equal = null, $dob_less_than_or_equal = null, $dob_equals = null, $dob_not_equals = null, $dob_specified = null, $dob_in = null, $dob_not_in = null, $status_equals = null, $status_not_equals = null, $status_specified = null, $status_in = null, $status_not_in = null, $valid_from_greater_than = null, $valid_from_less_than = null, $valid_from_greater_than_or_equal = null, $valid_from_less_than_or_equal = null, $valid_from_equals = null, $valid_from_not_equals = null, $valid_from_specified = null, $valid_from_in = null, $valid_from_not_in = null, $valid_to_greater_than = null, $valid_to_less_than = null, $valid_to_greater_than_or_equal = null, $valid_to_less_than_or_equal = null, $valid_to_equals = null, $valid_to_not_equals = null, $valid_to_specified = null, $valid_to_in = null, $valid_to_not_in = null, $person_id_greater_than = null, $person_id_less_than = null, $person_id_greater_than_or_equal = null, $person_id_less_than_or_equal = null, $person_id_equals = null, $person_id_not_equals = null, $person_id_specified = null, $person_id_in = null, $person_id_not_in = null, $membership_type_id_greater_than = null, $membership_type_id_less_than = null, $membership_type_id_greater_than_or_equal = null, $membership_type_id_less_than_or_equal = null, $membership_type_id_equals = null, $membership_type_id_not_equals = null, $membership_type_id_specified = null, $membership_type_id_in = null, $membership_type_id_not_in = null, $membership_period_id_greater_than = null, $membership_period_id_less_than = null, $membership_period_id_greater_than_or_equal = null, $membership_period_id_less_than_or_equal = null, $membership_period_id_equals = null, $membership_period_id_not_equals = null, $membership_period_id_specified = null, $membership_period_id_in = null, $membership_period_id_not_in = null, $criteria_id_greater_than = null, $criteria_id_less_than = null, $criteria_id_greater_than_or_equal = null, $criteria_id_less_than_or_equal = null, $criteria_id_equals = null, $criteria_id_not_equals = null, $criteria_id_specified = null, $criteria_id_in = null, $criteria_id_not_in = null, $order_id_greater_than = null, $order_id_less_than = null, $order_id_greater_than_or_equal = null, $order_id_less_than_or_equal = null, $order_id_equals = null, $order_id_not_equals = null, $order_id_specified = null, $order_id_in = null, $order_id_not_in = null, $number_id_greater_than = null, $number_id_less_than = null, $number_id_greater_than_or_equal = null, $number_id_less_than_or_equal = null, $number_id_equals = null, $number_id_not_equals = null, $number_id_specified = null, $number_id_in = null, $number_id_not_in = null, $distinct = null, string $contentType = self::contentTypes['getAllMemberships'][0])
    {
        $request = $this->getAllMembershipsRequest($pageable, $id_greater_than, $id_less_than, $id_greater_than_or_equal, $id_less_than_or_equal, $id_equals, $id_not_equals, $id_specified, $id_in, $id_not_in, $first_name_contains, $first_name_does_not_contain, $first_name_equals, $first_name_not_equals, $first_name_specified, $first_name_in, $first_name_not_in, $last_name_contains, $last_name_does_not_contain, $last_name_equals, $last_name_not_equals, $last_name_specified, $last_name_in, $last_name_not_in, $id_number_contains, $id_number_does_not_contain, $id_number_equals, $id_number_not_equals, $id_number_specified, $id_number_in, $id_number_not_in, $other_number_contains, $other_number_does_not_contain, $other_number_equals, $other_number_not_equals, $other_number_specified, $other_number_in, $other_number_not_in, $dob_greater_than, $dob_less_than, $dob_greater_than_or_equal, $dob_less_than_or_equal, $dob_equals, $dob_not_equals, $dob_specified, $dob_in, $dob_not_in, $status_equals, $status_not_equals, $status_specified, $status_in, $status_not_in, $valid_from_greater_than, $valid_from_less_than, $valid_from_greater_than_or_equal, $valid_from_less_than_or_equal, $valid_from_equals, $valid_from_not_equals, $valid_from_specified, $valid_from_in, $valid_from_not_in, $valid_to_greater_than, $valid_to_less_than, $valid_to_greater_than_or_equal, $valid_to_less_than_or_equal, $valid_to_equals, $valid_to_not_equals, $valid_to_specified, $valid_to_in, $valid_to_not_in, $person_id_greater_than, $person_id_less_than, $person_id_greater_than_or_equal, $person_id_less_than_or_equal, $person_id_equals, $person_id_not_equals, $person_id_specified, $person_id_in, $person_id_not_in, $membership_type_id_greater_than, $membership_type_id_less_than, $membership_type_id_greater_than_or_equal, $membership_type_id_less_than_or_equal, $membership_type_id_equals, $membership_type_id_not_equals, $membership_type_id_specified, $membership_type_id_in, $membership_type_id_not_in, $membership_period_id_greater_than, $membership_period_id_less_than, $membership_period_id_greater_than_or_equal, $membership_period_id_less_than_or_equal, $membership_period_id_equals, $membership_period_id_not_equals, $membership_period_id_specified, $membership_period_id_in, $membership_period_id_not_in, $criteria_id_greater_than, $criteria_id_less_than, $criteria_id_greater_than_or_equal, $criteria_id_less_than_or_equal, $criteria_id_equals, $criteria_id_not_equals, $criteria_id_specified, $criteria_id_in, $criteria_id_not_in, $order_id_greater_than, $order_id_less_than, $order_id_greater_than_or_equal, $order_id_less_than_or_equal, $order_id_equals, $order_id_not_equals, $order_id_specified, $order_id_in, $order_id_not_in, $number_id_greater_than, $number_id_less_than, $number_id_greater_than_or_equal, $number_id_less_than_or_equal, $number_id_equals, $number_id_not_equals, $number_id_specified, $number_id_in, $number_id_not_in, $distinct, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Idealogic\MembershipAPI\Model\MembershipDTO[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Idealogic\MembershipAPI\Model\MembershipDTO[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Idealogic\MembershipAPI\Model\MembershipDTO[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Idealogic\MembershipAPI\Model\MembershipDTO[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Idealogic\MembershipAPI\Model\MembershipDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllMembershipsAsync
     *
     * @param  Pageable $pageable (required)
     * @param  int $id_greater_than (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_equals (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int[] $id_in (optional)
     * @param  int[] $id_not_in (optional)
     * @param  string $first_name_contains (optional)
     * @param  string $first_name_does_not_contain (optional)
     * @param  string $first_name_equals (optional)
     * @param  string $first_name_not_equals (optional)
     * @param  bool $first_name_specified (optional)
     * @param  string[] $first_name_in (optional)
     * @param  string[] $first_name_not_in (optional)
     * @param  string $last_name_contains (optional)
     * @param  string $last_name_does_not_contain (optional)
     * @param  string $last_name_equals (optional)
     * @param  string $last_name_not_equals (optional)
     * @param  bool $last_name_specified (optional)
     * @param  string[] $last_name_in (optional)
     * @param  string[] $last_name_not_in (optional)
     * @param  string $id_number_contains (optional)
     * @param  string $id_number_does_not_contain (optional)
     * @param  string $id_number_equals (optional)
     * @param  string $id_number_not_equals (optional)
     * @param  bool $id_number_specified (optional)
     * @param  string[] $id_number_in (optional)
     * @param  string[] $id_number_not_in (optional)
     * @param  string $other_number_contains (optional)
     * @param  string $other_number_does_not_contain (optional)
     * @param  string $other_number_equals (optional)
     * @param  string $other_number_not_equals (optional)
     * @param  bool $other_number_specified (optional)
     * @param  string[] $other_number_in (optional)
     * @param  string[] $other_number_not_in (optional)
     * @param  \DateTime $dob_greater_than (optional)
     * @param  \DateTime $dob_less_than (optional)
     * @param  \DateTime $dob_greater_than_or_equal (optional)
     * @param  \DateTime $dob_less_than_or_equal (optional)
     * @param  \DateTime $dob_equals (optional)
     * @param  \DateTime $dob_not_equals (optional)
     * @param  bool $dob_specified (optional)
     * @param  \DateTime[] $dob_in (optional)
     * @param  \DateTime[] $dob_not_in (optional)
     * @param  string $status_equals (optional)
     * @param  string $status_not_equals (optional)
     * @param  bool $status_specified (optional)
     * @param  string[] $status_in (optional)
     * @param  string[] $status_not_in (optional)
     * @param  \DateTime $valid_from_greater_than (optional)
     * @param  \DateTime $valid_from_less_than (optional)
     * @param  \DateTime $valid_from_greater_than_or_equal (optional)
     * @param  \DateTime $valid_from_less_than_or_equal (optional)
     * @param  \DateTime $valid_from_equals (optional)
     * @param  \DateTime $valid_from_not_equals (optional)
     * @param  bool $valid_from_specified (optional)
     * @param  \DateTime[] $valid_from_in (optional)
     * @param  \DateTime[] $valid_from_not_in (optional)
     * @param  \DateTime $valid_to_greater_than (optional)
     * @param  \DateTime $valid_to_less_than (optional)
     * @param  \DateTime $valid_to_greater_than_or_equal (optional)
     * @param  \DateTime $valid_to_less_than_or_equal (optional)
     * @param  \DateTime $valid_to_equals (optional)
     * @param  \DateTime $valid_to_not_equals (optional)
     * @param  bool $valid_to_specified (optional)
     * @param  \DateTime[] $valid_to_in (optional)
     * @param  \DateTime[] $valid_to_not_in (optional)
     * @param  int $person_id_greater_than (optional)
     * @param  int $person_id_less_than (optional)
     * @param  int $person_id_greater_than_or_equal (optional)
     * @param  int $person_id_less_than_or_equal (optional)
     * @param  int $person_id_equals (optional)
     * @param  int $person_id_not_equals (optional)
     * @param  bool $person_id_specified (optional)
     * @param  int[] $person_id_in (optional)
     * @param  int[] $person_id_not_in (optional)
     * @param  int $membership_type_id_greater_than (optional)
     * @param  int $membership_type_id_less_than (optional)
     * @param  int $membership_type_id_greater_than_or_equal (optional)
     * @param  int $membership_type_id_less_than_or_equal (optional)
     * @param  int $membership_type_id_equals (optional)
     * @param  int $membership_type_id_not_equals (optional)
     * @param  bool $membership_type_id_specified (optional)
     * @param  int[] $membership_type_id_in (optional)
     * @param  int[] $membership_type_id_not_in (optional)
     * @param  int $membership_period_id_greater_than (optional)
     * @param  int $membership_period_id_less_than (optional)
     * @param  int $membership_period_id_greater_than_or_equal (optional)
     * @param  int $membership_period_id_less_than_or_equal (optional)
     * @param  int $membership_period_id_equals (optional)
     * @param  int $membership_period_id_not_equals (optional)
     * @param  bool $membership_period_id_specified (optional)
     * @param  int[] $membership_period_id_in (optional)
     * @param  int[] $membership_period_id_not_in (optional)
     * @param  int $criteria_id_greater_than (optional)
     * @param  int $criteria_id_less_than (optional)
     * @param  int $criteria_id_greater_than_or_equal (optional)
     * @param  int $criteria_id_less_than_or_equal (optional)
     * @param  int $criteria_id_equals (optional)
     * @param  int $criteria_id_not_equals (optional)
     * @param  bool $criteria_id_specified (optional)
     * @param  int[] $criteria_id_in (optional)
     * @param  int[] $criteria_id_not_in (optional)
     * @param  int $order_id_greater_than (optional)
     * @param  int $order_id_less_than (optional)
     * @param  int $order_id_greater_than_or_equal (optional)
     * @param  int $order_id_less_than_or_equal (optional)
     * @param  int $order_id_equals (optional)
     * @param  int $order_id_not_equals (optional)
     * @param  bool $order_id_specified (optional)
     * @param  int[] $order_id_in (optional)
     * @param  int[] $order_id_not_in (optional)
     * @param  int $number_id_greater_than (optional)
     * @param  int $number_id_less_than (optional)
     * @param  int $number_id_greater_than_or_equal (optional)
     * @param  int $number_id_less_than_or_equal (optional)
     * @param  int $number_id_equals (optional)
     * @param  int $number_id_not_equals (optional)
     * @param  bool $number_id_specified (optional)
     * @param  int[] $number_id_in (optional)
     * @param  int[] $number_id_not_in (optional)
     * @param  bool $distinct (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllMemberships'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllMembershipsAsync($pageable, $id_greater_than = null, $id_less_than = null, $id_greater_than_or_equal = null, $id_less_than_or_equal = null, $id_equals = null, $id_not_equals = null, $id_specified = null, $id_in = null, $id_not_in = null, $first_name_contains = null, $first_name_does_not_contain = null, $first_name_equals = null, $first_name_not_equals = null, $first_name_specified = null, $first_name_in = null, $first_name_not_in = null, $last_name_contains = null, $last_name_does_not_contain = null, $last_name_equals = null, $last_name_not_equals = null, $last_name_specified = null, $last_name_in = null, $last_name_not_in = null, $id_number_contains = null, $id_number_does_not_contain = null, $id_number_equals = null, $id_number_not_equals = null, $id_number_specified = null, $id_number_in = null, $id_number_not_in = null, $other_number_contains = null, $other_number_does_not_contain = null, $other_number_equals = null, $other_number_not_equals = null, $other_number_specified = null, $other_number_in = null, $other_number_not_in = null, $dob_greater_than = null, $dob_less_than = null, $dob_greater_than_or_equal = null, $dob_less_than_or_equal = null, $dob_equals = null, $dob_not_equals = null, $dob_specified = null, $dob_in = null, $dob_not_in = null, $status_equals = null, $status_not_equals = null, $status_specified = null, $status_in = null, $status_not_in = null, $valid_from_greater_than = null, $valid_from_less_than = null, $valid_from_greater_than_or_equal = null, $valid_from_less_than_or_equal = null, $valid_from_equals = null, $valid_from_not_equals = null, $valid_from_specified = null, $valid_from_in = null, $valid_from_not_in = null, $valid_to_greater_than = null, $valid_to_less_than = null, $valid_to_greater_than_or_equal = null, $valid_to_less_than_or_equal = null, $valid_to_equals = null, $valid_to_not_equals = null, $valid_to_specified = null, $valid_to_in = null, $valid_to_not_in = null, $person_id_greater_than = null, $person_id_less_than = null, $person_id_greater_than_or_equal = null, $person_id_less_than_or_equal = null, $person_id_equals = null, $person_id_not_equals = null, $person_id_specified = null, $person_id_in = null, $person_id_not_in = null, $membership_type_id_greater_than = null, $membership_type_id_less_than = null, $membership_type_id_greater_than_or_equal = null, $membership_type_id_less_than_or_equal = null, $membership_type_id_equals = null, $membership_type_id_not_equals = null, $membership_type_id_specified = null, $membership_type_id_in = null, $membership_type_id_not_in = null, $membership_period_id_greater_than = null, $membership_period_id_less_than = null, $membership_period_id_greater_than_or_equal = null, $membership_period_id_less_than_or_equal = null, $membership_period_id_equals = null, $membership_period_id_not_equals = null, $membership_period_id_specified = null, $membership_period_id_in = null, $membership_period_id_not_in = null, $criteria_id_greater_than = null, $criteria_id_less_than = null, $criteria_id_greater_than_or_equal = null, $criteria_id_less_than_or_equal = null, $criteria_id_equals = null, $criteria_id_not_equals = null, $criteria_id_specified = null, $criteria_id_in = null, $criteria_id_not_in = null, $order_id_greater_than = null, $order_id_less_than = null, $order_id_greater_than_or_equal = null, $order_id_less_than_or_equal = null, $order_id_equals = null, $order_id_not_equals = null, $order_id_specified = null, $order_id_in = null, $order_id_not_in = null, $number_id_greater_than = null, $number_id_less_than = null, $number_id_greater_than_or_equal = null, $number_id_less_than_or_equal = null, $number_id_equals = null, $number_id_not_equals = null, $number_id_specified = null, $number_id_in = null, $number_id_not_in = null, $distinct = null, string $contentType = self::contentTypes['getAllMemberships'][0])
    {
        return $this->getAllMembershipsAsyncWithHttpInfo($pageable, $id_greater_than, $id_less_than, $id_greater_than_or_equal, $id_less_than_or_equal, $id_equals, $id_not_equals, $id_specified, $id_in, $id_not_in, $first_name_contains, $first_name_does_not_contain, $first_name_equals, $first_name_not_equals, $first_name_specified, $first_name_in, $first_name_not_in, $last_name_contains, $last_name_does_not_contain, $last_name_equals, $last_name_not_equals, $last_name_specified, $last_name_in, $last_name_not_in, $id_number_contains, $id_number_does_not_contain, $id_number_equals, $id_number_not_equals, $id_number_specified, $id_number_in, $id_number_not_in, $other_number_contains, $other_number_does_not_contain, $other_number_equals, $other_number_not_equals, $other_number_specified, $other_number_in, $other_number_not_in, $dob_greater_than, $dob_less_than, $dob_greater_than_or_equal, $dob_less_than_or_equal, $dob_equals, $dob_not_equals, $dob_specified, $dob_in, $dob_not_in, $status_equals, $status_not_equals, $status_specified, $status_in, $status_not_in, $valid_from_greater_than, $valid_from_less_than, $valid_from_greater_than_or_equal, $valid_from_less_than_or_equal, $valid_from_equals, $valid_from_not_equals, $valid_from_specified, $valid_from_in, $valid_from_not_in, $valid_to_greater_than, $valid_to_less_than, $valid_to_greater_than_or_equal, $valid_to_less_than_or_equal, $valid_to_equals, $valid_to_not_equals, $valid_to_specified, $valid_to_in, $valid_to_not_in, $person_id_greater_than, $person_id_less_than, $person_id_greater_than_or_equal, $person_id_less_than_or_equal, $person_id_equals, $person_id_not_equals, $person_id_specified, $person_id_in, $person_id_not_in, $membership_type_id_greater_than, $membership_type_id_less_than, $membership_type_id_greater_than_or_equal, $membership_type_id_less_than_or_equal, $membership_type_id_equals, $membership_type_id_not_equals, $membership_type_id_specified, $membership_type_id_in, $membership_type_id_not_in, $membership_period_id_greater_than, $membership_period_id_less_than, $membership_period_id_greater_than_or_equal, $membership_period_id_less_than_or_equal, $membership_period_id_equals, $membership_period_id_not_equals, $membership_period_id_specified, $membership_period_id_in, $membership_period_id_not_in, $criteria_id_greater_than, $criteria_id_less_than, $criteria_id_greater_than_or_equal, $criteria_id_less_than_or_equal, $criteria_id_equals, $criteria_id_not_equals, $criteria_id_specified, $criteria_id_in, $criteria_id_not_in, $order_id_greater_than, $order_id_less_than, $order_id_greater_than_or_equal, $order_id_less_than_or_equal, $order_id_equals, $order_id_not_equals, $order_id_specified, $order_id_in, $order_id_not_in, $number_id_greater_than, $number_id_less_than, $number_id_greater_than_or_equal, $number_id_less_than_or_equal, $number_id_equals, $number_id_not_equals, $number_id_specified, $number_id_in, $number_id_not_in, $distinct, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllMembershipsAsyncWithHttpInfo
     *
     * @param  Pageable $pageable (required)
     * @param  int $id_greater_than (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_equals (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int[] $id_in (optional)
     * @param  int[] $id_not_in (optional)
     * @param  string $first_name_contains (optional)
     * @param  string $first_name_does_not_contain (optional)
     * @param  string $first_name_equals (optional)
     * @param  string $first_name_not_equals (optional)
     * @param  bool $first_name_specified (optional)
     * @param  string[] $first_name_in (optional)
     * @param  string[] $first_name_not_in (optional)
     * @param  string $last_name_contains (optional)
     * @param  string $last_name_does_not_contain (optional)
     * @param  string $last_name_equals (optional)
     * @param  string $last_name_not_equals (optional)
     * @param  bool $last_name_specified (optional)
     * @param  string[] $last_name_in (optional)
     * @param  string[] $last_name_not_in (optional)
     * @param  string $id_number_contains (optional)
     * @param  string $id_number_does_not_contain (optional)
     * @param  string $id_number_equals (optional)
     * @param  string $id_number_not_equals (optional)
     * @param  bool $id_number_specified (optional)
     * @param  string[] $id_number_in (optional)
     * @param  string[] $id_number_not_in (optional)
     * @param  string $other_number_contains (optional)
     * @param  string $other_number_does_not_contain (optional)
     * @param  string $other_number_equals (optional)
     * @param  string $other_number_not_equals (optional)
     * @param  bool $other_number_specified (optional)
     * @param  string[] $other_number_in (optional)
     * @param  string[] $other_number_not_in (optional)
     * @param  \DateTime $dob_greater_than (optional)
     * @param  \DateTime $dob_less_than (optional)
     * @param  \DateTime $dob_greater_than_or_equal (optional)
     * @param  \DateTime $dob_less_than_or_equal (optional)
     * @param  \DateTime $dob_equals (optional)
     * @param  \DateTime $dob_not_equals (optional)
     * @param  bool $dob_specified (optional)
     * @param  \DateTime[] $dob_in (optional)
     * @param  \DateTime[] $dob_not_in (optional)
     * @param  string $status_equals (optional)
     * @param  string $status_not_equals (optional)
     * @param  bool $status_specified (optional)
     * @param  string[] $status_in (optional)
     * @param  string[] $status_not_in (optional)
     * @param  \DateTime $valid_from_greater_than (optional)
     * @param  \DateTime $valid_from_less_than (optional)
     * @param  \DateTime $valid_from_greater_than_or_equal (optional)
     * @param  \DateTime $valid_from_less_than_or_equal (optional)
     * @param  \DateTime $valid_from_equals (optional)
     * @param  \DateTime $valid_from_not_equals (optional)
     * @param  bool $valid_from_specified (optional)
     * @param  \DateTime[] $valid_from_in (optional)
     * @param  \DateTime[] $valid_from_not_in (optional)
     * @param  \DateTime $valid_to_greater_than (optional)
     * @param  \DateTime $valid_to_less_than (optional)
     * @param  \DateTime $valid_to_greater_than_or_equal (optional)
     * @param  \DateTime $valid_to_less_than_or_equal (optional)
     * @param  \DateTime $valid_to_equals (optional)
     * @param  \DateTime $valid_to_not_equals (optional)
     * @param  bool $valid_to_specified (optional)
     * @param  \DateTime[] $valid_to_in (optional)
     * @param  \DateTime[] $valid_to_not_in (optional)
     * @param  int $person_id_greater_than (optional)
     * @param  int $person_id_less_than (optional)
     * @param  int $person_id_greater_than_or_equal (optional)
     * @param  int $person_id_less_than_or_equal (optional)
     * @param  int $person_id_equals (optional)
     * @param  int $person_id_not_equals (optional)
     * @param  bool $person_id_specified (optional)
     * @param  int[] $person_id_in (optional)
     * @param  int[] $person_id_not_in (optional)
     * @param  int $membership_type_id_greater_than (optional)
     * @param  int $membership_type_id_less_than (optional)
     * @param  int $membership_type_id_greater_than_or_equal (optional)
     * @param  int $membership_type_id_less_than_or_equal (optional)
     * @param  int $membership_type_id_equals (optional)
     * @param  int $membership_type_id_not_equals (optional)
     * @param  bool $membership_type_id_specified (optional)
     * @param  int[] $membership_type_id_in (optional)
     * @param  int[] $membership_type_id_not_in (optional)
     * @param  int $membership_period_id_greater_than (optional)
     * @param  int $membership_period_id_less_than (optional)
     * @param  int $membership_period_id_greater_than_or_equal (optional)
     * @param  int $membership_period_id_less_than_or_equal (optional)
     * @param  int $membership_period_id_equals (optional)
     * @param  int $membership_period_id_not_equals (optional)
     * @param  bool $membership_period_id_specified (optional)
     * @param  int[] $membership_period_id_in (optional)
     * @param  int[] $membership_period_id_not_in (optional)
     * @param  int $criteria_id_greater_than (optional)
     * @param  int $criteria_id_less_than (optional)
     * @param  int $criteria_id_greater_than_or_equal (optional)
     * @param  int $criteria_id_less_than_or_equal (optional)
     * @param  int $criteria_id_equals (optional)
     * @param  int $criteria_id_not_equals (optional)
     * @param  bool $criteria_id_specified (optional)
     * @param  int[] $criteria_id_in (optional)
     * @param  int[] $criteria_id_not_in (optional)
     * @param  int $order_id_greater_than (optional)
     * @param  int $order_id_less_than (optional)
     * @param  int $order_id_greater_than_or_equal (optional)
     * @param  int $order_id_less_than_or_equal (optional)
     * @param  int $order_id_equals (optional)
     * @param  int $order_id_not_equals (optional)
     * @param  bool $order_id_specified (optional)
     * @param  int[] $order_id_in (optional)
     * @param  int[] $order_id_not_in (optional)
     * @param  int $number_id_greater_than (optional)
     * @param  int $number_id_less_than (optional)
     * @param  int $number_id_greater_than_or_equal (optional)
     * @param  int $number_id_less_than_or_equal (optional)
     * @param  int $number_id_equals (optional)
     * @param  int $number_id_not_equals (optional)
     * @param  bool $number_id_specified (optional)
     * @param  int[] $number_id_in (optional)
     * @param  int[] $number_id_not_in (optional)
     * @param  bool $distinct (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllMemberships'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllMembershipsAsyncWithHttpInfo($pageable, $id_greater_than = null, $id_less_than = null, $id_greater_than_or_equal = null, $id_less_than_or_equal = null, $id_equals = null, $id_not_equals = null, $id_specified = null, $id_in = null, $id_not_in = null, $first_name_contains = null, $first_name_does_not_contain = null, $first_name_equals = null, $first_name_not_equals = null, $first_name_specified = null, $first_name_in = null, $first_name_not_in = null, $last_name_contains = null, $last_name_does_not_contain = null, $last_name_equals = null, $last_name_not_equals = null, $last_name_specified = null, $last_name_in = null, $last_name_not_in = null, $id_number_contains = null, $id_number_does_not_contain = null, $id_number_equals = null, $id_number_not_equals = null, $id_number_specified = null, $id_number_in = null, $id_number_not_in = null, $other_number_contains = null, $other_number_does_not_contain = null, $other_number_equals = null, $other_number_not_equals = null, $other_number_specified = null, $other_number_in = null, $other_number_not_in = null, $dob_greater_than = null, $dob_less_than = null, $dob_greater_than_or_equal = null, $dob_less_than_or_equal = null, $dob_equals = null, $dob_not_equals = null, $dob_specified = null, $dob_in = null, $dob_not_in = null, $status_equals = null, $status_not_equals = null, $status_specified = null, $status_in = null, $status_not_in = null, $valid_from_greater_than = null, $valid_from_less_than = null, $valid_from_greater_than_or_equal = null, $valid_from_less_than_or_equal = null, $valid_from_equals = null, $valid_from_not_equals = null, $valid_from_specified = null, $valid_from_in = null, $valid_from_not_in = null, $valid_to_greater_than = null, $valid_to_less_than = null, $valid_to_greater_than_or_equal = null, $valid_to_less_than_or_equal = null, $valid_to_equals = null, $valid_to_not_equals = null, $valid_to_specified = null, $valid_to_in = null, $valid_to_not_in = null, $person_id_greater_than = null, $person_id_less_than = null, $person_id_greater_than_or_equal = null, $person_id_less_than_or_equal = null, $person_id_equals = null, $person_id_not_equals = null, $person_id_specified = null, $person_id_in = null, $person_id_not_in = null, $membership_type_id_greater_than = null, $membership_type_id_less_than = null, $membership_type_id_greater_than_or_equal = null, $membership_type_id_less_than_or_equal = null, $membership_type_id_equals = null, $membership_type_id_not_equals = null, $membership_type_id_specified = null, $membership_type_id_in = null, $membership_type_id_not_in = null, $membership_period_id_greater_than = null, $membership_period_id_less_than = null, $membership_period_id_greater_than_or_equal = null, $membership_period_id_less_than_or_equal = null, $membership_period_id_equals = null, $membership_period_id_not_equals = null, $membership_period_id_specified = null, $membership_period_id_in = null, $membership_period_id_not_in = null, $criteria_id_greater_than = null, $criteria_id_less_than = null, $criteria_id_greater_than_or_equal = null, $criteria_id_less_than_or_equal = null, $criteria_id_equals = null, $criteria_id_not_equals = null, $criteria_id_specified = null, $criteria_id_in = null, $criteria_id_not_in = null, $order_id_greater_than = null, $order_id_less_than = null, $order_id_greater_than_or_equal = null, $order_id_less_than_or_equal = null, $order_id_equals = null, $order_id_not_equals = null, $order_id_specified = null, $order_id_in = null, $order_id_not_in = null, $number_id_greater_than = null, $number_id_less_than = null, $number_id_greater_than_or_equal = null, $number_id_less_than_or_equal = null, $number_id_equals = null, $number_id_not_equals = null, $number_id_specified = null, $number_id_in = null, $number_id_not_in = null, $distinct = null, string $contentType = self::contentTypes['getAllMemberships'][0])
    {
        $returnType = '\Idealogic\MembershipAPI\Model\MembershipDTO[]';
        $request = $this->getAllMembershipsRequest($pageable, $id_greater_than, $id_less_than, $id_greater_than_or_equal, $id_less_than_or_equal, $id_equals, $id_not_equals, $id_specified, $id_in, $id_not_in, $first_name_contains, $first_name_does_not_contain, $first_name_equals, $first_name_not_equals, $first_name_specified, $first_name_in, $first_name_not_in, $last_name_contains, $last_name_does_not_contain, $last_name_equals, $last_name_not_equals, $last_name_specified, $last_name_in, $last_name_not_in, $id_number_contains, $id_number_does_not_contain, $id_number_equals, $id_number_not_equals, $id_number_specified, $id_number_in, $id_number_not_in, $other_number_contains, $other_number_does_not_contain, $other_number_equals, $other_number_not_equals, $other_number_specified, $other_number_in, $other_number_not_in, $dob_greater_than, $dob_less_than, $dob_greater_than_or_equal, $dob_less_than_or_equal, $dob_equals, $dob_not_equals, $dob_specified, $dob_in, $dob_not_in, $status_equals, $status_not_equals, $status_specified, $status_in, $status_not_in, $valid_from_greater_than, $valid_from_less_than, $valid_from_greater_than_or_equal, $valid_from_less_than_or_equal, $valid_from_equals, $valid_from_not_equals, $valid_from_specified, $valid_from_in, $valid_from_not_in, $valid_to_greater_than, $valid_to_less_than, $valid_to_greater_than_or_equal, $valid_to_less_than_or_equal, $valid_to_equals, $valid_to_not_equals, $valid_to_specified, $valid_to_in, $valid_to_not_in, $person_id_greater_than, $person_id_less_than, $person_id_greater_than_or_equal, $person_id_less_than_or_equal, $person_id_equals, $person_id_not_equals, $person_id_specified, $person_id_in, $person_id_not_in, $membership_type_id_greater_than, $membership_type_id_less_than, $membership_type_id_greater_than_or_equal, $membership_type_id_less_than_or_equal, $membership_type_id_equals, $membership_type_id_not_equals, $membership_type_id_specified, $membership_type_id_in, $membership_type_id_not_in, $membership_period_id_greater_than, $membership_period_id_less_than, $membership_period_id_greater_than_or_equal, $membership_period_id_less_than_or_equal, $membership_period_id_equals, $membership_period_id_not_equals, $membership_period_id_specified, $membership_period_id_in, $membership_period_id_not_in, $criteria_id_greater_than, $criteria_id_less_than, $criteria_id_greater_than_or_equal, $criteria_id_less_than_or_equal, $criteria_id_equals, $criteria_id_not_equals, $criteria_id_specified, $criteria_id_in, $criteria_id_not_in, $order_id_greater_than, $order_id_less_than, $order_id_greater_than_or_equal, $order_id_less_than_or_equal, $order_id_equals, $order_id_not_equals, $order_id_specified, $order_id_in, $order_id_not_in, $number_id_greater_than, $number_id_less_than, $number_id_greater_than_or_equal, $number_id_less_than_or_equal, $number_id_equals, $number_id_not_equals, $number_id_specified, $number_id_in, $number_id_not_in, $distinct, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllMemberships'
     *
     * @param  Pageable $pageable (required)
     * @param  int $id_greater_than (optional)
     * @param  int $id_less_than (optional)
     * @param  int $id_greater_than_or_equal (optional)
     * @param  int $id_less_than_or_equal (optional)
     * @param  int $id_equals (optional)
     * @param  int $id_not_equals (optional)
     * @param  bool $id_specified (optional)
     * @param  int[] $id_in (optional)
     * @param  int[] $id_not_in (optional)
     * @param  string $first_name_contains (optional)
     * @param  string $first_name_does_not_contain (optional)
     * @param  string $first_name_equals (optional)
     * @param  string $first_name_not_equals (optional)
     * @param  bool $first_name_specified (optional)
     * @param  string[] $first_name_in (optional)
     * @param  string[] $first_name_not_in (optional)
     * @param  string $last_name_contains (optional)
     * @param  string $last_name_does_not_contain (optional)
     * @param  string $last_name_equals (optional)
     * @param  string $last_name_not_equals (optional)
     * @param  bool $last_name_specified (optional)
     * @param  string[] $last_name_in (optional)
     * @param  string[] $last_name_not_in (optional)
     * @param  string $id_number_contains (optional)
     * @param  string $id_number_does_not_contain (optional)
     * @param  string $id_number_equals (optional)
     * @param  string $id_number_not_equals (optional)
     * @param  bool $id_number_specified (optional)
     * @param  string[] $id_number_in (optional)
     * @param  string[] $id_number_not_in (optional)
     * @param  string $other_number_contains (optional)
     * @param  string $other_number_does_not_contain (optional)
     * @param  string $other_number_equals (optional)
     * @param  string $other_number_not_equals (optional)
     * @param  bool $other_number_specified (optional)
     * @param  string[] $other_number_in (optional)
     * @param  string[] $other_number_not_in (optional)
     * @param  \DateTime $dob_greater_than (optional)
     * @param  \DateTime $dob_less_than (optional)
     * @param  \DateTime $dob_greater_than_or_equal (optional)
     * @param  \DateTime $dob_less_than_or_equal (optional)
     * @param  \DateTime $dob_equals (optional)
     * @param  \DateTime $dob_not_equals (optional)
     * @param  bool $dob_specified (optional)
     * @param  \DateTime[] $dob_in (optional)
     * @param  \DateTime[] $dob_not_in (optional)
     * @param  string $status_equals (optional)
     * @param  string $status_not_equals (optional)
     * @param  bool $status_specified (optional)
     * @param  string[] $status_in (optional)
     * @param  string[] $status_not_in (optional)
     * @param  \DateTime $valid_from_greater_than (optional)
     * @param  \DateTime $valid_from_less_than (optional)
     * @param  \DateTime $valid_from_greater_than_or_equal (optional)
     * @param  \DateTime $valid_from_less_than_or_equal (optional)
     * @param  \DateTime $valid_from_equals (optional)
     * @param  \DateTime $valid_from_not_equals (optional)
     * @param  bool $valid_from_specified (optional)
     * @param  \DateTime[] $valid_from_in (optional)
     * @param  \DateTime[] $valid_from_not_in (optional)
     * @param  \DateTime $valid_to_greater_than (optional)
     * @param  \DateTime $valid_to_less_than (optional)
     * @param  \DateTime $valid_to_greater_than_or_equal (optional)
     * @param  \DateTime $valid_to_less_than_or_equal (optional)
     * @param  \DateTime $valid_to_equals (optional)
     * @param  \DateTime $valid_to_not_equals (optional)
     * @param  bool $valid_to_specified (optional)
     * @param  \DateTime[] $valid_to_in (optional)
     * @param  \DateTime[] $valid_to_not_in (optional)
     * @param  int $person_id_greater_than (optional)
     * @param  int $person_id_less_than (optional)
     * @param  int $person_id_greater_than_or_equal (optional)
     * @param  int $person_id_less_than_or_equal (optional)
     * @param  int $person_id_equals (optional)
     * @param  int $person_id_not_equals (optional)
     * @param  bool $person_id_specified (optional)
     * @param  int[] $person_id_in (optional)
     * @param  int[] $person_id_not_in (optional)
     * @param  int $membership_type_id_greater_than (optional)
     * @param  int $membership_type_id_less_than (optional)
     * @param  int $membership_type_id_greater_than_or_equal (optional)
     * @param  int $membership_type_id_less_than_or_equal (optional)
     * @param  int $membership_type_id_equals (optional)
     * @param  int $membership_type_id_not_equals (optional)
     * @param  bool $membership_type_id_specified (optional)
     * @param  int[] $membership_type_id_in (optional)
     * @param  int[] $membership_type_id_not_in (optional)
     * @param  int $membership_period_id_greater_than (optional)
     * @param  int $membership_period_id_less_than (optional)
     * @param  int $membership_period_id_greater_than_or_equal (optional)
     * @param  int $membership_period_id_less_than_or_equal (optional)
     * @param  int $membership_period_id_equals (optional)
     * @param  int $membership_period_id_not_equals (optional)
     * @param  bool $membership_period_id_specified (optional)
     * @param  int[] $membership_period_id_in (optional)
     * @param  int[] $membership_period_id_not_in (optional)
     * @param  int $criteria_id_greater_than (optional)
     * @param  int $criteria_id_less_than (optional)
     * @param  int $criteria_id_greater_than_or_equal (optional)
     * @param  int $criteria_id_less_than_or_equal (optional)
     * @param  int $criteria_id_equals (optional)
     * @param  int $criteria_id_not_equals (optional)
     * @param  bool $criteria_id_specified (optional)
     * @param  int[] $criteria_id_in (optional)
     * @param  int[] $criteria_id_not_in (optional)
     * @param  int $order_id_greater_than (optional)
     * @param  int $order_id_less_than (optional)
     * @param  int $order_id_greater_than_or_equal (optional)
     * @param  int $order_id_less_than_or_equal (optional)
     * @param  int $order_id_equals (optional)
     * @param  int $order_id_not_equals (optional)
     * @param  bool $order_id_specified (optional)
     * @param  int[] $order_id_in (optional)
     * @param  int[] $order_id_not_in (optional)
     * @param  int $number_id_greater_than (optional)
     * @param  int $number_id_less_than (optional)
     * @param  int $number_id_greater_than_or_equal (optional)
     * @param  int $number_id_less_than_or_equal (optional)
     * @param  int $number_id_equals (optional)
     * @param  int $number_id_not_equals (optional)
     * @param  bool $number_id_specified (optional)
     * @param  int[] $number_id_in (optional)
     * @param  int[] $number_id_not_in (optional)
     * @param  bool $distinct (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllMemberships'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllMembershipsRequest($pageable, $id_greater_than = null, $id_less_than = null, $id_greater_than_or_equal = null, $id_less_than_or_equal = null, $id_equals = null, $id_not_equals = null, $id_specified = null, $id_in = null, $id_not_in = null, $first_name_contains = null, $first_name_does_not_contain = null, $first_name_equals = null, $first_name_not_equals = null, $first_name_specified = null, $first_name_in = null, $first_name_not_in = null, $last_name_contains = null, $last_name_does_not_contain = null, $last_name_equals = null, $last_name_not_equals = null, $last_name_specified = null, $last_name_in = null, $last_name_not_in = null, $id_number_contains = null, $id_number_does_not_contain = null, $id_number_equals = null, $id_number_not_equals = null, $id_number_specified = null, $id_number_in = null, $id_number_not_in = null, $other_number_contains = null, $other_number_does_not_contain = null, $other_number_equals = null, $other_number_not_equals = null, $other_number_specified = null, $other_number_in = null, $other_number_not_in = null, $dob_greater_than = null, $dob_less_than = null, $dob_greater_than_or_equal = null, $dob_less_than_or_equal = null, $dob_equals = null, $dob_not_equals = null, $dob_specified = null, $dob_in = null, $dob_not_in = null, $status_equals = null, $status_not_equals = null, $status_specified = null, $status_in = null, $status_not_in = null, $valid_from_greater_than = null, $valid_from_less_than = null, $valid_from_greater_than_or_equal = null, $valid_from_less_than_or_equal = null, $valid_from_equals = null, $valid_from_not_equals = null, $valid_from_specified = null, $valid_from_in = null, $valid_from_not_in = null, $valid_to_greater_than = null, $valid_to_less_than = null, $valid_to_greater_than_or_equal = null, $valid_to_less_than_or_equal = null, $valid_to_equals = null, $valid_to_not_equals = null, $valid_to_specified = null, $valid_to_in = null, $valid_to_not_in = null, $person_id_greater_than = null, $person_id_less_than = null, $person_id_greater_than_or_equal = null, $person_id_less_than_or_equal = null, $person_id_equals = null, $person_id_not_equals = null, $person_id_specified = null, $person_id_in = null, $person_id_not_in = null, $membership_type_id_greater_than = null, $membership_type_id_less_than = null, $membership_type_id_greater_than_or_equal = null, $membership_type_id_less_than_or_equal = null, $membership_type_id_equals = null, $membership_type_id_not_equals = null, $membership_type_id_specified = null, $membership_type_id_in = null, $membership_type_id_not_in = null, $membership_period_id_greater_than = null, $membership_period_id_less_than = null, $membership_period_id_greater_than_or_equal = null, $membership_period_id_less_than_or_equal = null, $membership_period_id_equals = null, $membership_period_id_not_equals = null, $membership_period_id_specified = null, $membership_period_id_in = null, $membership_period_id_not_in = null, $criteria_id_greater_than = null, $criteria_id_less_than = null, $criteria_id_greater_than_or_equal = null, $criteria_id_less_than_or_equal = null, $criteria_id_equals = null, $criteria_id_not_equals = null, $criteria_id_specified = null, $criteria_id_in = null, $criteria_id_not_in = null, $order_id_greater_than = null, $order_id_less_than = null, $order_id_greater_than_or_equal = null, $order_id_less_than_or_equal = null, $order_id_equals = null, $order_id_not_equals = null, $order_id_specified = null, $order_id_in = null, $order_id_not_in = null, $number_id_greater_than = null, $number_id_less_than = null, $number_id_greater_than_or_equal = null, $number_id_less_than_or_equal = null, $number_id_equals = null, $number_id_not_equals = null, $number_id_specified = null, $number_id_in = null, $number_id_not_in = null, $distinct = null, string $contentType = self::contentTypes['getAllMemberships'][0])
    {

        // verify the required parameter 'pageable' is set
        if ($pageable === null || (is_array($pageable) && count($pageable) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pageable when calling getAllMemberships'
            );
        }






























































































































        $resourcePath = '/api/memberships';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_greater_than,
            'id.greaterThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_less_than,
            'id.lessThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_greater_than_or_equal,
            'id.greaterThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_less_than_or_equal,
            'id.lessThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_equals,
            'id.equals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_not_equals,
            'id.notEquals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_specified,
            'id.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_in,
            'id.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_not_in,
            'id.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $first_name_contains,
            'firstName.contains', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $first_name_does_not_contain,
            'firstName.doesNotContain', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $first_name_equals,
            'firstName.equals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $first_name_not_equals,
            'firstName.notEquals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $first_name_specified,
            'firstName.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $first_name_in,
            'firstName.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $first_name_not_in,
            'firstName.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_name_contains,
            'lastName.contains', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_name_does_not_contain,
            'lastName.doesNotContain', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_name_equals,
            'lastName.equals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_name_not_equals,
            'lastName.notEquals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_name_specified,
            'lastName.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_name_in,
            'lastName.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_name_not_in,
            'lastName.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_number_contains,
            'idNumber.contains', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_number_does_not_contain,
            'idNumber.doesNotContain', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_number_equals,
            'idNumber.equals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_number_not_equals,
            'idNumber.notEquals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_number_specified,
            'idNumber.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_number_in,
            'idNumber.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id_number_not_in,
            'idNumber.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $other_number_contains,
            'otherNumber.contains', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $other_number_does_not_contain,
            'otherNumber.doesNotContain', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $other_number_equals,
            'otherNumber.equals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $other_number_not_equals,
            'otherNumber.notEquals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $other_number_specified,
            'otherNumber.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $other_number_in,
            'otherNumber.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $other_number_not_in,
            'otherNumber.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dob_greater_than,
            'dob.greaterThan', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dob_less_than,
            'dob.lessThan', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dob_greater_than_or_equal,
            'dob.greaterThanOrEqual', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dob_less_than_or_equal,
            'dob.lessThanOrEqual', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dob_equals,
            'dob.equals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dob_not_equals,
            'dob.notEquals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dob_specified,
            'dob.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dob_in,
            'dob.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dob_not_in,
            'dob.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status_equals,
            'status.equals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status_not_equals,
            'status.notEquals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status_specified,
            'status.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status_in,
            'status.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status_not_in,
            'status.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $valid_from_greater_than,
            'validFrom.greaterThan', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $valid_from_less_than,
            'validFrom.lessThan', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $valid_from_greater_than_or_equal,
            'validFrom.greaterThanOrEqual', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $valid_from_less_than_or_equal,
            'validFrom.lessThanOrEqual', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $valid_from_equals,
            'validFrom.equals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $valid_from_not_equals,
            'validFrom.notEquals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $valid_from_specified,
            'validFrom.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $valid_from_in,
            'validFrom.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $valid_from_not_in,
            'validFrom.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $valid_to_greater_than,
            'validTo.greaterThan', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $valid_to_less_than,
            'validTo.lessThan', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $valid_to_greater_than_or_equal,
            'validTo.greaterThanOrEqual', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $valid_to_less_than_or_equal,
            'validTo.lessThanOrEqual', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $valid_to_equals,
            'validTo.equals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $valid_to_not_equals,
            'validTo.notEquals', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $valid_to_specified,
            'validTo.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $valid_to_in,
            'validTo.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $valid_to_not_in,
            'validTo.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $person_id_greater_than,
            'personId.greaterThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $person_id_less_than,
            'personId.lessThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $person_id_greater_than_or_equal,
            'personId.greaterThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $person_id_less_than_or_equal,
            'personId.lessThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $person_id_equals,
            'personId.equals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $person_id_not_equals,
            'personId.notEquals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $person_id_specified,
            'personId.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $person_id_in,
            'personId.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $person_id_not_in,
            'personId.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_type_id_greater_than,
            'membershipTypeId.greaterThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_type_id_less_than,
            'membershipTypeId.lessThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_type_id_greater_than_or_equal,
            'membershipTypeId.greaterThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_type_id_less_than_or_equal,
            'membershipTypeId.lessThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_type_id_equals,
            'membershipTypeId.equals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_type_id_not_equals,
            'membershipTypeId.notEquals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_type_id_specified,
            'membershipTypeId.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_type_id_in,
            'membershipTypeId.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_type_id_not_in,
            'membershipTypeId.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_period_id_greater_than,
            'membershipPeriodId.greaterThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_period_id_less_than,
            'membershipPeriodId.lessThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_period_id_greater_than_or_equal,
            'membershipPeriodId.greaterThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_period_id_less_than_or_equal,
            'membershipPeriodId.lessThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_period_id_equals,
            'membershipPeriodId.equals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_period_id_not_equals,
            'membershipPeriodId.notEquals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_period_id_specified,
            'membershipPeriodId.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_period_id_in,
            'membershipPeriodId.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_period_id_not_in,
            'membershipPeriodId.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $criteria_id_greater_than,
            'criteriaId.greaterThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $criteria_id_less_than,
            'criteriaId.lessThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $criteria_id_greater_than_or_equal,
            'criteriaId.greaterThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $criteria_id_less_than_or_equal,
            'criteriaId.lessThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $criteria_id_equals,
            'criteriaId.equals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $criteria_id_not_equals,
            'criteriaId.notEquals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $criteria_id_specified,
            'criteriaId.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $criteria_id_in,
            'criteriaId.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $criteria_id_not_in,
            'criteriaId.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id_greater_than,
            'orderId.greaterThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id_less_than,
            'orderId.lessThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id_greater_than_or_equal,
            'orderId.greaterThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id_less_than_or_equal,
            'orderId.lessThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id_equals,
            'orderId.equals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id_not_equals,
            'orderId.notEquals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id_specified,
            'orderId.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id_in,
            'orderId.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id_not_in,
            'orderId.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_id_greater_than,
            'numberId.greaterThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_id_less_than,
            'numberId.lessThan', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_id_greater_than_or_equal,
            'numberId.greaterThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_id_less_than_or_equal,
            'numberId.lessThanOrEqual', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_id_equals,
            'numberId.equals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_id_not_equals,
            'numberId.notEquals', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_id_specified,
            'numberId.specified', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_id_in,
            'numberId.in', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number_id_not_in,
            'numberId.notIn', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $distinct,
            'distinct', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pageable,
            'pageable', // param base name
            'object', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLinkedMembers
     *
     * @param  string $external_user_id external_user_id (required)
     * @param  int $organisation_id organisation_id (optional)
     * @param  int $membership_type_id membership_type_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLinkedMembers'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Idealogic\MembershipAPI\Model\MembershipStatusDTO[]
     */
    public function getLinkedMembers($external_user_id, $organisation_id = null, $membership_type_id = null, string $contentType = self::contentTypes['getLinkedMembers'][0])
    {
        list($response) = $this->getLinkedMembersWithHttpInfo($external_user_id, $organisation_id, $membership_type_id, $contentType);
        return $response;
    }

    /**
     * Operation getLinkedMembersWithHttpInfo
     *
     * @param  string $external_user_id (required)
     * @param  int $organisation_id (optional)
     * @param  int $membership_type_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLinkedMembers'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Idealogic\MembershipAPI\Model\MembershipStatusDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getLinkedMembersWithHttpInfo($external_user_id, $organisation_id = null, $membership_type_id = null, string $contentType = self::contentTypes['getLinkedMembers'][0])
    {
        $request = $this->getLinkedMembersRequest($external_user_id, $organisation_id, $membership_type_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Idealogic\MembershipAPI\Model\MembershipStatusDTO[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Idealogic\MembershipAPI\Model\MembershipStatusDTO[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Idealogic\MembershipAPI\Model\MembershipStatusDTO[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Idealogic\MembershipAPI\Model\MembershipStatusDTO[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Idealogic\MembershipAPI\Model\MembershipStatusDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLinkedMembersAsync
     *
     * @param  string $external_user_id (required)
     * @param  int $organisation_id (optional)
     * @param  int $membership_type_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLinkedMembers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLinkedMembersAsync($external_user_id, $organisation_id = null, $membership_type_id = null, string $contentType = self::contentTypes['getLinkedMembers'][0])
    {
        return $this->getLinkedMembersAsyncWithHttpInfo($external_user_id, $organisation_id, $membership_type_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLinkedMembersAsyncWithHttpInfo
     *
     * @param  string $external_user_id (required)
     * @param  int $organisation_id (optional)
     * @param  int $membership_type_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLinkedMembers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLinkedMembersAsyncWithHttpInfo($external_user_id, $organisation_id = null, $membership_type_id = null, string $contentType = self::contentTypes['getLinkedMembers'][0])
    {
        $returnType = '\Idealogic\MembershipAPI\Model\MembershipStatusDTO[]';
        $request = $this->getLinkedMembersRequest($external_user_id, $organisation_id, $membership_type_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLinkedMembers'
     *
     * @param  string $external_user_id (required)
     * @param  int $organisation_id (optional)
     * @param  int $membership_type_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLinkedMembers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLinkedMembersRequest($external_user_id, $organisation_id = null, $membership_type_id = null, string $contentType = self::contentTypes['getLinkedMembers'][0])
    {

        // verify the required parameter 'external_user_id' is set
        if ($external_user_id === null || (is_array($external_user_id) && count($external_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_user_id when calling getLinkedMembers'
            );
        }




        $resourcePath = '/api/memberships/linkedStatus/{externalUserId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $organisation_id,
            'organisationId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_type_id,
            'membershipTypeId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($external_user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'externalUserId' . '}',
                ObjectSerializer::toPathValue($external_user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMemberStatusByLatestPeriodForMembershipType
     *
     * @param  string $external_user_id external_user_id (required)
     * @param  int $membership_type_id membership_type_id (required)
     * @param  int $organisation_id organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMemberStatusByLatestPeriodForMembershipType'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Idealogic\MembershipAPI\Model\LatestPeriodMembershipStatusResponseDTO
     */
    public function getMemberStatusByLatestPeriodForMembershipType($external_user_id, $membership_type_id, $organisation_id = null, string $contentType = self::contentTypes['getMemberStatusByLatestPeriodForMembershipType'][0])
    {
        list($response) = $this->getMemberStatusByLatestPeriodForMembershipTypeWithHttpInfo($external_user_id, $membership_type_id, $organisation_id, $contentType);
        return $response;
    }

    /**
     * Operation getMemberStatusByLatestPeriodForMembershipTypeWithHttpInfo
     *
     * @param  string $external_user_id (required)
     * @param  int $membership_type_id (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMemberStatusByLatestPeriodForMembershipType'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Idealogic\MembershipAPI\Model\LatestPeriodMembershipStatusResponseDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMemberStatusByLatestPeriodForMembershipTypeWithHttpInfo($external_user_id, $membership_type_id, $organisation_id = null, string $contentType = self::contentTypes['getMemberStatusByLatestPeriodForMembershipType'][0])
    {
        $request = $this->getMemberStatusByLatestPeriodForMembershipTypeRequest($external_user_id, $membership_type_id, $organisation_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Idealogic\MembershipAPI\Model\LatestPeriodMembershipStatusResponseDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Idealogic\MembershipAPI\Model\LatestPeriodMembershipStatusResponseDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Idealogic\MembershipAPI\Model\LatestPeriodMembershipStatusResponseDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Idealogic\MembershipAPI\Model\LatestPeriodMembershipStatusResponseDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Idealogic\MembershipAPI\Model\LatestPeriodMembershipStatusResponseDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMemberStatusByLatestPeriodForMembershipTypeAsync
     *
     * @param  string $external_user_id (required)
     * @param  int $membership_type_id (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMemberStatusByLatestPeriodForMembershipType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMemberStatusByLatestPeriodForMembershipTypeAsync($external_user_id, $membership_type_id, $organisation_id = null, string $contentType = self::contentTypes['getMemberStatusByLatestPeriodForMembershipType'][0])
    {
        return $this->getMemberStatusByLatestPeriodForMembershipTypeAsyncWithHttpInfo($external_user_id, $membership_type_id, $organisation_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMemberStatusByLatestPeriodForMembershipTypeAsyncWithHttpInfo
     *
     * @param  string $external_user_id (required)
     * @param  int $membership_type_id (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMemberStatusByLatestPeriodForMembershipType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMemberStatusByLatestPeriodForMembershipTypeAsyncWithHttpInfo($external_user_id, $membership_type_id, $organisation_id = null, string $contentType = self::contentTypes['getMemberStatusByLatestPeriodForMembershipType'][0])
    {
        $returnType = '\Idealogic\MembershipAPI\Model\LatestPeriodMembershipStatusResponseDTO';
        $request = $this->getMemberStatusByLatestPeriodForMembershipTypeRequest($external_user_id, $membership_type_id, $organisation_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMemberStatusByLatestPeriodForMembershipType'
     *
     * @param  string $external_user_id (required)
     * @param  int $membership_type_id (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMemberStatusByLatestPeriodForMembershipType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMemberStatusByLatestPeriodForMembershipTypeRequest($external_user_id, $membership_type_id, $organisation_id = null, string $contentType = self::contentTypes['getMemberStatusByLatestPeriodForMembershipType'][0])
    {

        // verify the required parameter 'external_user_id' is set
        if ($external_user_id === null || (is_array($external_user_id) && count($external_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_user_id when calling getMemberStatusByLatestPeriodForMembershipType'
            );
        }

        // verify the required parameter 'membership_type_id' is set
        if ($membership_type_id === null || (is_array($membership_type_id) && count($membership_type_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $membership_type_id when calling getMemberStatusByLatestPeriodForMembershipType'
            );
        }



        $resourcePath = '/api/memberships/status/latestPeriod';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $organisation_id,
            'organisationId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $external_user_id,
            'externalUserId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $membership_type_id,
            'membershipTypeId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMembership
     *
     * @param  int $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMembership'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Idealogic\MembershipAPI\Model\MembershipDTO
     */
    public function getMembership($id, string $contentType = self::contentTypes['getMembership'][0])
    {
        list($response) = $this->getMembershipWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getMembershipWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMembership'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Idealogic\MembershipAPI\Model\MembershipDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMembershipWithHttpInfo($id, string $contentType = self::contentTypes['getMembership'][0])
    {
        $request = $this->getMembershipRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Idealogic\MembershipAPI\Model\MembershipDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Idealogic\MembershipAPI\Model\MembershipDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Idealogic\MembershipAPI\Model\MembershipDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Idealogic\MembershipAPI\Model\MembershipDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Idealogic\MembershipAPI\Model\MembershipDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMembershipAsync
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMembership'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMembershipAsync($id, string $contentType = self::contentTypes['getMembership'][0])
    {
        return $this->getMembershipAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMembershipAsyncWithHttpInfo
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMembership'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMembershipAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getMembership'][0])
    {
        $returnType = '\Idealogic\MembershipAPI\Model\MembershipDTO';
        $request = $this->getMembershipRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMembership'
     *
     * @param  int $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMembership'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMembershipRequest($id, string $contentType = self::contentTypes['getMembership'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getMembership'
            );
        }


        $resourcePath = '/api/memberships/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMembershipAttachment
     *
     * @param  string $uuid uuid (required)
     * @param  int $organisation_id organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMembershipAttachment'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function getMembershipAttachment($uuid, $organisation_id = null, string $contentType = self::contentTypes['getMembershipAttachment'][0])
    {
        list($response) = $this->getMembershipAttachmentWithHttpInfo($uuid, $organisation_id, $contentType);
        return $response;
    }

    /**
     * Operation getMembershipAttachmentWithHttpInfo
     *
     * @param  string $uuid (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMembershipAttachment'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getMembershipAttachmentWithHttpInfo($uuid, $organisation_id = null, string $contentType = self::contentTypes['getMembershipAttachment'][0])
    {
        $request = $this->getMembershipAttachmentRequest($uuid, $organisation_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMembershipAttachmentAsync
     *
     * @param  string $uuid (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMembershipAttachment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMembershipAttachmentAsync($uuid, $organisation_id = null, string $contentType = self::contentTypes['getMembershipAttachment'][0])
    {
        return $this->getMembershipAttachmentAsyncWithHttpInfo($uuid, $organisation_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMembershipAttachmentAsyncWithHttpInfo
     *
     * @param  string $uuid (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMembershipAttachment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMembershipAttachmentAsyncWithHttpInfo($uuid, $organisation_id = null, string $contentType = self::contentTypes['getMembershipAttachment'][0])
    {
        $returnType = 'string[]';
        $request = $this->getMembershipAttachmentRequest($uuid, $organisation_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMembershipAttachment'
     *
     * @param  string $uuid (required)
     * @param  int $organisation_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMembershipAttachment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMembershipAttachmentRequest($uuid, $organisation_id = null, string $contentType = self::contentTypes['getMembershipAttachment'][0])
    {

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling getMembershipAttachment'
            );
        }



        $resourcePath = '/api/memberships/attachment/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $organisation_id,
            'organisationId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/pdf', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation importMembership
     *
     * @param  string $file file (required)
     * @param  int $sheet_index sheet_index (required)
     * @param  int $period_id period_id (required)
     * @param  int $org_id org_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importMembership'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Idealogic\MembershipAPI\Model\MembershipAddResponseDTO[]
     */
    public function importMembership($file, $sheet_index, $period_id, $org_id = null, string $contentType = self::contentTypes['importMembership'][0])
    {
        list($response) = $this->importMembershipWithHttpInfo($file, $sheet_index, $period_id, $org_id, $contentType);
        return $response;
    }

    /**
     * Operation importMembershipWithHttpInfo
     *
     * @param  string $file (required)
     * @param  int $sheet_index (required)
     * @param  int $period_id (required)
     * @param  int $org_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importMembership'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Idealogic\MembershipAPI\Model\MembershipAddResponseDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function importMembershipWithHttpInfo($file, $sheet_index, $period_id, $org_id = null, string $contentType = self::contentTypes['importMembership'][0])
    {
        $request = $this->importMembershipRequest($file, $sheet_index, $period_id, $org_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Idealogic\MembershipAPI\Model\MembershipAddResponseDTO[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Idealogic\MembershipAPI\Model\MembershipAddResponseDTO[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Idealogic\MembershipAPI\Model\MembershipAddResponseDTO[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Idealogic\MembershipAPI\Model\MembershipAddResponseDTO[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Idealogic\MembershipAPI\Model\MembershipAddResponseDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation importMembershipAsync
     *
     * @param  string $file (required)
     * @param  int $sheet_index (required)
     * @param  int $period_id (required)
     * @param  int $org_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importMembership'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function importMembershipAsync($file, $sheet_index, $period_id, $org_id = null, string $contentType = self::contentTypes['importMembership'][0])
    {
        return $this->importMembershipAsyncWithHttpInfo($file, $sheet_index, $period_id, $org_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation importMembershipAsyncWithHttpInfo
     *
     * @param  string $file (required)
     * @param  int $sheet_index (required)
     * @param  int $period_id (required)
     * @param  int $org_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importMembership'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function importMembershipAsyncWithHttpInfo($file, $sheet_index, $period_id, $org_id = null, string $contentType = self::contentTypes['importMembership'][0])
    {
        $returnType = '\Idealogic\MembershipAPI\Model\MembershipAddResponseDTO[]';
        $request = $this->importMembershipRequest($file, $sheet_index, $period_id, $org_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'importMembership'
     *
     * @param  string $file (required)
     * @param  int $sheet_index (required)
     * @param  int $period_id (required)
     * @param  int $org_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['importMembership'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function importMembershipRequest($file, $sheet_index, $period_id, $org_id = null, string $contentType = self::contentTypes['importMembership'][0])
    {

        // verify the required parameter 'file' is set
        if ($file === null || (is_array($file) && count($file) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file when calling importMembership'
            );
        }

        // verify the required parameter 'sheet_index' is set
        if ($sheet_index === null || (is_array($sheet_index) && count($sheet_index) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sheet_index when calling importMembership'
            );
        }

        // verify the required parameter 'period_id' is set
        if ($period_id === null || (is_array($period_id) && count($period_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $period_id when calling importMembership'
            );
        }



        $resourcePath = '/api/memberships/import';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $file,
            'file', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sheet_index,
            'sheetIndex', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $org_id,
            'orgId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period_id,
            'periodId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateMembership
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipDTO $membership_dto membership_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMembership'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Idealogic\MembershipAPI\Model\MembershipDTO
     */
    public function updateMembership($membership_dto, string $contentType = self::contentTypes['updateMembership'][0])
    {
        list($response) = $this->updateMembershipWithHttpInfo($membership_dto, $contentType);
        return $response;
    }

    /**
     * Operation updateMembershipWithHttpInfo
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipDTO $membership_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMembership'] to see the possible values for this operation
     *
     * @throws \Idealogic\MembershipAPI\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Idealogic\MembershipAPI\Model\MembershipDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateMembershipWithHttpInfo($membership_dto, string $contentType = self::contentTypes['updateMembership'][0])
    {
        $request = $this->updateMembershipRequest($membership_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Idealogic\MembershipAPI\Model\MembershipDTO' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Idealogic\MembershipAPI\Model\MembershipDTO' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Idealogic\MembershipAPI\Model\MembershipDTO', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Idealogic\MembershipAPI\Model\MembershipDTO';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Idealogic\MembershipAPI\Model\MembershipDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateMembershipAsync
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipDTO $membership_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMembership'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateMembershipAsync($membership_dto, string $contentType = self::contentTypes['updateMembership'][0])
    {
        return $this->updateMembershipAsyncWithHttpInfo($membership_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateMembershipAsyncWithHttpInfo
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipDTO $membership_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMembership'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateMembershipAsyncWithHttpInfo($membership_dto, string $contentType = self::contentTypes['updateMembership'][0])
    {
        $returnType = '\Idealogic\MembershipAPI\Model\MembershipDTO';
        $request = $this->updateMembershipRequest($membership_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateMembership'
     *
     * @param  \Idealogic\MembershipAPI\Model\MembershipDTO $membership_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateMembership'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateMembershipRequest($membership_dto, string $contentType = self::contentTypes['updateMembership'][0])
    {

        // verify the required parameter 'membership_dto' is set
        if ($membership_dto === null || (is_array($membership_dto) && count($membership_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $membership_dto when calling updateMembership'
            );
        }


        $resourcePath = '/api/memberships';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($membership_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($membership_dto));
            } else {
                $httpBody = $membership_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
