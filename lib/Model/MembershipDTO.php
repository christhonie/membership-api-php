<?php
/**
 * MembershipDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Idealogic\MembershipAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Application API
 *
 * API documentation
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Idealogic\MembershipAPI\Model;

use \ArrayAccess;
use \Idealogic\MembershipAPI\ObjectSerializer;

/**
 * MembershipDTO Class Doc Comment
 *
 * @category Class
 * @package  Idealogic\MembershipAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MembershipDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MembershipDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'criteria_id' => 'int',
        'criteria_name' => 'string',
        'id' => 'int',
        'membership_period_id' => 'int',
        'membership_period_name' => 'string',
        'number_id' => 'int',
        'number_number' => 'string',
        'order_id' => 'int',
        'order_number' => 'string',
        'person_id' => 'int',
        'person_name' => 'string',
        'status' => 'string',
        'valid_from' => '\DateTime',
        'valid_to' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'criteria_id' => 'int64',
        'criteria_name' => null,
        'id' => 'int64',
        'membership_period_id' => 'int64',
        'membership_period_name' => null,
        'number_id' => 'int64',
        'number_number' => null,
        'order_id' => 'int64',
        'order_number' => null,
        'person_id' => 'int64',
        'person_name' => null,
        'status' => null,
        'valid_from' => 'date',
        'valid_to' => 'date'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'criteria_id' => 'criteriaId',
        'criteria_name' => 'criteriaName',
        'id' => 'id',
        'membership_period_id' => 'membershipPeriodId',
        'membership_period_name' => 'membershipPeriodName',
        'number_id' => 'numberId',
        'number_number' => 'numberNumber',
        'order_id' => 'orderId',
        'order_number' => 'orderNumber',
        'person_id' => 'personId',
        'person_name' => 'personName',
        'status' => 'status',
        'valid_from' => 'validFrom',
        'valid_to' => 'validTo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'criteria_id' => 'setCriteriaId',
        'criteria_name' => 'setCriteriaName',
        'id' => 'setId',
        'membership_period_id' => 'setMembershipPeriodId',
        'membership_period_name' => 'setMembershipPeriodName',
        'number_id' => 'setNumberId',
        'number_number' => 'setNumberNumber',
        'order_id' => 'setOrderId',
        'order_number' => 'setOrderNumber',
        'person_id' => 'setPersonId',
        'person_name' => 'setPersonName',
        'status' => 'setStatus',
        'valid_from' => 'setValidFrom',
        'valid_to' => 'setValidTo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'criteria_id' => 'getCriteriaId',
        'criteria_name' => 'getCriteriaName',
        'id' => 'getId',
        'membership_period_id' => 'getMembershipPeriodId',
        'membership_period_name' => 'getMembershipPeriodName',
        'number_id' => 'getNumberId',
        'number_number' => 'getNumberNumber',
        'order_id' => 'getOrderId',
        'order_number' => 'getOrderNumber',
        'person_id' => 'getPersonId',
        'person_name' => 'getPersonName',
        'status' => 'getStatus',
        'valid_from' => 'getValidFrom',
        'valid_to' => 'getValidTo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_DRAFT = 'DRAFT';
    const STATUS_PENDING = 'PENDING';
    const STATUS_ACTIVE = 'ACTIVE';
    const STATUS_REVOKED = 'REVOKED';
    const STATUS_EXPIRED = 'EXPIRED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_DRAFT,
            self::STATUS_PENDING,
            self::STATUS_ACTIVE,
            self::STATUS_REVOKED,
            self::STATUS_EXPIRED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['criteria_id'] = isset($data['criteria_id']) ? $data['criteria_id'] : null;
        $this->container['criteria_name'] = isset($data['criteria_name']) ? $data['criteria_name'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['membership_period_id'] = isset($data['membership_period_id']) ? $data['membership_period_id'] : null;
        $this->container['membership_period_name'] = isset($data['membership_period_name']) ? $data['membership_period_name'] : null;
        $this->container['number_id'] = isset($data['number_id']) ? $data['number_id'] : null;
        $this->container['number_number'] = isset($data['number_number']) ? $data['number_number'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['order_number'] = isset($data['order_number']) ? $data['order_number'] : null;
        $this->container['person_id'] = isset($data['person_id']) ? $data['person_id'] : null;
        $this->container['person_name'] = isset($data['person_name']) ? $data['person_name'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['valid_from'] = isset($data['valid_from']) ? $data['valid_from'] : null;
        $this->container['valid_to'] = isset($data['valid_to']) ? $data['valid_to'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['valid_from'] === null) {
            $invalidProperties[] = "'valid_from' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets criteria_id
     *
     * @return int
     */
    public function getCriteriaId()
    {
        return $this->container['criteria_id'];
    }

    /**
     * Sets criteria_id
     *
     * @param int $criteria_id criteria_id
     *
     * @return $this
     */
    public function setCriteriaId($criteria_id)
    {
        $this->container['criteria_id'] = $criteria_id;

        return $this;
    }

    /**
     * Gets criteria_name
     *
     * @return string
     */
    public function getCriteriaName()
    {
        return $this->container['criteria_name'];
    }

    /**
     * Sets criteria_name
     *
     * @param string $criteria_name criteria_name
     *
     * @return $this
     */
    public function setCriteriaName($criteria_name)
    {
        $this->container['criteria_name'] = $criteria_name;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets membership_period_id
     *
     * @return int
     */
    public function getMembershipPeriodId()
    {
        return $this->container['membership_period_id'];
    }

    /**
     * Sets membership_period_id
     *
     * @param int $membership_period_id membership_period_id
     *
     * @return $this
     */
    public function setMembershipPeriodId($membership_period_id)
    {
        $this->container['membership_period_id'] = $membership_period_id;

        return $this;
    }

    /**
     * Gets membership_period_name
     *
     * @return string
     */
    public function getMembershipPeriodName()
    {
        return $this->container['membership_period_name'];
    }

    /**
     * Sets membership_period_name
     *
     * @param string $membership_period_name membership_period_name
     *
     * @return $this
     */
    public function setMembershipPeriodName($membership_period_name)
    {
        $this->container['membership_period_name'] = $membership_period_name;

        return $this;
    }

    /**
     * Gets number_id
     *
     * @return int
     */
    public function getNumberId()
    {
        return $this->container['number_id'];
    }

    /**
     * Sets number_id
     *
     * @param int $number_id number_id
     *
     * @return $this
     */
    public function setNumberId($number_id)
    {
        $this->container['number_id'] = $number_id;

        return $this;
    }

    /**
     * Gets number_number
     *
     * @return string
     */
    public function getNumberNumber()
    {
        return $this->container['number_number'];
    }

    /**
     * Sets number_number
     *
     * @param string $number_number number_number
     *
     * @return $this
     */
    public function setNumberNumber($number_number)
    {
        $this->container['number_number'] = $number_number;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return int
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int $order_id order_id
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets order_number
     *
     * @return string
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param string $order_number order_number
     *
     * @return $this
     */
    public function setOrderNumber($order_number)
    {
        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets person_id
     *
     * @return int
     */
    public function getPersonId()
    {
        return $this->container['person_id'];
    }

    /**
     * Sets person_id
     *
     * @param int $person_id User ID in the external system
     *
     * @return $this
     */
    public function setPersonId($person_id)
    {
        $this->container['person_id'] = $person_id;

        return $this;
    }

    /**
     * Gets person_name
     *
     * @return string
     */
    public function getPersonName()
    {
        return $this->container['person_name'];
    }

    /**
     * Sets person_name
     *
     * @param string $person_name person_name
     *
     * @return $this
     */
    public function setPersonName($person_name)
    {
        $this->container['person_name'] = $person_name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets valid_from
     *
     * @return \DateTime
     */
    public function getValidFrom()
    {
        return $this->container['valid_from'];
    }

    /**
     * Sets valid_from
     *
     * @param \DateTime $valid_from valid_from
     *
     * @return $this
     */
    public function setValidFrom($valid_from)
    {
        $this->container['valid_from'] = $valid_from;

        return $this;
    }

    /**
     * Gets valid_to
     *
     * @return \DateTime
     */
    public function getValidTo()
    {
        return $this->container['valid_to'];
    }

    /**
     * Sets valid_to
     *
     * @param \DateTime $valid_to valid_to
     *
     * @return $this
     */
    public function setValidTo($valid_to)
    {
        $this->container['valid_to'] = $valid_to;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


