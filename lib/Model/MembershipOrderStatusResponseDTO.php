<?php
/**
 * MembershipOrderStatusResponseDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Idealogic\MembershipAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Application API
 *
 * API documentation
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Idealogic\MembershipAPI\Model;

use \ArrayAccess;
use \Idealogic\MembershipAPI\ObjectSerializer;

/**
 * MembershipOrderStatusResponseDTO Class Doc Comment
 *
 * @category Class
 * @package  Idealogic\MembershipAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MembershipOrderStatusResponseDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MembershipOrderStatusResponseDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'card_attachment_filename' => 'string',
        'card_attachment_url' => 'string',
        'card_data' => 'string',
        'member_list' => '\Idealogic\MembershipAPI\Model\MembershipStatusDTO[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'card_attachment_filename' => null,
        'card_attachment_url' => null,
        'card_data' => null,
        'member_list' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'card_attachment_filename' => 'cardAttachmentFilename',
        'card_attachment_url' => 'cardAttachmentURL',
        'card_data' => 'cardData',
        'member_list' => 'memberList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'card_attachment_filename' => 'setCardAttachmentFilename',
        'card_attachment_url' => 'setCardAttachmentUrl',
        'card_data' => 'setCardData',
        'member_list' => 'setMemberList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'card_attachment_filename' => 'getCardAttachmentFilename',
        'card_attachment_url' => 'getCardAttachmentUrl',
        'card_data' => 'getCardData',
        'member_list' => 'getMemberList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['card_attachment_filename'] = isset($data['card_attachment_filename']) ? $data['card_attachment_filename'] : null;
        $this->container['card_attachment_url'] = isset($data['card_attachment_url']) ? $data['card_attachment_url'] : null;
        $this->container['card_data'] = isset($data['card_data']) ? $data['card_data'] : null;
        $this->container['member_list'] = isset($data['member_list']) ? $data['member_list'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets card_attachment_filename
     *
     * @return string
     */
    public function getCardAttachmentFilename()
    {
        return $this->container['card_attachment_filename'];
    }

    /**
     * Sets card_attachment_filename
     *
     * @param string $card_attachment_filename card_attachment_filename
     *
     * @return $this
     */
    public function setCardAttachmentFilename($card_attachment_filename)
    {
        $this->container['card_attachment_filename'] = $card_attachment_filename;

        return $this;
    }

    /**
     * Gets card_attachment_url
     *
     * @return string
     */
    public function getCardAttachmentUrl()
    {
        return $this->container['card_attachment_url'];
    }

    /**
     * Sets card_attachment_url
     *
     * @param string $card_attachment_url card_attachment_url
     *
     * @return $this
     */
    public function setCardAttachmentUrl($card_attachment_url)
    {
        $this->container['card_attachment_url'] = $card_attachment_url;

        return $this;
    }

    /**
     * Gets card_data
     *
     * @return string
     */
    public function getCardData()
    {
        return $this->container['card_data'];
    }

    /**
     * Sets card_data
     *
     * @param string $card_data card_data
     *
     * @return $this
     */
    public function setCardData($card_data)
    {
        $this->container['card_data'] = $card_data;

        return $this;
    }

    /**
     * Gets member_list
     *
     * @return \Idealogic\MembershipAPI\Model\MembershipStatusDTO[]
     */
    public function getMemberList()
    {
        return $this->container['member_list'];
    }

    /**
     * Sets member_list
     *
     * @param \Idealogic\MembershipAPI\Model\MembershipStatusDTO[] $member_list member_list
     *
     * @return $this
     */
    public function setMemberList($member_list)
    {
        $this->container['member_list'] = $member_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


